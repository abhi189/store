From b7efa4f3a6a9df5afb3ae322b20e3cab3d03485e Mon Sep 17 00:00:00 2001
From: Diego Maure <diego.maure@gotocme.com>
Date: Thu, 4 Apr 2019 12:32:03 -0300
Subject: [PATCH] Generated with JHipster 5.7.2

---
 .editorconfig                                      |   2 +-
 .gitattributes                                     |   1 -
 .gitignore                                         |   3 +-
 .mvn/wrapper/MavenWrapperDownloader.java           | 110 +++
 .mvn/wrapper/maven-wrapper.jar                     | Bin 49502 -> 48337 bytes
 .mvn/wrapper/maven-wrapper.properties              |   2 +-
 .prettierignore                                    |   3 +
 .prettierrc                                        |  12 +
 .yo-rc.json                                        |   5 +-
 README.md                                          |  60 +-
 mvnw                                               | 157 ++--
 mvnw.cmd                                           |  28 +-
 package.json                                       |  28 +-
 pom.xml                                            | 888 +++++++++++----------
 src/main/docker/.dockerignore                      |  13 +-
 src/main/docker/Dockerfile                         |  15 +-
 src/main/docker/app.yml                            |   6 +-
 src/main/docker/central-server-config/README.md    |   7 +-
 .../docker-config/application.yml                  |   2 +-
 .../localhost-config/application.yml               |   2 +-
 src/main/docker/elasticsearch.yml                  |   5 +-
 src/main/docker/entrypoint.sh                      |   4 +
 src/main/docker/hazelcast-management-center.yml    |   2 +-
 src/main/docker/jhipster-registry.yml              |  17 +-
 src/main/docker/mysql.yml                          |   2 +-
 src/main/docker/sonar.yml                          |   4 +-
 .../com/budderfly/sites/ApplicationWebXml.java     |   4 +-
 src/main/java/com/budderfly/sites/SitesApp.java    |  46 +-
 .../sites/client/AuthorizedFeignClient.java        |   4 +-
 .../sites/client/AuthorizedUserFeignClient.java    |   4 +-
 .../OAuth2InterceptedFeignConfiguration.java       |   2 -
 .../client/OAuth2UserClientFeignConfiguration.java |   2 -
 .../sites/client/UserFeignClientInterceptor.java   |   2 -
 .../budderfly/sites/config/AsyncConfiguration.java |  15 +-
 .../budderfly/sites/config/CacheConfiguration.java |  21 +-
 .../sites/config/CloudDatabaseConfiguration.java   |   5 +
 .../java/com/budderfly/sites/config/Constants.java |   2 +-
 .../sites/config/DatabaseConfiguration.java        |  40 +-
 .../sites/config/DateTimeFormatConfiguration.java  |   7 +-
 .../sites/config/ElasticsearchConfiguration.java   |  47 +-
 .../budderfly/sites/config/FeignConfiguration.java |  10 +-
 .../sites/config/JacksonConfiguration.java         |  19 +-
 .../sites/config/LiquibaseConfiguration.java       |  53 ++
 .../sites/config/LocaleConfiguration.java          |  12 +-
 .../sites/config/LoggingConfiguration.java         |  15 +-
 .../sites/config/MetricsConfiguration.java         |  42 +-
 .../config/MicroserviceSecurityConfiguration.java  |  76 --
 .../sites/config/SecurityConfiguration.java        |  75 ++
 .../sites/config/ThymeleafConfiguration.java       |  26 -
 .../com/budderfly/sites/config/WebConfigurer.java  |  51 +-
 .../sites/config/audit/AuditEventConverter.java    |  13 +-
 .../oauth2/OAuth2JwtAccessTokenConverter.java      |  31 +-
 .../sites/domain/AbstractAuditingEntity.java       |   6 +-
 .../sites/domain/PersistentAuditEvent.java         |  30 +
 src/main/java/com/budderfly/sites/domain/Site.java |   2 +
 .../budderfly/sites/repository/SiteRepository.java |   5 +-
 .../sites/security/SpringSecurityAuditorAware.java |   6 +-
 .../com/budderfly/sites/security/package-info.java |   4 +
 .../budderfly/sites/service/SiteQueryService.java  |  43 +-
 .../com/budderfly/sites/service/SiteService.java   |   6 +-
 .../budderfly/sites/service/dto/SiteCriteria.java  |  78 +-
 .../com/budderfly/sites/service/dto/SiteDTO.java   |   6 +-
 .../sites/service/impl/SiteServiceImpl.java        |  18 +-
 .../sites/web/rest/ProfileInfoResource.java        |  69 --
 .../com/budderfly/sites/web/rest/SiteResource.java |  23 +-
 .../web/rest/errors/BadRequestAlertException.java  |   2 +
 .../web/rest/errors/EmailAlreadyUsedException.java |   4 +-
 .../web/rest/errors/EmailNotFoundException.java    |   2 +
 .../sites/web/rest/errors/ErrorConstants.java      |   3 +-
 .../sites/web/rest/errors/ExceptionTranslator.java |  44 +-
 .../rest/errors/InternalServerErrorException.java  |   2 +
 .../web/rest/errors/InvalidPasswordException.java  |   2 +
 .../web/rest/errors/LoginAlreadyUsedException.java |   4 +-
 .../budderfly/sites/web/rest/util/HeaderUtil.java  |   8 +-
 .../sites/web/rest/util/PaginationUtil.java        |   4 +-
 src/main/jib/entrypoint.sh                         |   4 +
 src/main/resources/banner.txt                      |   2 +-
 src/main/resources/config/application-dev.yml      |  77 +-
 src/main/resources/config/application-prod.yml     |  48 +-
 src/main/resources/config/application-tls.yml      |  20 +
 src/main/resources/config/application.yml          |  82 +-
 src/main/resources/config/bootstrap.yml            |   2 +-
 .../changelog/00000000000000_initial_schema.xml    |  17 +-
 .../changelog/20181018181721_added_entity_Site.xml |   4 +-
 src/main/resources/i18n/messages.properties        |   1 -
 src/main/resources/i18n/messages_en.properties     |   1 -
 src/main/resources/logback-spring.xml              |   7 +
 src/main/resources/static/index.html               |   6 +-
 src/main/resources/swagger/api.yml                 |   7 +-
 src/test/gatling/conf/gatling.conf                 | 235 +++---
 src/test/gatling/conf/logback.xml                  |   2 +
 .../user-files/simulations/SiteGatlingTest.scala   |  35 +-
 .../budderfly/sites/config/WebConfigurerTest.java  | 149 +---
 .../config/elasticsearch/IndexReinitializer.java   |  28 -
 .../config/timezone/HibernateTimeZoneTest.java     | 176 ++++
 .../SiteSearchRepositoryMockConfiguration.java     |  16 +
 .../sites/repository/timezone/DateTimeWrapper.java | 131 +++
 .../timezone/DateTimeWrapperRepository.java        |  12 +
 .../sites/security/SecurityUtilsUnitTest.java      |  64 ++
 .../sites/web/rest/LogsResourceIntTest.java        |   9 +-
 .../sites/web/rest/ProfileInfoResourceIntTest.java |  86 --
 .../sites/web/rest/SiteResourceIntTest.java        | 102 ++-
 .../com/budderfly/sites/web/rest/TestUtil.java     |  27 +-
 .../rest/errors/ExceptionTranslatorIntTest.java    |  25 +-
 .../errors/ExceptionTranslatorTestController.java  |   8 +-
 .../web/rest/util/PaginationUtilUnitTest.java      |  10 +-
 src/test/resources/config/application.yml          |  38 +-
 src/test/resources/logback.xml                     |   2 +
 108 files changed, 2253 insertions(+), 1553 deletions(-)
 create mode 100644 .mvn/wrapper/MavenWrapperDownloader.java
 create mode 100644 .prettierignore
 create mode 100644 .prettierrc
 create mode 100644 src/main/docker/entrypoint.sh
 create mode 100644 src/main/java/com/budderfly/sites/config/LiquibaseConfiguration.java
 delete mode 100644 src/main/java/com/budderfly/sites/config/MicroserviceSecurityConfiguration.java
 create mode 100644 src/main/java/com/budderfly/sites/config/SecurityConfiguration.java
 delete mode 100644 src/main/java/com/budderfly/sites/config/ThymeleafConfiguration.java
 create mode 100644 src/main/java/com/budderfly/sites/security/package-info.java
 delete mode 100644 src/main/java/com/budderfly/sites/web/rest/ProfileInfoResource.java
 create mode 100644 src/main/jib/entrypoint.sh
 create mode 100644 src/main/resources/config/application-tls.yml
 delete mode 100644 src/test/java/com/budderfly/sites/config/elasticsearch/IndexReinitializer.java
 create mode 100644 src/test/java/com/budderfly/sites/config/timezone/HibernateTimeZoneTest.java
 create mode 100644 src/test/java/com/budderfly/sites/repository/search/SiteSearchRepositoryMockConfiguration.java
 create mode 100644 src/test/java/com/budderfly/sites/repository/timezone/DateTimeWrapper.java
 create mode 100644 src/test/java/com/budderfly/sites/repository/timezone/DateTimeWrapperRepository.java
 create mode 100644 src/test/java/com/budderfly/sites/security/SecurityUtilsUnitTest.java
 delete mode 100644 src/test/java/com/budderfly/sites/web/rest/ProfileInfoResourceIntTest.java

diff --git a/.editorconfig b/.editorconfig
index a03599d..a79c052 100644
--- a/.editorconfig
+++ b/.editorconfig
@@ -19,6 +19,6 @@ insert_final_newline = true
 [*.md]
 trim_trailing_whitespace = false
 
-[{package,bower}.json]
+[package.json]
 indent_style = space
 indent_size = 2
diff --git a/.gitattributes b/.gitattributes
index 8ab72fe..c013844 100644
--- a/.gitattributes
+++ b/.gitattributes
@@ -93,7 +93,6 @@ TODO            text
 .stylelintrc    text
 
 ## CONFIGS
-*.bowerrc       text
 *.conf          text
 *.config        text
 .editorconfig   text
diff --git a/.gitignore b/.gitignore
index c2cb540..e746b25 100644
--- a/.gitignore
+++ b/.gitignore
@@ -3,7 +3,6 @@
 ######################
 /target/www/**
 /src/test/javascript/coverage/
-/src/test/javascript/PhantomJS*/
 
 ######################
 # Node
@@ -13,6 +12,7 @@ node_tmp/
 node_modules/
 npm-debug.log.*
 /.awcache/*
+/.cache-loader/*
 
 ######################
 # SASS
@@ -60,6 +60,7 @@ local.properties
 *.ids
 *.orig
 classes/
+out/
 
 ######################
 # Visual Studio Code
diff --git a/.mvn/wrapper/MavenWrapperDownloader.java b/.mvn/wrapper/MavenWrapperDownloader.java
new file mode 100644
index 0000000..8fe1fab
--- /dev/null
+++ b/.mvn/wrapper/MavenWrapperDownloader.java
@@ -0,0 +1,110 @@
+/*
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+  http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing,
+software distributed under the License is distributed on an
+"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+KIND, either express or implied.  See the License for the
+specific language governing permissions and limitations
+under the License.
+*/
+
+import java.net.*;
+import java.io.*;
+import java.nio.channels.*;
+import java.util.Properties;
+
+public class MavenWrapperDownloader {
+
+    /**
+     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.
+     */
+    private static final String DEFAULT_DOWNLOAD_URL =
+            "https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.4.2/maven-wrapper-0.4.2.jar";
+
+    /**
+     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to
+     * use instead of the default one.
+     */
+    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =
+            ".mvn/wrapper/maven-wrapper.properties";
+
+    /**
+     * Path where the maven-wrapper.jar will be saved to.
+     */
+    private static final String MAVEN_WRAPPER_JAR_PATH =
+            ".mvn/wrapper/maven-wrapper.jar";
+
+    /**
+     * Name of the property which should be used to override the default download url for the wrapper.
+     */
+    private static final String PROPERTY_NAME_WRAPPER_URL = "wrapperUrl";
+
+    public static void main(String args[]) {
+        System.out.println("- Downloader started");
+        File baseDirectory = new File(args[0]);
+        System.out.println("- Using base directory: " + baseDirectory.getAbsolutePath());
+
+        // If the maven-wrapper.properties exists, read it and check if it contains a custom
+        // wrapperUrl parameter.
+        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);
+        String url = DEFAULT_DOWNLOAD_URL;
+        if (mavenWrapperPropertyFile.exists()) {
+            FileInputStream mavenWrapperPropertyFileInputStream = null;
+            try {
+                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);
+                Properties mavenWrapperProperties = new Properties();
+                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);
+                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);
+            } catch (IOException e) {
+                System.out.println("- ERROR loading '" + MAVEN_WRAPPER_PROPERTIES_PATH + "'");
+            } finally {
+                try {
+                    if (mavenWrapperPropertyFileInputStream != null) {
+                        mavenWrapperPropertyFileInputStream.close();
+                    }
+                } catch (IOException e) {
+                    // Ignore ...
+                }
+            }
+        }
+        System.out.println("- Downloading from: : " + url);
+
+        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);
+        if (!outputFile.getParentFile().exists()) {
+            if (!outputFile.getParentFile().mkdirs()) {
+                System.out.println(
+                        "- ERROR creating output direcrory '" + outputFile.getParentFile().getAbsolutePath() + "'");
+            }
+        }
+        System.out.println("- Downloading to: " + outputFile.getAbsolutePath());
+        try {
+            downloadFileFromURL(url, outputFile);
+            System.out.println("Done");
+            System.exit(0);
+        } catch (Throwable e) {
+            System.out.println("- Error downloading");
+            e.printStackTrace();
+            System.exit(1);
+        }
+    }
+
+    private static void downloadFileFromURL(String urlString, File destination) throws Exception {
+        URL website = new URL(urlString);
+        ReadableByteChannel rbc;
+        rbc = Channels.newChannel(website.openStream());
+        FileOutputStream fos = new FileOutputStream(destination);
+        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
+        fos.close();
+        rbc.close();
+    }
+
+}
diff --git a/.mvn/wrapper/maven-wrapper.jar b/.mvn/wrapper/maven-wrapper.jar
index 5fd4d5023f1463b5ba3970e33c460c1eb26d748d..01e67997377a393fd672c7dcde9dccbedf0cb1e9 100644
GIT binary patch
literal 48337
zcmbTe1CV9Qwl>;j+wQV$+qSXFw%KK)%eHN!%U!l@+x~l>b1vR}@9y}|TM-#CBjy|<
zb7YRpp)Z$$Gzci_H%LgxZ{NNV{%Qa9gZlF*E2<($D=8;N5Asbx8se{Sz5)O13x)rc
z5cR(k$_mO!iis+#(8-D=#R@|AF(8UQ`L7dVNSKQ%v^P|1A%aF~Lye$@HcO@sMYOb3
zl`5!ThJ1xSJwsg7hVYFtE5vS^5UE0$iDGCS{}RO;R#3y#{w-1hVSg*f1)7^vf<UNf
z)wF9Zei#8V-NF%1V9ztyu}jkfz%ltu-L599&CCMEtekl-a$QWIu_l|YD8-Tey^<{;
zUd!B-&aB8$pr=GFy(VMTLe*B7;e4W7y>kxrm!!N|oTR0H<e&!n_DAynZHf^7yQDS%
zR}<TRYof6J-{cl{bj|=PfTP8~#fbdx82w{hv~G?7dwUbde~T^a|2<oKI~zKCN4q~g
zI9r%FQA^WOO^#1Buue12Fz-sykJ8g#%hXMbFHuX5%h8PPOVLn`$Vki30YM*<B^Mo@
zBx8`GqZXn&0R2PDR#9(bx&Cy``KSHwa}WCGt(~LUza<dNzi0sV03&mge~T39|4I7)
zZ?XRx@4x!~Cxic+RRQ`R`;z(pYb5`{NXX94*~$6OTFU|~Y?Yk>j?N~IbVk+yC#NK}
z5myv()UMzV^!zkX@O=Yf!(Z_bF7}W>k*U4@--&RH0tHiHY0IpeezqrF#@8{E$9d=-
z7^kT=1Bl;(Q0k{*_vzz1Et{+*lbz%mkIOw(UA8)EE-Pkp{JtJhe@VXQ8sPNTn$Vkj
zicVp)sV%0omhsj;NCmI0l8zzA<n{*HrZNk)fVH4KV?ENGO1G=cPJmr_+WtHO6TZ#_
zU>ipDV#tp(Jr7p_BlL$}Pys_Soljzt<y0m+t#_9lNo5ko*WG$rsI|axK1TT}vfzT#
z-t`1XF@oZ*m~f!yj9H7Y6I=J|NG#BX6zMWb@sRGp=<7}1MKI9JDIx-vTk6bw$Y4W0
zsM_s+^yRRR3yIaFqsIBjwqSYg*_2iZgN0(kx05BnTr4`9b{2BW4b8$Zg>S%G-Wg+t
z&Q#=<03Hoga0R1&L!B);r{Cf~b<VpLDFb*Sji6t(W@f2k_JUey8!WU#ng<zkzxPfz
z^>$G5p#@?R-NNXMS8@cTWE^7V!?ixz(Ag>lld;>COenWc$RZ61W+pOW0wh>sN{~j;
zCBj!2<aQbZFtp}f8_b=$a(6{D0n2GMtH?dJh4$LJ<=V=~rYfS)M`4xygRLge-85Q|
zF2gNRM4<8alE_9(@&R<Gs^prKHzt<1jvF9jbZD8zBPe3^d5DrP0TGd{BH<KBsga}h
zJl&d^8S!b*J0?n{)NjT!R8EvJ)Kq%Cs>nn|4~CO<QmVZr&WhG07ycm*a9Ch9&Bisp
z$y8(vBej9?j3(MDN`}EZGNHddxmBi6`%quZ<-|6bj)YUmBrQ4n=SPXFMIBoyMeQT=
zYO0*MIPwR!iq~>wSgXHFH?BDr8pK323zvmDK-84E<JrxVa`cMM5IN`^3)tH#A7((U
zdUuPcXQ+vPH^B1%;|vkju2NL|wgC|A*Qvi$KC*6@dKF#Sont0t%Lr??rH?ac?x1Rw
zA~INBNM{X+<38CG`{@m#E6%LF&QFQ4%)qO9xseE=?i;cqq4%_C0pOVSjIB|@c6<4B
zU3LO7D#UO+o|+-0LsL|(3xcQ@gB6!hV@h{7tWGM^Y0KZWDf0`SbXKCjL)<KCJ#FGx
zC+XSQ|JAjhFNgNb$ER{FXa&@IRJ}{=EhAx~t56j`TrH>Sq25b;Tg%9(%NneBcs3;r
znZpzntG%E^XsSh|md^r-k0Oen5qE@awGLfpg;8P@a-s<{Fwf?w3WapWe|b-CQkqlo
z46GmTdPtkGYdI$e(d9Zl=?TU&uv9<Wy%Lb-oqYu7A+&>4VR`g|=7xB2Ur%=6id&R2
z4e@fP7`y58O2sl;YBCQFu7>0(lVt-r$9|06Q5V>4=>ycnT}Fyz#9p;3?86`ZD23@7
z<SM~oW?+u?MwYW}u=vHDueoIpH#KkXYzp_m3R|<=ruc=O9s6p<f%71)SHAOZ{+)?W
zrT>7n&`!LXzjx<cVSk9qlt-BbF^#m8TT_3ZZsjr>yg*P4Tz`>WVvpU9-<5MDSDcb1
zZaUyN@7mKLEPGS$^odZcW=GLe?3E$JsMR0kcL4#Z=b4P94Q#7O%_60{h>0D(6P*VH
z3<dJZ_fdw@BjQ3znq9u4ZPZB=r8MM3@)|N4E!CS@wH&X=!{!lwLcK}9Lc6%tMiOq!
zI^B9AZftkY)hnDguo?4QGvffqdR&i^kSAXugX1M}zQwtNua}&j>}>$stt2s!)w4C4
z{zsj!EyQm$2ARSHiRm49r7u)59ZyE}ZznFE7AdF&O&!-&(y=?-7$<LjK!5oKv&-*8
zLSWy%89@Jc+w?z=Xyv~<qD4$h0WQ|gB6e=J)^-466Gswd4<~068-@QgpMRd*Jp^5x
z%}s2bEsOxpcK<rUs}gnXkOfggwm=%CTb7knYJHm?$8=THx|n)X5wTHF8lzR?i`A7e
z0TWEZrlCY%Qg+q_;rzb{OfrE~EG1VXZR?#(4>LWcn4L_Yj%w`qzwz`cLqPRem1zN;
z)r)07;JFTnPODe09Z)SF5@^uRuGP~Mjil??oWmJTaCb;yx4?T?d**;AW!pOC^@GnT
zaY`WF609J>fG+h?5&#}OD1<%&;_lzM2vw70FNwn2U`-jMH7bJxdQM#6+dPNiiRFGT
z7zc{F6bo_V%NILyM?rBnNsH2>Bx~zj)pJ}*FJxW^D<LlO_B^`j&jpUcCqq&ni4-{`
z)lM(AYoBU`Ju#}&RTpf3m;Vi~E-up;faD0yUMrK@Vov-D1Q@H39k4))P+Q^WP8y<h
z3i?v|0Fv5+2Vy&kNYW?e$slsiL#11+-7)xJd6`b>C2NLlOI~18Mk`7sl=t`)To6Ui
zu4<E~kQwn-Xj<B<avK4AJfnkj0(FyrR0-^Xy|5Y0nW57BE_9fLsG~~kWX|JyovP5u
zfdIJhCaT2FCOJ<K>GK6KJx^6Ms4PP?jTn~jW6TOFLl3e2-q&ftT=31P1~a1%7=1XB
z+H~<1dh6%L)PbBmtsAr38>m~)?k3}<->1Bs+;227M@?!S+%X&M49o_e)X8|vZiLVa
z;zWb1<P8CXPo_(|zw{95dz=ZxA6MM|j~nz~KGOfxLxz7#5C6kYu=2xI#q%Xw*+{c4
zv8ZQBp*5Gzy*O+~_fM3iX0e#1E0o-@QECP{Gk!8=HgO}%O0!WG0RrnpMMa|zGgPdL
zh$zg<km%|>gYokP;Sbao^qD+2ZD_kUn=m=d{Q9_kpGxcbdQ0d5<_OZJ!bZJcmgBRf
z!Cdh`qQ_1NLhCulgn{V`C%|wLE8E6vq1Ogm`wb;7Dj+xpwik~?kEzDT$LS?#%!@_{
zhOoXOC95lVcQU^pK5x$D<Ga5<KcEbqSQwB++<f2}av+Nn9B&@<y2%H|9a1thB&K{c
zH{w(f{i_!pti!y<z!Yw(u?nhy0##&a$w<;G#^NAUq7o$oJ!UK=U>a$TscVXo19Pps
zA!(Mk>N|tskqBn=a#aDC4K%jV#+<Cebe<7;`T<qB5k`8y&PK%^AElH2V)Nm+_Xtu6
zp4ZK2T|7HIO$|1jGA27MqaxKL^idR}_O)_tgBW1dUZ$-E8Dz8bgz6Zl=WP+z;@HsV
zh}RBaAlRPm7>qI$$dPOK6;fPO)0$0j$`OV+mWhE+TqJoF5dgA=TH-}5DH<D~>_)H_
zh?b(tUu@65G-O)1ah%|CsU8>cLEy0!Y~#ut#Q|UT92MZok0b4V1INUL-)Dvvq`RZ4
zTU)YVX^r%_lXp<gNU^L<&XFXgc4NGH!`SfMd*}MtP>n_cwv`H=y49?!m{krF3Rh7O
z^z7l4D<+^7E?ji(L5CptsPGttD+Z7{N6c-`0V^lfFjsdO{aJMFfLG9+wClt<=Rj&G
zf6NgsPSKMrK6@Kvgarmx{&S48uc+ZLIvk0fbH}q-HQ4FSR33$+%FvNEusl6xin!?e
z@rrWUP5U?MbBDeYSO~L;S$hjxISwLr&0BOSd?fOyeCWm6hD~)|_9#jo+PVbAY3wzf
zcZS*2pX+8EHD~LdAl>sA*P>`g>>+&B{l94LNLp#KmC)t6`EPhL95s&MMph4<A;%qB
zIagPddar{rhm1VfBzrHH*@%k(*%UvOKDsq9F%%STba)NepJx<BsCf}<DIMwtsw<=G
zRGM69wuwN<IpWo56|;3+j!TVT!3h1_Z!IZqRPZ79n5s)PNLsHrBKKVR=s7s2_N000
zWvnLErkgjQ`c8eZ=*yp>6Sk^9x%B$RK!2MI--j8nvN31MNLAJBsG`+WMvo1}xpaoq
z%+W95_I`J1Pr&Xj`=)eN9<y}dfjf?FtuFDU&dKE({$RI-55h9okkNI~sceSElDgkw
zqb;CC&lxO>!Yt?LWKs3-`7nf)`G6#6#f+=JK!v943*F&veRQxKy-dm(VcnmA?K_l~
zfDWPYl6hhN?17d~^6Zuo@>Hswhq@HrQ)sb<SL-fs>7KK^TRhaM2f&td)$6zOn7we@
zd)x4-`?!qzTGDNS-E(^mjM%d46n>vPeMa;%7IJD<X3<y~ZnpT8!7ICMtKEq1dk!mG
zwZTgUp7ZTnxVNfYbXj~ou<b~?@+VuXBF8uKWl3(9mQz!a8-Aq4`2B<BcRJaMnOUJh
zYxQ>T(nC)T+WM5F-M$|p(78W!^ck6)A_!6|1o!D97tw8k|5@0(!8W&q9*ovYl)afk
z2mxnniCOSh7yHcSoEu8k`i15#oOi^O>u<t~yav7Wi-I&?DunI1!pn+MBYO2~_1Uc5
zn!<kY&)c`cQ`>O_oMpT=KQx4Ou{&C4vqZG}YD0q!{RX=`#5wmcHT=hqW3;Yvg5Y^^
ziVun<pi6L{vj9(}hJu=?;Y~4v@T=i5OwP5rwU&Uo2`IRF$Iug!UQb-Y3v*o|yrv+o
zxPgT3J9wU82mZVS?JVlA!ilUx8fp|NqGj!&GLd8S*);9c(doApw9JgKkWqIwBm<WQ
zC|2yS{Q^rYQx=7gB*<ob>z9V)>2&b^rI{ssTPx26OxTuCw|+{tt_M0TqD?Bg7cWN4
z%UH{38(EW1L^!b~rtWl)#<HDNzfT7|FBH#x9MmXqJK;$1v1hd}o6--HPNan|SBS}Y
zgd&WW4z=8)4<(-74F=9(s4~U%u}ha7P(zt7#7M_f6OT+VtRYHA^5@KfIgV&Ej}vG;
zA9PCk>i}=8IUa_oU8**_UEIw+SYMekH;Epx*SA7Hf!EN&t!)zuUca@_Q^zW(u_iK_
zrSw{nva4E6-Npy9?lHAa;b(O<b_#7xFpDRzXTB|N`=8x@KM<KY0tsdVN1tPN#iPWG
zz&G48uE=PVD(bPxSbTT2ZQ@!i(fYsgX=P*NriOXyi1|t5<V80RoQNEwr$oNr!n{C>
z`I74A{jNEXj(#r|eS^Vfj-I!aHv{fEkzv4=F%z0m;3^PXa27k0Hq#RN@J7TwQT4u7
ztisbp3w6#k!RC~!5g-RyjpTth$lf!5HIY_5pfZ8k#q!=q*n>~@93dD|V>=GvH^`zn
zVNwT@LfA8^4rpWz%FqcmzX2qEAhQ|_#u}md1$6G9qD%FXLw;fWWvqudd_m+PzI~g3
z`#WPz`M1XUKfT3&T4~XkUie-C#E`GN#P~S(Zx9%CY?EC?KP5<l-Ym%*%Qj3^&sK1G
zeuN@x2T77K`+eGxeeHR4fTZSL<O^Y%J0UV9_5K``JggJ}7^l}GDeIPsjKxL6gic4B
z(1{W)2v$BaLSW?~`63DVwR*orFxTnQzsE*2riw$o72x$|=z_>KNK`aLlI1;pJvq@d
z&0wI|dx##t6Gut6%Y9c-L|+kMov(7Oay++QemvI`JOle{8iE|2kZb=4x%a32?>-B~
z-%W$0t&=mr+WJ3o8d(|^209BapD`@6IMLbcBlWZlrr*Yrn^uRC1(}BGNr!<o(UVOW
zmzSeh<!_gn??N<b#sq|Zksu=XB{#axDk0-0fC7^-)DwS~wlJRyu6EE~Z7i}#FV>ct
z>xzEMV(&;ExHj5cce`pk%6!Xu=)QWtx2gfrAkJY@AZlHWiEe%^_}mdzvs(6>k7$e;
ze4i;rv$_Z$K>1Yo9f4&Jbx80?@X!+S{&QwA3j#sAA4<?h{i%7fcXI=x-4opP>U4#v
zwZqJ8%l~t7V+~BT%j4Bwga#Aq0&#rBl6p$QFqS{DalLd~MNR8Fru+cd<quwTsFlwj
zxz%oJ3++rIYBFtNAK}7TH?3%V5++~|4OeIMh5L)Q(Y+E3b&}Ix%xq|o9V(L*kB~ar
z7e5XJDa&QXMVoRPeHXH!AuVOx70L<*$z;Zn#?RoyD!YxJbJ5l=$U%aq@E=1TpN#~4
zrexZYLj!`$U(U7mWri9&LX4960WL`Dz0v%8-oht-tEMCz=}|8zg50xpR5m@i8|}21
z^@+MqbpYyeD+drgL6^<$HZ+9lAxDrU$n>oQ78Dl^K}@l#pmH1-e3?_0tZKdj@d2qu
z_{-B11*iuywLJgGUUxI|aen-((KcAZZdu8685Zi1b(#@_pmyAwTr?}#O7zNB7U6P3
zD=_g*ZqJk<zc!=8KIXfivuRU<uI=`xvHk&Y9q~w{$+ZB*CVilI%}CGbm}qcw%?A6;
z0XS%#HW!&a#c*4eI?a^{!VX`*@d%Q{$zSNNSM!)#@vtG7<n2{sBJ9mju(oG+p=Eu2
zmC(VGy@404BLeb@0g^Rotyo>g_9_X3lStTA-ENl1r>Q?p$X{6wU6~e7OKNIX_l9T#
z>XS?PlNEM>P&ycY3sbivwJYAqbQH^)z@PobVRER*Ud*bUi-hjADId`5WqlZ&o+^x=
z-Lf_80rC9>tqFBF%x#`o>69>D5f5Kp->>YPi5ArvgDwV#I6!UoP_F0YtfKoF2YduA
zCU!1`EB5;r68;WyeL-;(1K2!9sP)at9C?$hhy(dfKKBf}>skPqvcRl>UTAB05SRW!
z;`}sPVFFZ4I%YrPEtEsF(|F8gnfGkXI-2DLsj4_>%$_ZX8zVPrO=_$7412)Mr9BH{
zwKD;e13jP2XK&EpbhD-|`T~aI`N(*}*@yeDUr^;-J_`fl*NTSNbupyHLxMxjwmbuw
zt3@H|(hvcRldE+OHGL1Y;jtBN76Ioxm@UF1K}DPbgzf_a<Y=Q2jdO^gst1fHvD~4Y
z`>{`o<v8+8gs@^U5Cw_{S3@ObvFre^q+$AWj&Nnz@IvH$S&j2r4;1X@%I*4hELT$E
zaD(O11t4}`O?!jT*Kl?P1J<k2_Gc-(U(LIlVOiJkYd?edF>hXp_u4=ps@x-6-ZT>F
z)dU`Jpu~Xn&Qkq2kg%VsM?mKC)ArP5c%r8m4aLqimgTK$atIxt^b8lDVPEGDOJu!)
z%rvASo5|v`u_}vleP#wyu1$L5Ta%9YOyS5;w2I!UG&nG0t<o}kOP)%99Laiv(IbAk
zU$-92SK_lzLO)J`Yk-$<?9_JcJcXj)J=p`oksG^*)5V^sRcsj04MEXDxyav@sp{8<
za1ZHAdqqfDnhc;;xBPlZ{6YcM^AlN%?Z#eGk<cE<JLWO-kcD^P(Mb07!|!D)0gq6}
zulc(n);#Gpqn*mG)-=i8;kZ=b0R>2YL|DWxr#T7P#Ww8MXDg;-gr`x1?|V`wy&0vm
z=hqozzA!zqjOm~*DSI9jk8(9nc4^PL6VOS$?&^!o^Td8z0|eU$9x8s{8H!9zK|)NO
zqvK*dKfzG^Dy^vkZU|p9c+uVV<e?6G4GLMkSq!(QFws2FKN!81BZiraen($1&cG5t
zuK}@t#xt>3>esY)8SU1v4o{dZ+dPP$OT@XCB&@GJ<5U&$Pw#iQ9qzuc`I_%uT@%-v
zLf|?9w=mc;b0G%%{o==Z7AIn{nHk`>(!e(QG%(DN75xfc#H&S)DzSF<DtNhmWIAf}
zf_tZ47$xc=<zzA(to%hM4U_Nhw?|6Zv4|2*hN7}^8#*^uKIWJDEdP$-lUzdg-M~t9
zx(1Er`Wt`m7X|j0bkvy{i6YPDpnTFXkuJG>B6`J(cH!@mX3mv_!BJv?ByIN%r-i{Y
zBJU)}Vhu)6oGoQjT2tw&tt4n=9=S*nQV`D_MSw7V8u1-$TE>F-R6Vo0giKnEc4NYZ
zAk2$+Tba~}N0wG{$_7eaoCeb<NotLt60!NRCAlzA$?||-4B-mlh@o;a$HY`BzZiH5
z)Z%?8jo-TA#O>*Ubc0<yMx}$D{Q$Qud6!Y=xaFp7{E(!!Oe5N)K}QvD%}G?tD!|s*
zJWXXT#w3P_A{^fsFYB^+r8@e$0b6})dw9J<y_d9$*(+PmW-t6l*1SOK3=xlU7+WqV
zwYXB0k2qb+M1(`AHZ~T6Yo}-jM=XnU1tINV)w??nAXrwD)+*KQ9vZ13+{e&ciksgm
zWkZp0Y1C7A(PX7qxyaOLERk(RfC3!CkpLH3?ZK9CDPxw7N6Mt{vT0aj&U~WtSm+c>
zq~id50^$U>WZjm<q`}!T786Qi_+E}_4=k`H&5^sh1>cnIgsDione)f+T)0ID$xtgM
zpGZXmVez0DN!)ioW1E45{!`G9^Y1P1oXhP^rc@c?o+c$^Kj_bn(Uo1H2$|g7=92v-
z%Syv9Vo3VcibvH)b78USOTwIh{3%;3skO_htlfS?Cluwe`p&TMwo_WK6Z3Tz#nOoy
z_E17(!pJ>`C2KECOo38F1uP0hqB<U@aw1^&*=unvyt$E~a3Twf)tgW#gTScs-oItx
zV<mqF#P>r>%E=LCCCG{j6$b?;r?Fd$4@V-qjEzgWvzbQN%_nlBg?Ly`x-BzO2Nnd1
zuO|li(oo^Rubh?@$q8RVYn*aLnlWO_dhx8y(qzXN6~j>}-^Cuq4>=d|I>vhcjzhSO
zU`lu_UZ?JaNs1nH$I1Ww+NJI32^qUikAUfz&k!gM&E_L=e_9}!<JD%S8haU5QQKNv
zC!zRB`6DjW4S6{~t*#IU&v{&q%&R4iqcCp|t2W_}ZJvWV><(?BfH~aCmI&hfzHi1~
zraRkci>zMPLkad=A&NEnVtQQ#YO8Xh&K*;6pMm$ap_38m;XQej5zEqUr`HdP&cf0i
z5DX_<V=$v>c86@15jlm<r>*F}u-+a*^v%u_hpzwN2eT66Zj_1w)UdPz*jI|f<X{W6
zs=-Ks$~fr0xe>Jb#kSD_8Q-7q9gf}zNu2h=q{)O*XH8FU)l|m;I;rV^QpXRvMJ|7%
zWKTBX*cn`VY6k>mS#cq!uNw7H=GW3?wM$8@odjh$ynPiV7=Ownp}-|fhULZ)5{Z!Q
z20oT!6BZTK;-zh=i~RQ$Jw>BTA=T(J)WdnTObDM#61lUm>IFRy@QJ3RBZr)A9CN!T
z4k7%)I4yZ-0_n5d083t!=YcpSJ}M5E8`{uIs3L0lIaQws1l2}+<u<u@A+^}dd(wpG
zsG8FhotnIP^;H&oczN0FJAJ#-Dhl3MGbxpyP&^g$Q#0y0qj5bP!JR)|MTbS_tHmvF
z4Dhl{cxji!)^x<Ro9BLV)#Bn<oZv8o$u39YAoZHMu4T0%XkUM8e^81g_lWjE=QZ|3
zq1!g~j@=_L3{5>w2(}hW&evDlMnC!WV?9U^YXF}!N*iyBGyCyJ<(2(Ca<>!$rID`(
zR?V~-53&$6%DhW=)Hbd-oetTXJ-&XykowOx61}1f`V?LF=n8Nb-RLFGqheS7zNM_0
z1ozNap9J4GIM1CHj-%chrCdqPlP307wfrr^=XciOqn?YPL1|ozZ#LNj8QoCtAzY^q
z<aNn@TQ^N9J)3H3tA|{HV^(8UI#zG#%FkH|rPh{wv0K!=(@-h%t(K$N-OnGzJey;<
zzHg-q7g2E^rTsuGJMdZt{EF}#tt=dM&72s@8Cg!X1G8+NG02zcq5Qi#7MHmH9KzG9
zv&I;hp|W5E4D8uecF<X+n7q+K4ugcN#1_fsV^UAZMfYquKf!fd`KRG8^&y3q3V$f?
zo(<JAsU5pH#pkDz+WDI;f|5YWt2#6LH<HZ<*<Erz()TB*_b1TLnl5jp?Tom1*F9KE
z%V<kV**C)~ukWNL!mvON%raY@&w*ORq)9$zwZD-l$U>7&b^^K&?fNSWD@*`&I+`l9
zP2SlD0IO?MK60nbucIQWgz85l#+*<{*SKk1K~|x{ux+hn=SvE_XE`oFlr7$oHt-&7
zP{+x)*y}Hnt?WKs_Ymf(J^aoe2(wsMMRPu>Pg8H#x|zQ_=(G5&ieVhvjEXHg1zY?U
zW-hcH!DJPr+6Xnt)MslitmnHN(Kgs4)Y`PFcV0Qvemj;GG`kf<>?p})@kd9DA7dqs
zNtGRKVr0%x#Yo*lXN+vT;TC{MR}}4JvUHJHDLd-g88unUj1<S4DI9uM-?veQzZb|%
zAl!ZsT7K0!rHfkNr_GJ`@~rI6$0C35rTlbGXEu4?nm%^-ls1xTzNFZ21|P%59ky&Y
zq~(qDsF^5QX{fw!Ln(3;oja4)_YUQLJV<Iy9|p$4aZmit7Xs#<=_GGJy61qlwX~a9
zFyG$TiaUUld2B*RVn7ggvCo!Lx79zcH2M*;er^moky>(#7CM<%r!Z1Ve>DD)FneZ|
z8Q0yI@i4asJaJ^ge%JPl>zC3+UZ;UDUr7JvUYNMf=M2t{It56OW1nw#K8%sXdX$Yg
zpw3T=n}Om?j3-7lu)^XfBQkoaZ(qF0D=Aw&D%-bsox~`8Y|!whzpd5JZ{dmM^A5)M
zOwWEM>bj}~885z9bo{kWFA0H(hv(vL$G2;pF$@_M%DSH#g%V*R(>;7Z7eKX&AQv1~
z+lKq=488TbTwA!VtgSHwduwAkGycunrg}>6oiX~;Kv@cZlz=E}POn%BWt{EEd;*GV
zmc%PiT~k<(TA`J$#6HVg2HzF6Iw5w9{C63y`Y7?OB$W<O3y)Mrd+XeIl+-?B5_#+x
z%KOq3#~CJ{ywE4XUy=1lc#RI|A213c{@+E`q<<G#%h;Kj{YO|Gth{DBCxFPCQP{lK
zYMYKs2c)GXB?&yQL!zfeD56SI*eD8Gq@+JRL{m+z-?u6^SaOYpTJ|0P`5PZJ<C#cT
z9Fg@3H@DN_^LX9I*;8!JH~gLO7~p;(8s1QZ)(-m2I0VssTq!<G$P;J7DHJ8~@I237
zq3clY`<&b#AUnmdo_2Q=ky)2yAZtbpiyOaU-|w-6>sC$~6WMm3`UHaWRZLN3nKiV#
zE;iiu_)wTr7ZiELH$M^!i5eC9aRU#-RYZhCl1z_aNs@f`tD4A^$xd7I_ijCgI!$+|
zsulIT$KB&PZ}T-G;Ibh@UPafvOc-=p7{H<d#e3q0+%RuK-3K2(JT0@94+LYS^)H4c
zZFqCGM37o&#`_f#uHK;f4UhQIYmnw+`3Ale=BN`?snIX<B`=4t()0;>-<LgPQxoF?
zLX8D*o?O<AQaf_3cYu;ly5Ll(!osLzcv!~=P$VY_Q-T;e9LRKUX4OH|#0=HZa3hTs
zes&XuggA!hBf}m$GbUQJL;%kNmd4W`@E#fId_?zPOrTo@-J<QkzfbTKxF5=U;%TY6
zlz+g%__dgOM6v?MMUiTawMHK}+&KwVr27O7nWc)i&hd$zB@RxSWDF?xvSgK5vxU1l
zHiwd1%MV)*fySndRnI~;m~ligLKJLC6B2y=qsYl3R}Ogp1AMXp`8#!@|2uV({R<4G
z{!h%&Ur>~P)s{3M+;PmXe7}}&Mn+9WT#(Jmt5DW%73OBA$t<uD+FW^WplyXVBE6gG
ze_pQ7jmYIz)>C#U<XS@~W;KGX%r{b21T&3pdIfdm3HbNDZH>g!j1BR~=Xbnaz4hGq
zUOjC*z3mKNbrJm1Q!Ft^5{Nd54Q-O7<;n})TTQeLDY3C}RBGwhy*&wgnl8dB4lwkG
zBX6Xn#hn|!v7fp@@tj9mUPrdD!9B;tJh8-$aE^t26n_<4^=u~s_MfbD?lHnSd<OEr
z@GvCq^5O0J+3mmcGv;^guT|4A8IJT5Sc|&C%RqgDt}}IEro1&c6g8ca5pTSomxOH_
zp-rgz`=P6>^FGGL6the7a|AbltRGhfET*X;P7=AL?WPjBtt;3IXgUHLFMRBz(aWW_
zZ?%%SEPFu&+O?{JgTNB6^5nR@)rL6DFqK$KS$b<ko|6{-ybF=NrJ9}l!*ZZ#=USzU
zJ|(+CIwZL=k_Mhbw<?}16qWU`NmQ;zu>vE#&hrPs>sYsW=?XzOyD6ixglJ8rdt{P8
zPAa*+qKt(%ju&jDkbB6x7aE(={xIb*&l=GF(yEnWP<Klfsh)03zB(-sjeCr`x4$DS
z>j)><_8U5m#gQIIa@l49W_=Qn^RCsYqlEy6Om%<R1#uW4!tL11h|`1^LAF02ja(Y)
zB#*t4CG`r9D6!EJ8{LYP@eS{&5Hwp>!&e~6mCAfD<GrCq<8+)5xh*#}`b7HL4{S6W
z#|}g7<T=A-#|teqJmgImizMOptXzFQXU2YzRY@XrXCs8-K!n$sKyu1swB;ret*pi8
zR@;i>geXe3aYpHQAA!N|kmIW~Rk}+p<HPCBQ5qa?LoTl)R3Q#ozhWdO<c{?`j77C<
zs5i}Hl_gDjS@w@FX35H~F{{<DQ5{R;1ks3F{jIZPxT5PYHI=hkdQ2tSopnS}Nu1Ky
zxYDl>6B2U5@|1@7iVbm5&e7E3;c9q@XQlb^JS(gmJl%j9!N|eNQ$*OZf`3!;raRLJ
z;X-h>nvB=S?mG!-VH{65kwX-UwNRMQB9<m;@#GpPZRe8?u9;j#4?1fDS>S3ZRf`hL
z#WR)+rn4C(AG(T*FU}`&UJOU4#wT&oDyZfHP^s9#>V@ens??pxuu-6RCk=Er`DF)X
z>yH=P9RtrtY;2|Zg3Tnx3Vb!(lRLedVRmK##_#;Kjnlwq)eTbsY8|D{@Pjn_=kGYO
zJq0T<_b;aB37{U`5g6OSG=>|pkj&PohM%*O#>kCPGK2{0*=m(-gKBEOh`fFa6*~Z!
zVxw@7BS%e?cV^8{a`Ys4;w=tH4&0izFxgqjE#}UfsE^?w)cYEQjlU|uuv6{>nFTp|
zNLjRRT1{g{?U2b6C^w{!s+LQ(n}FfQPDfYPsNV?KH_1HgscqG7z&n3Bh|xNYW4i5i
zT4Uv-&mXciu3ej=+4X9h2uBW9o(SF*N~%4%=g|48R-~N32QNq!*{M4~Y!cS4+N=Zr
z?32_`YpAeg5&r_hdhJkI4|i(-&BxCKru`zm9`v+CN8p3r9P_RHfr{U$H~RddyZKw{
zR?g5i>ad^Ge&h?LHlP7l%4uvOv_n&WGc$vhn}2d!xIWrPV|%x#2Q-cCbQqQ|-yoTe
z_C(P))5e*WtmpB`Fa~#b*yl#vL4D_h<fz{p{Hd&U%VxxpXWDwhxv<px?ngxI2w@S+
zomjQ6&>;CidEbI9tsE%+{-4ZLKh#9^{mvY24#u}S6oiUr8b0xLYaga!(Fe7Dxi}v6
z%5xNDa~i%tN`Cy_6jbk@aMaY(xO2#vWZh9U?mrNrLs5-*n>04(-Dlp%6AXsy;f|a+
z^g~X2LhLA>xy(8aNL9U2wr=ec%;J2hEyOkL*D%t4cNg7WZF@m?kF5YGvCy`L5jus#
zGP8@iGTY|ov#t&F$<aO_`4zACJh+ONRNqngjc&LX4fNmgZ7xWzr@)#`k<O&kW001d
z!1wN+i%2eO_PtXBKYj(-$a*outi0m9%k|n}to~WbH;?A~gzk7Ozx@)cag#Z@cg;cl
zYjq{j9>%gkWDoMR7v*UezIWMeg$C2~WE9*5%}$3!eFiFJ?hypfIA(PQT@=B|^Ipcu
z{9cM3?rPF|gM~{G)j*af1hm+l92W7HR<Ukf%^!B+FzyOr_D718fxbF}euriBp)ex@
zQli%k-Lx2CpL4|pS)&G{!YVWgzg=MN2)|3D;bo0k^KYZ@`TOit{}wRv@p7~Jlf+gF
z+{;GkJbHa$W3(8=nBOAqtBGJ0dZ5aemv1Gpl5y{^5tx`27j}(yO%V3*lzW8A?rCw=
z7F;r5unMA-OfP_Q96e&cO<gXH_(5TGdJvR+pqR~tuO-^XgXSep(B@SkZw)AA`Kbq+
zerds!nmS)Fl$sX{4#(`SgRdOejK2^q8LCd758ks()l6-;_8xAR$EkWAM?SeQlbST`
z6EJ)~YDz813uD11U)kt0<gBOj+Y^zeCp6hkqYbTZv;l)qR}V4dr6+#B`QjG0NfZB?
zhP+%=k@!nQu}|mp5LLcLZ|?fA^Y(quF>pQ*hSMDbh(auwr}VBG7`ldp>`FZ^amvau
zTa~Y7%tH@>|BB6kSRGiWZFK?MIzxEHKGz#P!>rB-90Q_UsZ=uW6aTzxY{MPP@1rw-
z&RP^Ld%HTo($y?6*aNMz8h&E?_PiO{jq%u4kr#*uN&Q+Yg1Rn831U4A6u#XOzaSL4
zrcM+0v@%On8N*Mj!)&IzXW6A80bUK&3w|<y{`IM*S_3bA@F!}Fqi973&MQsS2Pqn9
z9;ZgXQ>z0<Tq#Aipd)-qh}q3N7LO13RA&D~KeM|n^wgN=n!x)H#E-HfKNpc2AQRXs
zXs;J%N;)%Kbwh$b*>6cP!UD^?_rb_(L-u$m+#%YilEjkrlxthGCLQ@Q?J!p?ggv~0
z!qipxy&`w48T0(Elsz<^hp_^#1O1cNJ1UG=61Nc=)rlRo_P6v&&h??Qvv$ifC3oJh
zo)ZZhU5enAqU%YB>+FU!1vW)i$m-Z%w!c&<h6xWZEtd{*OPDU|5jw8<I&<jkewliI
zBPay#;mI#y_DW1Q-n9&Sz@3x;1#z3$&ekl1^zdX%Y)Bk*%Cag=8`4&YmVk$`)Da=6
zT5Y|=YUh#7V~sj0*zB?9!T-7Hs8Z?RpG>92M1?))n4z1a#4-FufZ$DatpJ^q)_Zif
z;Br{HmZ|8LYRTi`#?TUfd;#>c4@2qM5_(H+Clt@kkQT+kx78KACyvY)?^zhyuN_Z&
z-*9_o_f3IC2lX^(aLeqv#>qnelb6_jk+lgQh;TN>+6AU9*6O2h_*=74m;xSPD1^C9
zE0#!+B;utJ@8P6_DKTQ9kNOf`C*Jj0QAzsngKMQVDUsp=k~hd@wt}f{@$O*xI!a?p
z6Gti>uE}IKAaQwKHRb0DjmhaF#+{9*=*^0)M-~6lPS-kCI#RFGJ-GyaQ+rhbmhQef
zwco))WNA1LFr|J3Qsp4ra=_j?<EUO<0lpDUk;5qVyhHpO+$EpCmHSpN(Wwyb2E)d0
z6RhNXQ5_m8UEI?_TXb0Y&r-w#5gRm8Rm0k0*;U!JLd|=H{7!a-(d0!WPsH*JASge9
zEHu@Ayf*3EL)&wggg`J!$?K)OQ<C27K6n`;1UWNI<vx6e1Zr{-iA&U`uYZ&}k%RBY
z5B@*|S26z1gXa4?4_X1>Y%b{JWMX6Zr`$;*V`l`g7P0sP?Y1y<akjAgmqQ(`q$`i2
zh{)SO+o7PY(fk0yF9>OY;e0Sb!AOW0Em=U8&i8EKxTd$dX6=^Iq5ZC%zMT5Jjj%0_
zbf|}I=pWjBKAx7wY<4-4o&E6vVStc<kK0!v^JK_~oYfr_x+_wAgFq`rT(&ore@w97
zhTDu%){?F%P9jc4-)I>NlT?I18f5TYP9!s|5yQ_C!MNnRyDt7~u~^VS@kKd}Zwc~?
z=_;2}`Zl^xl3f?ce8$}g^V)`b8Pz88=9FwYuK_x%R?sbAF-dw`*@wokEC3mp0Id>P
z>OpMGxtx!um8@gW2#5|)RHpRez+)}_p;`+|*m&3&qy{b@X>uphcgAVgWy`?Nc|NlH
z75_k2%3h7Fy~EkO{vBMuzV7lj4B}*1Cj(Ew7oltspA6`d69P`q#Y+rHr5-m5&be&(
zS1GcP5u#aM9V{fUQTfHSYU`kW&Wsxeg;S*{H_Cd<rvd3|*7vAvd4;z@7YMftc;-2i
z?g6G4MNx#O)_U6}%hp)dU#4PXb!m$1S_s$n<!DYMF)%ZBLHzV79nBn#FdvcrCqjJ%
zI3rCJ`@7)vfy0k)pz@q*G(LD!0!M$v?YMSRk{y2nE$6=tv}pdX)#RU1R+id}AIcMw
zkCk*X4LUG%>Z$?N<Y+u?Fj*rgNH~41(wM7{zXMKvGP;N0rmCwtc#A~_K8eljo1C=g
zR>>S$JPv!_6T(NqYPaS{yp0H7F~7vy#>UHJr^lV?<J;9&=L_49glF|{ve0rGu5@K+
zjpG5?I`hfS%pP-#&|n*KF;<sCIeW*EcODz?ze)_ATx=wz4_TR0a5H+U&2+$QPP)_b
zW-8_qgi+K(hi8S=$xFzT3NX-u#7~D3s%=u+^uV|wXyzPP=dxyQMR~*2zz}R4at)TA
z2bPtEL6lY11xulU7tEY@{4-shy_U7+Ep)?;G)7>=^vt4?8$v8vkI-1eJ4{iZ!7D5A
zg_!ZxZV+9Wx5EIZ1%rbg8`-m|=>knmTE1cpaBVew_iZpC1>d>qd3`b6<(-)mtJBmd
zjuq-qIxyKvIs!w4$qpl{0cp^-oq<=<Nz^Cpruz}iWZa$|&EW^BDN{oRU4*zoBtP7!
zk3Dizso=L6U<fYC_f1c29X*Le{h(vYIYRcJT~(NI77Fpj^D}5WE*Jc*ePbgi+9e{Z
z=(VI@r)kyM@nVxvX1v_ihb47H**(L4HPZ;yQbQKwaJU;3U)>-IDEYV7{pvfBM7tU+
zfX3fc+VGtqjPIIx`^I0i>*L-NfY=gFS+|sC75Cg;2<)!Y`&p&-AxfOHVADHSv1?7t
zlOKyXxi|7HdwG5s4T0))dWudvz8SZpxd<{z&rT<34l}XaaP86x)Q=2u5}1@Sgc41D
z2gF)|aD7}UVy)bnm788oYp}Es!?|j73=tU<<Bzq%Z@Jee=IEO#jG%NN+Sg}<?(5;n
zR&=oFHv-W7&;%>_+A4<GVLAj|3q{pgf5f#&6!yut|1@EvQWd-fDw4fDOmiqw4Or3I
z0yjQ6nb!X4k614Oky|s?y*iVx4{a*guHGtTCJ$#dDTKI$_8iMSvKIqMTVse6wB$HZ
zkHP9ofp4d9-ewaX6&B&zjl8EB^KidihKP#_lDh_y-Bw^0(Y!-PKG(iy&iSY;=ca=u
z-Kv=;PkGgl0H7nkqHiD4^CZnOK_loDmrP|judlcp+m3Xdcz}tEEqmtR>s5&it~_K4
z;^$i0Vnz8y&I!abOkzN|Vz;kUTya#Wi07>}Xf^<lUW7sJyK@(8yd@$KRj${^_mR8*
zjK5ba-;sFb>7joZMiHH3Mdy@e_7t?l8^A!r#jTBau^wn#{|!tTg=w01EQUKJOca!I
zV*>St2399#)bMF++1qS8T2iO3^oA`i^Px*i)T_=j=H^Kp4$Zao(<q)zKd;FmCQyPf
z@=XjI^cZdzUZ1>>Y)kpZ=l#dSgcUqY=7QbGz9mP9lHnII8vl?yY9rU+i%X)-j0&--
zrtaJsbkQ$;DXyIqDqqq)LIJQ!`MIsI;goVbW}73clAjN;1Rtp7%{67uAfFNe_hyk=
zn=8Q1x*zHR?txU)x9$nQu~nq7{Gbh7?tbgJ>i8%QX3Y8%T{^58W^{}(!9oPOM+zF3
zW`%<~q@W}9hoes56uZnNdLkgtcRqPQ%W8>o7mS(j5Sq_nN=b0A`Hr%13P{uvH?25L
zMfC&Z0!{JBGiKoVwcIhbbx{I35o}twdI_ckbs%1%AQ(Tdb~Xw+sXAYcOoH_9WS(yM
z2dIzNLy4D%le8Fxa31fd;5SuW?ERAsagZVEo^i};yjBhbxy9&*XChFtOPV8G77{8!
zlYemh2vp7aBDMGT;YO#=YltE~(Qv~e7c=6$VKOxHwvrehtq>n|w}vY*YvXB%a58}n
zqEBR4zueP@A~uQ2x~W-{o3|-xS@o>Ad@W99)ya--dRx;TZLL?5E(xstg(6SwDIpL5
zMZ)+)+&(hYL(--dxIKB*#v4<fxk!yCv|@d2Kv&v5q{37y^?qK+5_}pV8uj_ajQp?-
zSvtF-+*s!bhoC0ZP-IzCs5r{10MP%1o^F=0m(b9iJ)*j<v7*$j97i0J8=>mDq=0ve
zNU<q(%{s#bJ0`q9l9Ob)&b>~~jk426b<X0^!MeJk+~;KF?z<>XlS8%lcqsvuqbpgn
zbFgxap;17;@xVh+Y~9@+-lX@LQv^Mw=yCM&2!%VCfZsiwN>DI=O?vHupbv9!4d*>K
zcj@a5vqjcjpwkm@<sKio7{@okPSn_SbL}SW{;=N5eLbwcI{_j649H5UO_@Nna`xAw
zi$6=m;8$AFj_kqUuX>!2dxzzJGQ7#ujW(IndUuYC)i3N2<*doRGX8a$bSbyRO#0rA
zUpFyEGx4S9$TKuP9BybRtjcAn$bGH-9>e(V{pKYPM3waYrihBCQf+UmIC#E=9v?or
z_7*yzZfT|)8R6>s(lv6uzosT%WoR`bQIv(?llcH2Bd@26?zU%r1K25qscRrE1<E`b
zYRcw#u^W4w?|p%|1j_I3@eA+knxw=&C%{kW<sS+4P;crS{y&JlP58g_-`M`nF#pd>
z9TI<P^#281Q`OW)QOER+1qJVG%_|iYozF*vR77e5wOBALf{P5vSLlG<Nrfe2-ZLhe
zp17>IP_?`78@uJ{%I|_K;*syVinV;pCW!+zY-!^#n{3It^6EKw{~WIA0pf_hVzEZy
zFzE=d-NC#mge{4Fn}we02-%Zh$JHKpXX3qF<#8__*I}+)Npxm?26dgldWyCmtwr9c
zOXI|P0zCzn8M_Auv*h9;2lG}x*E|u2!*-s}moqS%Z`?O$<0amJG9n`dOV4**mypG-
zE}In1pOQ|;@@Jm;I#m}jkQegIXag4K%J;C7<@R2X8IdsCNqrbsaUZZRT|#6=N!~H}
zlc2hPngy9r+Gm_%tr9V&HetvI#QwUBKV&6NC~PK>HNQ3@fHz;J&rR7XB>sWkXKp%A
ziLlogA`I*$Z7KzLaX^H_j)6R<XJ@kJ)Qr`WAifZ%j-fh_ok^Gwl%@JOa&FuMC6r$o
zs{G|2uaK73X-&=L>|9Q>IHc?<W_gTkPC4j9Y~^991y4Irw3pUgMA&$#fkl_nU}~w>
z{s0MsOW>%xW|JW=RUxY@@0!toq`QXa=`j;)o2iDBiDZ7c4Bc>BiDTw+zk}<qyZ~T~
zQD`&I<63HHT}TUKau6K8JH{w|ItNb3b+cB@vql6N&5H!?rGigVB#W=+t)WWSTigS4
zl`$<~uzPa82j%`~4Wh=Ts{u)pucbzDB;>Jm&vvH8qX$R`M6Owo>m%n`eizBf!&9X6
z)f{GpMak@NWF+HNg*t#H5yift5@QhoYgT7)jxvl&O=U54Z>FxT5prvlDER}AwrK4Q
z*&JP9^k332OxC$(E6^H`#zw|K#cpwy0i*+!z{T23;dqUKbjP!-r*@_!sp+Uec@^f0
zIJMjqhp?A#YoX5EB%iWu;mxJ1&W6Nb4QQ@GElqNjFNRc*=@aGc$PHdoUptckkoOZC
zk@c9i+WVnDI=GZ1?lKjobDl%nY2vW~d)eS6L<E_5TsrpY3$@H(bSiZZ^i}%eYQsKY
zKayFP3dSQtz$Pc7Hwo6vjr{S7vT0<B@R9;Wa_cDSBrq1@ws^EZ<W?v))raUN>ch&J
zDi~}*fzj9#<%xg<5z-4(c}V4*pj~<Zc~a8XME$bHbF;VecMV`!mhERQqQ@&DNtT1N
z3jV4*CXth`PK!@H*$92;4Gp$B=mPxrQRFq^WxEu|*z+yXe%@AXmOR02FqcieX!Bo*
zW^Zka2jNxb`{fv*t#(J7Kk$|%%XB?fHb%qTg=~4J_-pbkEWx}AdU4YU3Yx7v;2<P9
zc<MtIDL1FtR`Eu6o{{f;3H;>1z2z60gZc}sAmys^yvobWz)DKDGWuVpp^4-(!2Nn7
z3pO})bO)({KboXlQA>3PIlg@Ie$a=G;MzVeft@<Ke;}=bxR7*h)PObOn&#xTQRli)
zmvKT@_m%g`7ER3aeL7WHr7_~}{equ;`!-oXa2F&=$PjK?EsnLsIOLW2vsrnUL_SL=
z&>OMcKEjIr=?;=G0AH?dE_DcNo%n$_bFjqQ8GjeIyJP^NkX~7e&@+PqnU-c3@ABap
z=}IZvC0N{@fMDOpatOp*LZ7J6Hz@XnJzD!Yh|S8p2O($2>A4hbpW{8?#WM`uJG>?}
zwkDF3dimqejl$3uYoE7&pr5^f4QP-5TvJ;5^M?ZeJM8ywZ#Dm`kR)tpYieQU;t2S!
z05~aeOBqKMb+`vZ2zfR*2(&z`Y1VROAcR(^Q7ZyYlFCLHSrTOQm;pnhf3Y@WW#gC1
z7b$_W*ia0@2grK??$pMHK>a$;J)xIx&fALD<l)xWrw5Dy*aYSf=56xEqI(KK*6}JO
z|D5c_`r$^kt(8|djppH$ScjR@Qtdb<5p0?Idz2NPZFAG>4)w=xlT=EzrwD!)1g$2q
zy8GQ+r8N@?^_tuCKVi*<IIQygq(j@u<*l52tWi7w(9x=0hIf8}iW5CL*{eVvB4dzp
z=GA1`rGehHr+{fIIreG+3w@P&w<I@K==K)uf59yCR$cF6>q_G*!#NxxY#hpaV~hF}
zF1xXy#XS|q#)`SMAA|46+UnJZ__lETDwy}uecTSfz69@YO)u&QORO~F^>^^j-6q?V
z-WK*o?XSw~u<mx%`B3S#@s@e8*;trh4)HpDuo~BMBejRf8L&?gb3j{btc;nI1<TpR
z@3Kx=i@|@!JT#7eBJa(mO6_Z$c7%>kjoIT9p6$6*OStr`=+;HrF#)p>*>e|gy0D9G
z#TN(VSC11^F}H#?^|^ona|%;xC<mN2ZJy-W_Uwn^>C!~H3~+a>vjyRC5MPGxFqkj6
zttv9I_fv+5$vWl2r8+pX<A#^M8H&t(q<;>P&^yudvLxP44;9XzUr&a$&`?VNhU^$J
z`3m68BAuA?ia*IF%Hs)@>xre4W0YoB^(X8RwlZ?pKR)rvGX?u&K`kb8XBs^pe}2v*
z_NS*z7;4%Be$ts_emapc#zKjVMEqn8;aCX=dISG3zvJP>l4zHdpUwARLixQSFzLZ0
z$$Q+9fAnVjA?7PqANPiH*XH~VhrVfW11#NkAKjfjQN-UNz?ZT}SG#*sk*)VUXZ1$P
zdxiM@I2RI7Tr043ZgWd3G^k56$Non@LKE|zLwBgXW#e~{7C{iB3&UjhKZPEj#)cH9
z%HUDub<p{T#1uLOSB!|bTLfCwHK3-vax8E4LNk2TrUlJ+F9&+JBm|TDz9STVm*4*`
z4Txhcr;PfR1}zY=ocJU06Vjh2F+k<|9vd>c0u@}dBz>4zU;sTluxBtCl!O4>g9ywc
z<cKNG8?#V`H3{jv#T94>hEiM-!|!C&LMjMNs6dr6Q!h{nvTrNN0hJ+w*h+EfxW=ro
zxAB%*!~&)uaqXyuh~O`J(6e!YsD0o0l_ung1rCAZt~%4R{#izD2jT~${>f}m{O!i4
z`#UG<UmIW4-NeY{Kd-?isY7|8ETQp&IFdvHP}mHTRRB=+ou!2&CMBES*oV|;j0_=*
zj4Z4XezKmL2QfBEt`^$FCtqsMlG&JRwJ$Xq%(O!3N@iSo`N{TVKbew54}9CXd$QQ{
za$0hl>biSh{L=FR`Q`e~9wrKHSj?I>eXHduB`;%TcCTYNG<)l@A%*Ld?PK=fJi}J?
z9T-|Ib8*r<yfQgM1~xipajrQadGmArx4qxf%+JrfUS;u62szTw(0HGIVk2lG5Y?AN
z8?3ewUg+e<)V6@CgL6e%?RjBym0BJn)Mw95a~#vl(j?W|>LE)v_3|1+Hqa!0ch>f%
zfNFz@o6r5S`QQJCwRa4zgx$7AyQ7ZTv2EM7ZQHh!72CFL+qT`Y)k!)|Zr;7mcfV8T
z)PB$1r*5rUzgE@y^E_kDG3Ol5n6q}eU2hJcXY7PI1}N=>nwC6k%nqxBIAx4Eix*`W
zch0}3aPFe5*lg1P(=7J^0ZXvpOi9v2l*b?j>dI%iamGp$SmFaxp<R9!A`K2g)}?00
z5iUcCgAEZwW5$j4<ZiO-lhSAjkchyp<)$%-R2u1GQRNjRQW5%L27fS6e5EZ__!(3%
zBYO6iIXx&FLZX4VO+?@fkmi1;!|F!_yjmt5Ru61BtLQ`S^K8}_U>Zod*TgYiyhF0=
za44lXRu%9MA~QWN;YX@8LM32BqKs&W4&a3ve9C~ndQq>S{zjRNj9&&8k-?>si8)^m
zW%~)EU)*$2YJzTXjRV=-dPAu;;n2EDY<Yt3;43!NQJ2tmZaOv-5c%W=-ywct0Y5O5
zX)Sf`ZMxv0v&aVMf?U_mn4?IYgV2bw+0a-;nM&O}lH#PebP2A*y@uH1lkVYED?brn
z1=dSkz(8-KbYa{i1v@JN33EtLLhG2N^t)1=y)YC`G@xG(WUI{GuNK1|#&2Y;kA|yQ
z^@}oa78<gsM5w?=wwxnSi78bJdC1=;M<!$&|CmVEAUQSPvbK%*25TN&=Jqqwz2Yu8
zdxfg2#iS5@kl`plcHwexZuf(mU>b=6XFyz`D0f2#29(mUX}*5~KU3k>$LwN#OvBx@
zl6lC>UnN#0?mK9*+*DMiboas!mmGnoG%gSYeThXI<=rE(!Pf-}oW}?yDY0804dH3o
zo;RMFJzxP|srP-6ZmZ_peiVycfvH<`WJa9R`Z#suW3Kr<HUL~bw#TFa3n4kJ1y0uO
zDeOdM^41)A>I*>cECF(_CB({ToWXSS18#3%vihZZJ{BwJPa?m^(6xyd1(oidUkrOU
zlqyRQUbb@W_C)5Q)%5bT3K0l)w(2cJ-%?R>wK35XNl&}JR&Pn*laf1M#|s4yVXQS#
zJvkT$HR;^3k{6C{E+{`)J+~=mPA%lv1T|r#kN8kZP}os;n39exCXz^cc{AN(Ksc%}
zA561&OeQU8gIQ5U&Y;Ca<DPNfVa;8}E-Ta9>1TatzG`K6*`9LV<|GL-^=qg+nOx~6
zBEMIM7Q^rkuhMtw(CZtpU(%JlBeV?KC+kjVDL34GG1sac&6(XN>nd+@Loqjo%i6I~
zjNKFm^n}K=`z8EugP20fd_%~$Nfu(J(sLL1gvXhxZt|uvibd6rLXvM%!s2{g0oNA8
z#Q~RfoW8T?HE{ge3W>L9bx1s2_L83Odx)u1XUo<`?a~V-_ZlCeB=N-RWHfs1(Yj!_
zP@oxCRysp9H<ry}>8Yy@6qIc69TQx(1P`{iCh)8_kH)_vw1=*5JXLD(njxE?2vkOJ
z>qQz!*r`>X!I69i#1ogdVVB=TB40sVHX;gak=fu27xf*}n^d>@*f~qbtVMEW!_|+2
zXS`<ESl@lgPcWDY98k09FUn5#Un(7e$=QJUXN00MubF6elsVML6R}{Yd(F!;60?8^
zWqxi)J?Y92YRvk1wn90yfa6~cWWOU`rFi_AXw}_at2yvVGTi}$wu;$dBdmZw9}o-h
zxG()uESmAWg|!fB!z{ca;8~&OL)Yx}HoP4@LTskVb*=<7HzRT!7j9j?A?pl&8pGYV
zHWdW9isKp(cfvbfl&-R%CB&YE&g}Q0*13G|7$)!psxiD>-E%v`_>(m2sQnc6+OA3R
z-6K{6$KZsM+lF&<ad6xo${yEclY+B!t~Vj#77=#-9zXr6C;V}Eqs9Pl+XXrBHo8Kr
znZ6YD#z^y(8G5AV#u=jEj*TWIj(Cqg<}rzmCkEo!s>sn~w4u_md6J#+FzqmtncY;_
z-Q^D=%LVM{<P2w8OW33)5V6<Ei?K*2GVV}=+xV0_Z}Och9MH*u1?@yzOxl%cAFNzG
zl)V#D9L{|KD(Tz^)F}TMZvP!yr0PxWpjk))H%~wbu?Q-$Mz|J)1ywwy|AxU?RUcy`
z{4a9akhgcV9Wb(Yd-eWEFJLQtju{yEdfDzU6!8Q~w9FAx_us<v#yGlZmK7>A0@VCf
zV9;?kF?vV}*=N@FgqC>n-QhKJD+IT7J!6llTEH2nmUxKiBa*DO4&PD5=HwuD$aa(1
z+uGf}UT40OZAH@$jjWoI7FjOQAGX6roHvf_wiFKBfe4w|YV{V;le}#aT3_Bh^$`Pp
zJZGM_()iFy#@8I^t{ryOKQLt%kF7xq&ZeD$$ghlTh@bLMv~||?Z$#B2_A4M&8)PT{
zyq$BzJpRrj+=?F}zH+8XcPvhRP+a(nnX2^#LbZqgWQ7uydmIM&FlXNx4o6m;Q5}rB
z^ryM&o|~a-Zb20>UCfSFwdK4zfk$*~<|90v0=^!I?JnHBE{N}74iN;w6XS=#79G+P
zB|iewe$kk;9^4LinO>)~KIT%%4Io6iFFXV9gJcIvu-(!um{WfKAwZDmTrv=wb#|71
zWqRjN8{3cRq4Ha2r5{tw^S>0DhaC3m!i}tk9q08o>6PtUx1GsUd{Z17<J{i^DG}Z)
zlC0vdur~2VdU-K7>FH45rIoS+oym1>3S0B`>;uo``+ADrd_Um+8s$8V6tKsA8KhAm
z{pTv@zj~@+{~g&ewEBD3um9@q!23V_8Nb0_R#1jcg0|MyU)?7ua~tEY63XSvqwD`D
zJ+qY0Wia^BxCtXpB)X6htj~*7)%un+HYgSsSJPAFED7*WdtlFhuJj5d3!h8gt6$(s
ztrx=0hFH8z(Fi9}=kvPI?07j&KTkssT=Vk!d{-M50r!TsMD8fPqhN&%(m5LGpO>}L
zse;sGl_>63FJ)(8&8(7Wo2&|~G!Lr^cc!uuUBxGZE)ac7Jtww7euxPo)MvxLXQXlk
zeE>E*nMqAPwW0&r3*!o`S7wK&078Q#1bh!hNbAw0MFnK-2gU25&8R@@j5}^5-kHeR
z!%krca(JG%&qL2mjFv3<p4i&LWsDupV*;=lI>80Gvb*eTLllTaIpVr3$gLH2e3^xo
z=qXjG0VmES%OXAIsOQG|>{aj3fv+ZWdoo+a9tu8)4AyntBP>+}5VEmv@WtpTo<-aH
zF4C(M#dL)MyZmU3sl*=TpAqU#r>c8f?-zWMq`wjEcp^jG2H`8m$p-%TW?n#E5#Th+
z7Zy#D>PPOA4|G@-I$!<aW((R7ZjVOb^>#Yees_9Ku{i_Y%GQyM)_*u^nl+bXMH!f_
z8>BM|OTex;vYWu`AhgfXFn)0~--Z<Y7zSjyb-U>7E0WR-v|n$XB-NOvjM156WR(eu
z(qKJvJ%0n+%+%YQP=2Iz-hkgI_R>7+=)#FWjM#M~Y1xM8m_t8%=FxV~Np$BJ{^rg9
z5(BOvYfIY{$h1+IJyz-h`@jhU1g^Mo4K`vQvR<3wrynWD>p{*S!kre-(MT&`7-WK!
zS}2ceK+{KF1yY*x7FH&E-1^8b$zrD~Ny9|9(!1Y)a#)*zf^Uo@gy~#%+*u`U!R`^v
zCJ#N!^*u_gFq7;-XIYKXvac$_=booOzPgrMBkonnn%@#{srUC<((e*&7@YR?`CP;o
zD2*OE0c%EsrI72QiN`3FpJ#^Bgf2~qOa#PHVmbzonW=dcrs92>6#{pEnw19AWk%;H
zJ4uqiD-dx*w2pHf8&Jy{NXvG<G2fGidx4PcnQN8MUPd!ajb`-x1=|}Vd6)Mu9~Gr9
z=>F^Gg!ungr2StHpMQ<HDiupjOyQqCAy%tIRvYmC;RHb%7B;acCsA@g{nr=m>K5^+
zEmDjjBonrrT?d9X;BHSJeU@lX19|?On)(Lz2y-_;_!|}QQMsq4Ww9SmzGkzVPQTr*
z)YN>_8i^rTM>Bz@%!!v)UsF&Nb{Abz>`1msFHcf{)Ufc_a-mYUPo@ei#*%I_jWm#7
zX01=Jo<@6tl`c;P_uri^gJxDVHOpCano2Xc5jJE8(;r@y6THDE>x*#-hSKuMQ_@nc
z68-JLZyag_BTRE(B)Pw{B;L0+Zx!5jf%z-Z<YclUMBp`|xB#6)P?afpE7|oxiGTU7
z%y?w}o-6E+hmfhV=rZIPn4oR~vu0gm`B1LGNrpzZ5rTi+iLW3pn3H(3l>qug*og@^
zs{y3{Za(0ywO6zYvES>SW*cd4gwCN^o9KQYF)Lm^hzr$w&spGNah6g>EQBufQCN!y
zI5WH$K#67$+ic{yKAsX@el=SbBcjRId*cs~xk~3BBpQs<W0Q3`moZ~`0b7lKm0C%I
zUYYh7HI*;3UdgNIK;LpP(#{(_<BHsfFF;nfs~1P?Gp4SYh{kkp!B`>f%IsoPG)LGs
zdK0_rwz7?L0XGC^2$dktLQ9qjwMsc1rpGx2Yt?zmYvUGnURx(1k!kmfPUC@2Pv;r9
z`-Heo+_sn+!QUJTAt;uS_z5SL-GWQc#pe0uA+^MCWH=d~s*h$XtlN)uCI4$KDm4L$
zIBA|m0o6@?%4HtAHRcDwmzd^(5|KwZ89#UKor)8zNI^EsrI<q&1*MkAAa2rAmDnpd
zM2X7DdB(hR7ImdXc}V=nO{o7COdb?F1m#nJfcgUKV%Ly#@RiBcB*;zbcWku*Rf29K
zHdWVo#O`553R{z~=1%N~tCK8qpoo3-lw7}ZiCLOk4v`E;S|bMOaYWRegFScH_B4>k
z1QLDBnNU1!PpE3iQg9^HI){x7QXQV{&D>2U%b_II>*2*HF2%>KZ>bxM)Jx4<SdmPW
zl{^c0P>}|CCEa`186nD_B9h`mv6l45vRp*L+z_nx5i#9KvHi>rqxJIjKOeG(5lCeo
zLC|-b(JL3YP1Ds=t;U!Y&Gln*Uwc0TnDSZCnh3m$N=xWMcs~&Rb<Jjj;hQe6jNpQJ
z@svSId4GTd`3AIlx30VX&Nd=&tFTxkGVfkn0(`nURlV#P-&55<E_QWk4RhX&F@PN<
z+`BhLo{Y~`BY-dd*(adMg9Ap(CzwWnR;pBnZ!I7Se)bG?xf%gChkBDM?YUaVaF&mp
z4<&?q3$9yAX}xs>?w}l51ubtz=QUZsWQhWOX;*AYb)o(^<$zU_v=cFwN~ZVrlSLx|
zpr)Q7!_v*%U}!@PAnZLqOZ&EbviFbej-GwbeyaTq)HSBB+tLH=-nv1{MJ-rGW%uQ1
znDgP2bU@}!Gd=-;3`KlJYqB@U#Iq8Ynl%eE!9g;d*2|PbC{A}>mgAc<ZUVyw%frPJ
zN7{+qB73J=E!<sfbu2?%?_U`74k?Ujb)2@J-`j>8LK<69qcm)pi<uOj0|S_z{=`u+
z)GI|%Grst&fPD8oZr)MFejnidD@a-#<B3#%b#SMl|1L=Wk96ceg+zV_Q)lZhcQau(
zLu0%D+s)02<(KWJ`#JI{yy}#X2PuLWwFwd#AsUEJFNBmZ6bOH1%v4}<o@@i$lT3;T
z=ktv>u?`y~3K8zlZ1>~K_4T{%4zJG6H?6%{q3B-}iP_SGXELeSv*bvBq~^&C=3TsP
z9{cff4KD2ZYzkArq=;H(Xd)1CAd%byUXZdBHcI*%a24Zj{Hm@XA}wj$=7~$Q*>&4}
z2-<EqrttZ@QKQp>V62ek{rKhPvvB711`qtAy+q{f1yWuFDcYt}hP)Vd>G?;VTb^P4
z(QDa?zvetCoB_)iGdmQ4VbG@QQ5Zt9a&t(D5Rf#|hC`LrONeUkbV)QF`ySE5x+t_v
z-(cW{S13ye9>gtJm6w&>WwJynxJQm8U2My?#>+(|)JK}bEufIYSI5Y}T;vs?rzmLE
zAIk%;^qbd@9WUMi*cGCr=oe1-nthYRQlhVHqf{ylD^0S09pI}qOQO=3&dBsD)BWo#
z$NE2Ix&L&4|Aj{;ed*A?4z4S!7o_Kg^8@%#ZW26_F<>y4ghZ0b|3+unIoWDUVfen~
z`4`-cD7qxQSm9h<NO70xW2WQA-R<)q*l*5k&3y!NF~)rA{com)2orL%sAKUU#1Dcp
zoc2HI>F-;6WvCbu$t5r$LCOh}=`k1(W<&bG-xK{VXFl-cD%^Q*x-9eq;k8FzxAqZB
zH@ja_3%O7XF~>owf3LSC_Yn!iO}|1Uc5uN{Wr-2lS=7&JlsYSp3IA%=E?H6JNf()z
zh>jA>JVsH}VC>3Be>^UXk&3o&rK?eYHgLwE-qCHNJyzDLmg4G(uOFX5g1f(C{>W3u
zn~j`zexZ=sawG8W+|SErqc?uEvQP(YT(YF;u%%6r00FP;yQeH)M9l+1Sv^yddvGo-
z%>u>5SYyJ|#8_j&<HRV#h}90d=<D9bJ$bmnWPbtr>%h3#auTJ!4y@yEg<(wp#(~NH
zXP7B#sv@cW{D4Iz1&H@5wW(F82?-JmcBt@G<R&5ZqJZ${!H$`uNtw)#4NAUBu7`B1
z>w1}WK+>FRXnX(8vwSeUw{3i%HX6-pvQS-~Omm#x-udgp{=9#!>kDiLwqs_7fYy{H
z)jx_^CY?5l9#fR$wukoI>4aETnU>n<$UY!JDlIvEti908)Cl2Ziyjjtv|P&&_8di>
z<^amHu|WgwMBKHNZ)t)AHII#SqDIG<yo-WOPN&wvnO(_8-5PCfJX}35$eJldPfG22
ztDY_MT2V>TAd<(I0Q_LNPk*?UmK>C5=rIN^gs}@65VR*!J{W;wp5|&aF8605*l-Sj
zQk+C#V<#;=Sl-)hzre6n0n{}|F=(#JF)X4I4MPhtm~qKeR8qM?a@h!-kKDyUaDrqO
z1xstrCRCmDvdIFOQ7I4qesby8`-5Y>t_E1tUTVOPuNA1<D8n2Zmq6@fD2bCb>De9|
z8{B0NBp*X2-ons_BNzb*Jk{cAJ(^F}skK~i;p0V(R7PKEV3bB;syZ4(hOw47M*-r8
z3qtuleeteUl$FHL$)LN|q8&e;QUN4(id`Br{rtsjpBdriO}WHLcr<;aqGyJP{&d6?
zMKuMeLbc=2X0Q_qvSbl3r?F8A^oWw9Z{5@uQ`ySGm@DUZ=XJ^mKZ-i<wTH#vg5dYq
zPj$jYJ(2di4pR$XX;q05i&7tJxLg^P<96Rnkm>pJtmiXjcu<%z?Nj%-1QY*O{NfHd
z=V}Y(UnK=f?xLb-_~H1b2T&0%O*2Z3bBDf06-nO*q%6uEaLs;=omaux7nqqW%tP$i
zoF-PC%pxc(ymH{^MR_aV{@fN@0D1g&zv`1$Pyu3cvdR~(r*3Y%DJ@&EU?EserVEJ`
zEprux{EfT+(Uq1m4F?S!TrZ+!AssSdX)fyhyPW6C`}ko~@y#7acRv<fn`H`JS|B0R
z5LL%=k13ys;X;W8jiSn(2a6?dnHm2tId}WyP!k@?3YNemFZbv!6Q(vR)QkLt_!cQ=
zJ`W5Gj&g=U`gp6uo@Jix<W6Ar1vX25KRDX9-<=6?9mn1w?{yQn>iE(4>moNe$HXzf
zY@@fJa~o_r5nTeZ7ceiXI=k=ISkdp1gd1p)J;SlRn^5;rog!MlTr<<6-U9|oboRBN
zlG~o*dR;%?9+2=g==&ZK;Cy0pyQFe)x!I!8g6;hGl`{{3q1_UzZy)J@c{lBIEJVZ&
z!;q{8h*zI!kzY#RO8z3TNlN$}l;qj10=}du!tIKJs8O+?KMJDoZ+y)Iu`x`yJ@krO
zwxETN$i!bz8{!>BKqHpPha{96eriM?mST)_9Aw-1X^7&;Bf=c^?17k)5&s08^E$m^
zRt02U_r!99xfiow-XC~Eo|Yt8t>32z=rv$Z;Ps|^26H73JS1Xle?;-nisDq$K5G3y
znR|l8@rlvv^wj%tdgw+}@F#Ju{SkrQdqZ?5zh;}|IPIdhy3ivi0Q41C@4934naAaY
z%+otS8%Muvrr{S-Y96G?b2j0ldu1&coOqsq^vfcUT3}#+=#;fii6@M+hDp}dr9A0Y
zjbhvqmB03%4jhsZ{_KQfGh5HKm-=dFxN;3tnwBej^uzcVL<O?AG~Dz6u1X+?B>rrs
z<EHIiN@*PjI2~=CnydPB+9!1Lx@K!Gi*Jk&&B{qJD$~d2iu5%r5o;C{N2b|JE1&-e
zxh$%+k_cbUuGwEE;r}{E{*RU5f69?^`VNj?(rtc|uXc-wxr3vVqO-w&{QOU$?v#q=
zU+V3TVrnX?3FS7o9%UNp+F#n?V$_cn;z@v!f%@bjmzFh}8_72~9)o;-V*2j1n}SHk
zb)X>>eFP-jb#~LE$qTP9JJ;#$nVOw%&;}y>ezA6&i8S^7YK#w&t4!A36Ub|or)MJT
z^GGrzgcnQf6D+!rtfuX|Pna`Kq*ScO#H=de2B7%;t+Ij<>N5@(Psw%>nT4cW338WJ
z>TNgQ^!285hS1JoHJcBk;3I8%#(jBmcpEkHk<Zl$0EpA&>QDk%!4ygr;Q2a%0T==W
zT#dDH>hxQx2E<dX8b?@yg((2bG4D9^cs+I(p027?&|zIutZXiNzr$4Uhv+GDyDk9-
zaLX;na|6W_bN!P0!eb2=3YF>8+jE~jFY$FligkN&{vUZeIn*#I_Ca!l&;yf){eghi
z>&?fXc-C$z8ab$IYS`7g!2#!3F@!)cUquAGR2oiR0~1pO<$3Y$B_@S2dFwu~B0e4D
z6(WiE@O{(!vP<(t{p|S5#r$jl6h;3@+ygrPg|bBDjKgil!@Sq)5;rXNjv#2)N5_nn
zuqEURL>(itBYrT&3mu-|q;soBd52?jMT75cvXYR!uFuVP`QMot+Yq?CO%D9$Jv24r
zhq1Q5`FD$r9%&}9VlYcqNiw2#=3dZsho0cKKkv$%X&gmVuv<g|(w$he1~O|8$Sf%r
zu2S#`%@&%i+rt`152do5Q7PAq9>&S__zyz@0zmZdZI59~s)1xFs~kZS0C^271hR*O
z9nt$5=y0gjEI#S-iV0paHx!|MUNUq&$*zi>DGt<#?;y;Gms|dS{2#wF-S`G3$^$7g
z1#@7C65g$=4Ij?|Oz?X4=zF=QfixmicIw{0oDL5N7iY}Q-vcVXdyQNMb>o_?3A?e6
z$4`S_=6ZUf&KbMgpn6Zt>6n~)zxI1>{HSge3uKBiN$01WB9OXscO?jd!)`?y5#%yp
zJvgJU0h+|^MdA{!g@E=dJuyHPOh}i&alC+cY*I3rjB<~DgE{`p(FdHuXW;p$a+%5`
zo{}x#Ex3{Sp-PPi)N8jGVo{K!$^;z%tVWm?b^oG8M?Djk)L)c{_-`@F|8LNu|BTUp
zQY6QJVzVg8S{8{Pe&o}Ux=ITQ6d42;0l}OSEA&Oci$p?-BL187L6rJ>Q)aX0)Wf%T
zneJF2;<-V%-VlcA?X03zpf;wI&8z9@Hy0BZm&ac-Gdtgo>}VkZYk##OOD+nVOKLFJ
z5hgXAhkIzZtCU%2M#xl=D7EQPwh?^gZ_@0p$HLd*tF>qgA_P*dP;l^cWm&iQSPJZE
zBoipodanrwD0}}{H#5o&PpQ<LaEnZ8#Jva^_4H8uBoRdO{scuj(&2$o9r%}p6aIkM
zIgN>pCh61auqlckZq2_Eg__8;G-CwyH#h1r0iyD#Hd_$WgM89n+ldz;=b!@pvr4;x
zs|YH}rQuCyZO!FWMy%lUyDE*0)(HR}QEYxIXFexCkq7SHmSUQ)2tZM2s`G<9dq;Vc
ziNVj5hiDyqET?chgEA*YBzfzYh_RX#0MeD@xco%)ON%6B7E3#3iFBkPK^P_=&8$pf
zpM<0>QmE~1FX1>mztm>JkRoosOq8cdJ1gF5?%*zMDak%qubN}SM!dW6fgH<*F>4M7
zX}%^g{>ng^2_xRNGi^a(epr8SPSP>@rg7s=0PO-#5*s}VOH~4GpK9<4;g=+zuJY!&
ze_ld=ybcca?dUI-qyq2Mwl~-N%iCGL;LrE<#N}DRbGow7@5wMf&d`kT-m-@geUI&U
z0NckZmgse~(#gx;tsChgNd|i1Cz$quL<EK{n`fg<ef00Gc^+ZB*9RnZKY_dN{0;pr
zkWwN1+g+D*qwS_<f<$=X3|W|&KY>>qLzEO}<kBKUnp-Vc#!UE*%7|=&I>ndg&Pg4f
zy`?VSk9X5&Ab_TyKe=oiIiuNTWCsk6s9Ie2UYyg1y|i}B7h0k2X#YY0CZ;B7!dDg7
z_a#pK*I7#9-$#Iev5BpN@xMq@mx@TH@SoNWc5dv%^8!V}nADI&0K#xu_#y)k%P2m~
zqNqQ{(fj6X8JqMe5%;>MIkUDd#n@J9Dm~7_wC^z-Tcqqnsfz54jPJ1*+^;SjJzJhG
zIq!F`Io}+fRD>h#wjL;g+w?Wg`%BZ{f()%Zj)sG8permeL0eQ9vzqcRLyZ?IplqMg
zpQaxM11^`|6%3hUE9AiM5V)zWpPJ7nt<!aS$)Ag9!M8rzwQ;kFq)-anCmSw}H|pNi
z1DG+Eo|ayui<(#}-c}*`$y+V=;K3oVwNIAeNA$5NJixmY%<JSek+-oOo5tNAkhLc&
zt5dV7XTB@OjUl2Ch+yh~f#K<2mUpA{O&5ZPXosBtdagQyUlxskn+z$IXU+<j|INKo
zcEHJQD8FypW?SK@Gvo<)^WSU?n5FaM5BqopG<geq*XFt^=*-apkSL;&Nb=d|Z}AlX
zI1BYcT|AkDlfpJDbt)V%JJlF1Q&C<(C3Ka0gw?-r{G%7x1VdE;vTO^m6Z2=l`p=xv
z>*^FDga?ZP!U1v1aeYrV2Br|l`J^tgLm;~%gX^2l-L9L`B?UDHE9_+jaMxy|dzBY4
zjsR2rcZ6HbuyyXsDV(K0#%uPd<!rL4+ciDxHS?tqBRQXah|;FqtzvBGPqLsbqRr#w
z<Sk{f80^}(X>#<^V%@9c7{6Qd_kQEZL&;z_Jf+eabr)NF%@Ulz_a1e(qWqJC$tTC!
zwF&P-+~VN1Vt9OPf`H2N{6L@UF@=g+xCC_^^DZ`8jURfhR_yFD7#VFmklCR*&qk;A
zzyw8IH~jFm+zGWHM5|EyBI>n3?2vq3W?aKt8bC+K1`YjklQx4*>$GezfU%E|>Or9Y
zNRJ@s<XJ4A2dKt<$dy>(>L{WBXdNiJiL|^In*1VA`xiE#D)%V+C;KuoQi{1t3~4*8
z;tbUGJ2@2@$XB?1!U;)MxQ}r67D&C49k{ceku^9NyFuSgc}DC2pD|+S=qLH&L}Vd4
zM=-UK4{?L?xzB@v;qCy}Ib65*jCWUh<P9`3(_wR{5tM}<KF>(FVc&r<v}^+-5p<;w
zf$AZgR|M~k(PTz1ruoVo&&H@ShaJ#EI4z2ihN6+wwf-g24YI@{VHdfzxlG@Cu1%y&
zv=gon4}aCn2sYsqw`N&FS$C=hE5^4n6}_1OROmiwSWO=9aanpIJGd6PgT<JJ3l@~T
zulI*30S6*#`E<$|X4KdDOVnF*8eP)SZ{EvqpIF4jj28iJ`>g|+KnopG`%<cjXx(}m
zDhDiVgS0DlIj1Y(nID2rVC(-Ff?WK3+1dI^tKa_CpH}JL4=RHCj>cb>t;RNv=1%4=
z#)@CB7i~<xD6pOWmxlBI-D;rt#e(^Neweg46<HNE`-Q8>$$JDM>q@4ll8{Ja5Rsq0
z$^|nRac)f7oZH^=-VdQldC~E_=5%JRZSm!z8TJocv`w<_e0>^teZ1en^x!yQse%Lf
z;JA5?0vUIso|MS03y${dX19A&bU4wXS~*T7h+*4cgSIX1<eZeql*kC#k-NksnG0*_
zSGXV>1EB?XGiBS39hvWWuyP{!5AY^x5j{!c?z<}7f-kz27%b>llPq%Z7hq+CU|Ev2
z*jh(wt-^7oL`DQ~Zw+<nes=Wvy?R#{)hU{ia3tUl=s(&#GofelTggXVN<4<EBd%pW
zDsi$W)}HAdt`o&;qFTC*%1O}21We0;YNXPjso3_(&f;{avARd3xG$>GMH}V*ndCc~
zr>WVQH<LLyB?ms=)Qi0+X1}IqM%QU2`}JM0#$koA>JQ8ZqF^<u)IDEkib<fQBVR``
zBf(aJ;7~!Bdf&&+OV4ffpJUPa{Jd7|B7n^+7qsw6?sV;|?<N|{M<1+hXoj?@|3^JE
z)m`|Q2GIoJm>A7sH{N5~PbeDihT$<E0@?NqkY7B>;tUP`OwWn=j6@L+!=T|+ze%YQ
zO+|c}I)o_F!T(^YLygYOTxz&PYDh9DDiv_|Ewm~i7|&Ck^$jsv_0n_}q-U5<VG|f6
zOs<^m$Xm>|_1>*L44)nt!W|;4q?n&k#;c4wpSx5atrznZbPc;uQI^I}4h5Fy`9J)l
z7yYa7Rg~f@0oMHO;seQl|E@~fd|532lLG#e6n<?_ax(rW8N5_Gb^WP~^4V1=$UFsX
zNI2&wS@u1CdOkPQfKCu(&<tEJ)hK|`tf)f@l2h4Q*%_!cdV`9>#vXrfdh~?NP){lZ
z&3-33d;bUTEAG=!4_{YHd3%GCV=WS|2b)vZgX{JC)?rsljjzWw@Hflbwg3kIs^l%y
zm3fVP-55Btz;<-p`X(ohmi@3qgdHmwXfu=gExL!S^ve^Msi<ORqbsqFVB;6Utm>mP
zNCBV>2>=BjLTobY^67f;8mXQ1YbM_N<rEN<7n?tG55}lyZdU}NVxTF=%^+z>A3R^s
z{zhY+5@9iYKMS-)S>zSCQuFl!Sd-f@v%;;*fW5hme#xAvh0QPtJ##}b>&tth$)6!$
z0S&b2OV-SE<|4Vh^8rs*jN;v9aC}S2EiPKo<g-o%Z)V&dOU@7g7EN()e30oRHq1Hj
zae3;xpA+O=62|3plwyE@JJ4jA=a!}BCg6($aFt&ID9&+w?$+9<lwXGX22{JtMTp31
zy;Vtwko}t))OGL(HcR4E0YBLyf?SQjJe)mSmNW9@!kaZAsF#Y?z#aqp;D1E-HY;3`
z>(G&<6C|%$JQ{;JEg-L|Yob*<-`z?AsI(~U(P>cC=1V$OET<Eh@-1QlC_z}>G$7i#
zG#^QwW|HZuf3|X|&86lOm+M+BE>UJJS<KI4FEwf{E!nInPboEh%N6ef8$TpBbiKb?
zKsp#T(JIi}k0j6e5r*>SAAij<fio-i3?p3H-sa7MSEpJ_5#VfgXx65pr%vDBp%z7r
zsA-Q4A$4k!vvFOwgfje~G^Qb~j4Rgh<M(o@V0uBZwdJhXnRpVD5>knNp*eyLUq=Au
z7&aqR(x8h|>`&^n%p#TPc<zhIEW{4G1XPwm4~`;7YwNNs)mU&qlb4(j6a>C@8@PG%
zM&7k6IT*o-NK61P1XGeq0?{8kA`x;#O+|7`GTcbmyWgf^JvWU8Y?^7hpe^85<a4!`
z!TYiE-CO~WQjvPJOfK#<y@Wmd)D*~hr3ydI^kW-VT-6-I3c+mzdw|+;nP&Et;^=B)
zfbrsHu}e&<daK!gC(x=2Bhr8>_VuRq7yS~8uZ=Cf%W^OfwF_cbBhr`TMw^MH0<{3y
zU=y;22&oVlrH55eGNvoklhfPM`bPX`|C_q#*etS^O@5PeLk(-DrK`l|P*@#T4(kRZ
z`AY7^%&{!mqa5}q%<=x1e29}KZ63=O>8<Lf?05av_NumIYB^@XvSz)^6E}D`O1IEP
zn#`mp%nuo+G$lHa>9Q)yO4G@0USgbGhR#r~OvWI4+yu4*<p7_l-Shz>F8o`f?EG~x
zBCEND=ImLu2b(FDF3sOk_|LPL!wrzx<ar9u{M5Ht**W7-^TwKEEnR%L1L4<1#+x=7
z?A9uD0;+{;={gzo3gTO^``~rW9lEN7Y>_G-?&^EUof1C~A{feam{2&eAf@2GWem7!
z|LV-lff1Dk+mvTw@=*8~0@_Xu@?5u?-u*r8E7>_l1JRMpi{9sZqYG+#Ty4%Mo$`ds
zsVROZH*QoCErDeU7&=&-ma>IUM|i_Egxp4M^|%^I7ecXzq@K8_oz!}cHK#>&+<I`V
z0J$%}%_bCZ`uG4zJx_B>$E4rs2H8Fyc)@Bva?(KO%+oc!+3G0&Rv1<g*|~0#-rmJt
z#15-ESH3r^#1Wo70Az~l87NDd-EX!|q%>cP)e9u_Y|dXr#!J;n%T4+9rTF>^m_4X3
z(g+$G6Zb@RW*J-IO;HtWHvopoVCr7zm4*h{rX!>cglE`j&;l_m(FTa?hUpgv%LNV9
zkSnUu1TXF3=tX)^<E=swga+@_NOW=^zl;~ayF!!ph!-PL<Yg_F<FWy=pBUe3ly^^i
zsh2x9E$goEYlhZUV_l>}kDZk|AF%7FmLv6sh?XCORzhTU%d>y4cC;4W5mn=i6vLf2
ztbTQ8RM@1gn|y$*jZa8&u?yTOlNo{coXPgc%s;_Y!VJw2Z1bf%57p%kC1*5e{bepl
zwm?2YGk~x=#69_Ul8A~(BB}>UP27=M)#aKrxWc-)rLL+97=>x|?}j)_5ewvoAY?P|
z{ekQQbmjbGC%E$X*x-M=;Fx}oLHbzyu=Dw>&WtypMHnOc92LSDJ~PL7sU!}sZw`MY
z&3jd_wS8>a!si2Y=<F}g&Sf6{aKvftX#GKASHm|#FN8^Y<JT){wym=hJH%W1TG~50
z!}~-R<Ll4XR4%i3Dvos()=d|UicS%cl3!zN&!i??MHOv)o4n(D3?)>ijCo(rMnAqq
z-o2uzz}Fd5wD%MAMD*Y&=Ct?|B6!f0jfiJt;hvkIyO8me(u=fv_;C;O4X^vbO}R_%
zo&Hx7C@EcZ!r%oy<O&32XuX7-K^N*%xxZI_Evvx;Ow>}|S-8CvPR?Ns0$j`FtMB;h
z`#0Qq)+6Fxx;RCVnh<?2=#PkDIv$AIDNnSVfS59UFO=}Ne{@?#Jjq#PzG_(MuVtbC
zzt*wR=8leEB=et%{A<kopR#yW(m#mi$mc?GGL0q;WGPuV<SJDC9`ko$gg!LNSUroq
zjYg^Q^sO}$7ys0!{2Cu*Tq1cfuN&Z}yhu}*6pdV3Y4L?D_5??tyB$aK&$ssn%w8-U
zlUO~s-Lm!}%+6+Ns+4O;^Got=GjQW2tPPDnS}7A%_0&UPs@-x4wpKeW#@<~BtJzu#
z4^w_W2m*f&c!d<2LF}W?>wp`%>0H4hk(>Kd!(Y}>U+Tr_6Yp?W%jt_zdusOcA$pTA
z(4l9$K=VXT2ITDs!OcShuUlG=R6#x@t74B2x7Dle%LGwsZrtiqtTuZGFUio_Xwpl}
z=T7jdfT~ld#U${?)B67E*mP*E)XebDuMO(=3~Y=}Z}rm;*4f~7ka196QIHj;JK%DU
z?AQw4I4ZufG}gmfVQ3w{snkpkgU~Xi;}V~S5j~;No^-9eZEYvA`Et=Q4(5@qcK=Pr
zk9mo>v!%S>YD^GQc7t4c!C4*qU76b}r(hJhO*m-s9OcsktiXY#O1<<Xx}%D;DrM2u
zgR`7O#hM$qpaiXf!xs98k~~PmrS%$$H?RY`A<I1P$hIO_|76iq;X#Ay3~3zyy>OoH
z#J^Y@1A;nRrrxNFh?3t@Hx9d>EZK*kMb-oe`2J!gZ;~I*QJ*f1p93>$lU|4qz!_zH
z&mOaj#(^uiFf{*Nq?_4&9ZssrZeCgj1J$1VKn`j+bH%9#C5Q5Z@9LYX1mlm^+jkHf
z+CgcdXlX5);Ztq6OT@;UK_zG(M5sv%I`d2(i1)>O`VD|d1_l(_aH(h>c7fP_$LA@d
z6Wgm))NkU!v^YaRK_IjQy-_+>f_y(LeS@z+B$5be|FzXqqg}`{eYpO;sXLrU{*fJT
zQHUEXoWk%wh%Kal`E~jiu@(Q@&d&dW*!~9;T=gA{{~NJwQvULf;s43Ku#A$NgaR^1
z%U3BNX`J^YE-#2dM*<VS$mHL0>Ov*CzGdP9^`iI&`tmD~Bwqy4*N=DHt%RycykhF*
zc7BcXG28Jvv(5G8@-?OATk<VlF#JF;VFj42oue$8vk#utzT9sSL9u~Kb&>6|l{Rg1
zwdU2Md1Qv?#$EO3E}zk&9>x1sQiD*sO0dGSUPkCN-gjuppdE*%*d*9tEWyQ%hRp*7
zT`N^=$PSaW<j2^)OgKnb4YTq=_%Tjodhp-|4g<7VcoD4;JVfZ20F>D>f;h@$d2Ca7
z<IsxIDw8g%14f<dxXJ?1k%K10l;ryNsZhk|UHjR=E>8bNsm14sdOS%FQhMn9yC83$
z-YATg3X!>lWbLUU7iNk-`O%W8MrgI03%}@6l$9+}1KJ1cTCiT3>^e}-cTP&aEJcUt
zCTh_xG@Oa-v#t_UDKKfd#w0tJfA+Ash!0>X&`&;2%qv$!Gogr4*rfMcKfFl%@{ztA
zwoAarl`DEU&W_DUcIq-{xaeRu(ktyQ64-uw?1S*A>7pRHH5_F)_yC+2o@+&APivkn
zwxDBp%e=?P?3&tiVQb8pODI}tSU8cke~T#JLAxhyrZ(yx)>fUhig`c`%;#7Ot9le#
zSaep4L&sRBd-n&>6=$R4#mU8>T>=pB)feU9;*@j2kyFHIvG`>hWYJ_yqv?Kk2XTw`
z42;hd=hm4Iu0h{^M>-&c9zKPtqD>+c$~>k&Wvq#>%FjOyifO%Ro<b$&RjUsqT|Wxj
zW2lbJ(T7~%nc=aoD7AV4774WoR(WT%>Fgh*XW$%Hz$y2-W!@W6+rFJja=pw<H_#)8
zu5}XKw&Jv1p26(TLOG(jn&Xg^Fg`(UmF1jhtZr7y5Twax${5fPdi{qlX~!&gaQPQR
zO8yoi!vB8l_fLrY*TzJV(*GIHRVF%6<NX3fw$P-}4iA-xi%?ET2a~c8yT6o^8IS)O
z(QWPR+=SfhL7|C5&wSt(bfX<xvEorf4uv!@n!1=wPr7!q>-u_s0O3WMVgLb<CumOd
zDZ)7wYC^fq&#tZIt0XjOlVP|ml_~l+r!kAYsI5fTkua54YNeW0gQ&G8mf;ERufn<W
zQi9ayS({yq=ayz=&~7T3SIEvwJ^+7+2beaE1?b{7i2(J>&CrCQ)8I^6g!iQj%a%#h
z<~<0S#^NV4n!@tiKb!OZbkiSPp~31?f9Aj#fosfd*v}j6&7YpRGgQ5hI_eA2m+Je)
zT2QkD;A@crB<HIzTi?5d7<?fe`P<Q92mz?7Kt;dSgVi~LNFwz&<yssPZq9y>zA>7T
zw4o1MZ_d$)puHvFA2J|`IwSXKZyI_iK_}FvkLDaFj^&6}e|5@mrHr^prr{fPVuN1+
z4=9}DkfKLYqUq7Q7@qa$)o6&2)kJx-3|go}k9HCI6ahL?NPA&khLUL}k_;mU&7GcN
zNG6(xXW}<sgS8zIjVOZ!{0Co080O~_R?WpP|KoC=7x0-Hu?jFf@GLGg&<YdOLrFny
zI6>(+a%IT80=-13-Q~sBo>$F2m`)7~<Thgw;&?`BbJK}_`@#bKwjlQ!R4KF$zn@YU
zB5bX9cR%17A{Am)F?&AnK^6@sI$*a?sltpm4)FVN)gkcucU+7MZBGoi6<qmPJ=Egc
zxp<#|NfpUai(zMd0lO_up>wjW&XKndrz8soC*br=F*A_>Sh_Y}2Mt!#A1~2l?|hj)
z9wpN&jISjW)?nl{@t`yuLviwvj)vyZQ4KR#mU-LE)mQ$yThO1oohRv;93oEXE8mYE
zXPQSVCK~Lp3hIA_46A{8DdA+rguh@98p?VG2+Nw(4mu=W(sK<#S`IoS9nwuOM}C0)
zH9U|6N=BXf!jJ#o;z#6vi=Y3NU5XT>ZNGe^z4u$i&x4ty^Sl;t_#`|^hmur~;r;o-
z*CqJb?KWBoT`4`St5}10d*RL?!hm`GaFyxLMJPgbBvjVD??f7GU9*o?4!>NabqqR!
z{BGK7%_}96G95B299eErE5_rkGmSWKP~590$HXvsRGJN5-%6d@=~Rs_68BLA1RkZb
zD%ccBqGF0oGuZ?jbulkt!M}{S1;9gwAVkgdilT^_AS`w6?UH5Jd=wTUA-d$_O0DuM
z|9E9XZ<SSp+loefIL6G9M*^0yf2%$Y7Xt!6el@rIQi=p2<f%`KaPVBkR9mBQR!FzE
z<ob{rKk_TD*oLO%oSPn+q}3sXY(Jnrn$U&usUaNN(>Fl$tZctd`Bq=OfI(cw4A)|t
zl$W<!?9%H$y6ECn?$C+NfY*HN(Da|-Qf(#&W874P^~Pl0B-g6Nf~2@~8$JsJe3REE
z5`PI+4%<)#4RHPSWm46I(V<pT7ZQbW{o=Kvx}6cx0}p+)m%$qG<DpwO2ku6$mK0$Z
zAsc{@4QUfJXZzPZfXq#rPyAAs75%Nc?0+#v{bwBgXPfsw#;A(_G^kV5Xs)y@1BHAF
zgPf;nr1beEy7Ysdgam{s6~pUyeHXc8bH~(Gz-`GBlvk3FME=*-+8!gJV;fbF@UY;J
z?JUo)7@F3$VC$LF1C%N#Ef_9$7g$WZ-mjCQB55T)<AE9Kq6wCK$*~-;V*yc9cjETD
z4O{?Sil&8d<WVKR_ck449`F{tikM8<S=`jwjDHzAOBz6uSNk-w5LJWl@}4>~3_RkP
zFA6wSu+^efs79KH@)0~c3Dn1nSkNj_s)qBUGs6q?G0vjT&C5Y3ax-seA_+_}m`aj}
zvW04)0TSIpqQkD@#NXZBg9z@GK1^ru*aKLrc4{J0PjhNfJT}J;vEeJ1ov?*KVNBy<
zXtNIY3TqLZ=o1Byc^wL!1L6#i6n(088T9W<_iu~$S&VWGfmD|wNj?Q?Dnc#6iskoG
z<gz?q1P)tgamdQ#70IQ58PSN12z$;a^9As1;`GqTD0KI8wjYIPb6@Z`<*?yu(eyVM
zph=IxX(dP}JU7A4DL+i~CQ70;at&mI%k$wQO|wY@K~({H(9D~JN}sY2C2XZZAyco@
zpBq0RE!Ng3N|ldogXwKD-#K<vo{RUurnEB|OkH9bO<iMmWJ<%6kM4ftcuKv5VSN{j
zlyWjh8wQ8hEQcOSrbsl%z-1!83ob~q-F^dT=~o6eT+@Fo4yp*M)7H|b+v!vKaR^5?
zd~$(*zu%qS3iL1p8EG>t^u26JqFnt=xjS-=|ACC%(=YQh{_a<pmh9*Pm2y*M8e^q_
z%`06NDg95vQB!-Q7R32QA7K>lLW1tk;+tz1ujzeQ--lEu)W^Jk>UmHK(H303f}P2i
zrsrQ*nEz`&{V!%2O446^8qLR~-Pl;2Y==NYj^B*j1vD}R5plk>%)GZSSjbi|tx>YM
zVd@IS7b>&Uy%v==*35wGwIK4^iV{31mc)dS^LnN8j%#M}s%B@$=bPF<JH+(OJe)<e
zS-6EZ2aG*Y(j7hgR55gB`7wuZ&m8<&?ghoO3P>I_ifcyPd4<H!)^d@xVsN2@A72aa
z=LGGEuw+Zq8#;W+D&oSv2amC>hilEWm71chIwfIR(-SeQaf20{;EF*(K(Eo+hu{}I
zZkjXyF}{(x@Ql~*yig5lAq7%>-O5E++KSzEe(sqiqf1>{Em)pN`wf~WW1PntPpzKX
zn;14G3FK7IQf!~n>Y=cd?=jhAw1+bwlVcY_kVuRyf!rSFNmR4fOc(g7(fR{ANvcO<
zbG|cnYvKLa>dU(Z<hSAJ^1c6kseQH%>9YP796`Au?gz)Ys?w!af`F}1#W>x_O|k9Q
z>#<6bKDt3Y<u?_%q#7-6?_$s8V`h}#zHm)N0*lj#ujOESlqnt!sxj0GgEZvCf%&BU
za=|26!Ct<JXh*i}1OyJ;)?W_Y5E$Yw2QYT;)^V(2*@BD(>}?KT2tmhU>H6Umn}J5M
zarILVggiZs=kschc2TKib2`gl^9f|(37W93>80keUkrC3ok1q{;PO6<B_@t(eTV)o
zJ4>HMbm{cZ^ROcT#tWWsQy?8qKWt<42BGryC(Dx>^ohIa0u7$^)V@Bn17^(VUgBD>
zAr*Wl6UwQ&AAP%YZ;q2cZ;@2M(QeYFtW@PZ+mOO5gD1v-JzyE3^zceyE5H?WLW?$4
zhBP*+3i<09M$#XU;jwi7>}kW~v%9agMDM_V1$WlMV|U-Ldmr|<_nz<HPxAjgy(dh4
zt%>*<G$Xyq;j9=BhB5A&=POQVP)Cf6Cya+LY+a<JUYo&IFqp(0J#2$;Js1olM&<Sm
z2hx57HkN5EQ7ygA@zRqwhcW&6`TP~`8?BuYp{N`BX&&WpKc+bAPgR9B+$OY`BA2dS
z*A00zNam9#iEIdL$*z<j8v;c00fI!@!6ZB2yx=SIPXP}I{fAXmpWorJHA|i#71%I^
zfn3YsYJC)WMs}nr`nqS1b8tj?^I=>F_kcgrJnrViguEnJt{=Mk5f4Foin<QP2@Cdn
zqT#j5=Wj?`(v3C2RWCmT`eGX5fhedx+#7a(!IrZ$n^>7(3vUXC>4gyJ>sK<;-p{h7
z2_mr&Fca!E^7R6VvodGznqJn3o)Ibd`gk>uKF7aemX*b~Sn#=NYl5j?v*T4FWZF2D
zaX(M9hJ2YuEi%b~4?RkJwT*?aCRT@ecBkq$O!i}EJJEw`*++J_a>gsMo0CG^pZ3x+
zdfTSbCgRwtvAhL$p=iIf7%Vyb!j*UJsmOMler--IauWQ;(ddOk+U$WgN-RBle~v9v
z9m2~@h|x*3t@m+4{U2}fKzRoVePrF<RJ94G+_hAjxr-thjMmJ&7|b`1Q!`fA)vYK~
zqDxNSpgXWAJJ$!kTO_lC{3z9&{s(P%by5tx_@WK9e>-}U{`YT|vW?~64Bv*7|Dz03
zRYM^Yquhf*ZqkN?+NK4Ffm1;6BR0ZyW3MOFuV1ljP~V(=-tr^Tgu#7$`}nSd<8?cP
z`VKtIz5$~InI0YnxAmn|pJZj+nPlI3zWsykXTKRnDCBm~Dy*m^<fEQ$Tt{H-xP+V(
z?lk2!#!!;wpuQT!K9LO7UnSvslJ-9DqH;-!{3Vfm+0G~BLKg+x<O<i4{QNQ+N<ng@
zHek-(Bn1R%65UUC!Bh5AL3EhWcvKssK9>^qTuY+8dSl@>&B8~0H$Y0Zc25APo|?R=
z>_#h^kcfs#ae|iNe{BWA7K1mLuM%K!_V?fDyEqLkkT&<`SkEJ;E+Py^%hP<GSs9m{
z_ohgeP_Vx|5GE(plB^1x3T?4chG?iNc3MoNf7KQ~<wjW|Z&9O^+}KwsVVrT_s9WoQ
zI66#cE%M+^o5l*!jEcZswEun#o^IG+UqrN|_uGK?Pd`4AU1cqR1tHh6HNXi=6{4VO
zDlr-wTA+mNr^zyx>VZ(%a2P4vL=vglF|X_`Z$^}q470V+7I4;U<H_P?r<Yk7yA*R@
zWO+KoOQp4>YdcZ7vU=41dd{d#KmI+|Z<KAK%~wx}r>Ga>C10g6w1a?wxAc&?iYsEv
zuCwWvcw4FoG=Xrq=JNyPG*yIT@xbOeV`$s_kx`pH0DXPf0S7L?F208x4ET~j;yQ2c
zhtq=S{T%82U7GxlUUKMf-NiuhHD$5*x{6}}_eZ8_kh}(}BxSPS9<(x2m$Rn0sx>)a
zt$+qLRJU}0)5X>PXVxE?Jxpw(kD0W43ctKkj8DjpYq}lFZE98Je+v2t7uxuKV;p0l
z5b9smYi5~k2%4aZe+~6HyobTQ@4_z<!e;(%({JaOWCE6^+lW4}7H4g=0%z28{u=VO
zQ~JqFKkVR#4s(b5_z)V5No6a%*cr3W(wOsCY?kFZn;ZFx%}ak<fc-nqI{q1y|AT95
zKzS)GrG5I28C^{tK;oy4;)#I};2-3Xm5P58{1z4K7bO53ut~%^)@wvEE#>#*lRHl#
zSA`s~Jl@RGq=B3SNQF$+puBQv>DaQ--V!alvRSI~ZoOJx3VP4sbk!NdgMNBVbG&BX
zdG*@)^g4#M#qoT`^NTR538vx~rdyOZcfzd7GBHl68-rG|fkofiGAXTJx~`~%a&boY
zZ#M4sYwHIOnu-Mr!Ltpl8!NrX^p74tq{f_F4%M@&<=le;>xc5pAi&qn4P>04D$fp`
z(OuJXQia--?vD0DIE6?HC|+DjH-?Cl|GqRKvs8PSe027_NH=}+8km9Ur8(JrVx@*x
z0lHuHd=7*O+&AU_B;k{>hRvV}^Uxl^L1-c-2j4V^TG?2v66BRxd~&-GMfcvKhWgwu
z60u{2)M{ZS)r*=&J4%z*rtqs2syPiOQq(`V0UZF)boPOql@E0U39>d>MP=BqFeJzz
zh?HDKtY3%mR~<ofQ-VL$Gn7@0K>reR7S2rsR0aDMA^a|L^_*8XM9<sh>KjabpYSBu
z;zkfzU~12|X_W_*VNA=e^%Za14PMOC!z`5Xt|Fl$2bP9fz>(|&VJFZ9{z;;eEGhOl
zl7OqqDJzvgZvaWc7Nr!5lfl*Qy7_-fy9%f(v#t#&2#9o-ba%J3(%s#C=@dagx*I{d
zB&AzGT9EEiknWJU^naNdz7Logo%#OFV!eyCIQuzgpZDDN-1F}JJTdGXiLN85p|GT!
zGOfNd8^RD;MsK*^3gatg2#W0J<8j)UCkUYoZRR|R*UibOm-G)S#|(`$hPA7UmH+fT
ziZxTgei<VPFgYE!2)5*kZf(Yz8JO!eX?K#xrGvA+y2kV%lB4O7if+2!)C8G2()%aA
zA=<_&c<78cA-haE31_PB^xZ2I&D_1EB9#j8G%_+_RqSZQ^xvCMD0(D^HPsdcs%#4;
z62L0wD#Ss-ESmsc`x%k@RLMzVV?Q@iipKif4(l$~%IaM%PayFerP!#19qST5`h+K)
zgtN?1pec1wxp`6GfpUI>R_yzvNS1s+T!xw)QgNSH(_?B@O?uTBwMj`G)2c^8%g8zu
zxMu5SrQ^J+K91tkPrP%*nTpyZor#4`)}(T-Y8eLd(|sv8xcIoHnicKyAlQfm1YPyI
z!$zimjMlEcmJu?M6z|RtdouAN1U5lKmEWY3gajkPuUHYRvTVeM05CE@`@VZ%dNoZN
z>=Y3~f$~Gosud$AN{}!DwV<6CHm3TPU^qcR!_0$cY#S5a+GJU-2I2Dv;ktonSLRRH
zALlc(lvX9rm-b5`09uNu904c}sU(hlJZMp@%nvkcgwkT;Kd7-=Z_z9rYH@8V6Assf
zKpXju&hT<=x4+tCZ{elYtH+_F$V=tq@-`oC%vdO>0Wmu#w*&?_=LEWRJpW|spYc8V
z=$)u#r}Pu<hbr&#Xz+AeeY_c~s6!?7Q=WRCkYY{0wM>7kvjSuM{FSyy9_&851CO^B
zTm$`pF+lBWU!q>X#;AO1&=tOt=i!=9BVPC#kPJU}K$pO&8Ads)XOFr33<kp6h^@$J
zo?dagP)((=Dnqf=8F~`NaZlRPmIBq#f7eQpVs2-Ak5@?%lueG*iUCc}`jXW>6_Iyn
z$d{MTGYQLX9;@mdO;_%2Ayw3hv}_$UT00*e{hWxS?r=KT^ymEwBo429b5i}LFmSk`
zo)-*bF1g;y@&o=34TW|6jCjUx{55EH&DZ?7wB_EmUg*B4zc6l7<aT}0SpY<Oa**T|
z_9AyQb*!Lot&_`cUT*0J3f_l;<S$R4uzj4Yix7{V;60CFDjJ3^;8Cpb%v<;n@!Y+<
zqKyqux_`duK#m{2upJ3)H`Kvsb!-$^8YL)ePe$2}h?$?UKg`PFHZq0jO~YevDQkmo
zT5hhoeu7*fVln6+%&|p0Ao9)hQ83-1$G|jRJ@Grca?*sT8qvM;O72=4D+1fRM9_hO
zVnGFGerr)NYYJdAR0o5N>x-}qYLQR@^7o6rrgkoujR<XIIHctw_)Fe%f2t48tPQC{
z6<Rn<QfyY(e5f=WMY{#(?1kFRJ_x(q*-OMuT5s9JGPBfJuQbjDV9pobOEUygVLV+x
zd2$syWHUsLcNKair#m>Nym9O)K>wNfvY+uy+4Om{XgRHi#Hpg*bZ36_X%pP`m7FIF
z?n?G*g&>kt$>J_PiXIDzgw3IupL3QZbysSzP&}?JQ-6TN-aEYbA$X>=(Zm}0{hm6J
zJnqQnEFCZGmT06LAdJ^T#o`&)CA*eIYu?zzDJi#c$1H9zX}hdATSA|zX0Vb^q$mgg
z&6kAJ=~gIARct<X!BzXY$C1<R!3H!^FKTL$eKy1%Dx%wp&o(=jb~%$sk<Z9kmCu4$
zo-sXQV#0q*HO%@J-F}wHnt>>}4z&kzWWvaD9#1WK=P>A_aQxe#+4cpJtcRvd)TCu!
z>eqrt)r(`qYw6JPKRXSU#;zYNB7a@MYoGuAT0Nzxr`>$=vk`uEq2t@k9?jYqg)MXl
z67MA3^5_}Ig*mycsGeH0_VtK3bNo;8#0fFQ&qDAj=;lMU9%G<UqQvs5tjZU_m%VfH
zl&Mkh0;oSEW~%P2=xE9hVGwn+AfysI)n|1QPLvN%4NM(mM>)&HL>NO|lWU3z+m4t7
zfV*3gSuZ++r<i;qA=~DP_Nh|E&<-2Z&aFfHX3R96<7T^_3m7_X;3U5iPdEZgVv~1P
z&tD_v;R9E5<a#7C83VbdmzLvjnMdeFreo|8+V|zi3E!to{L=`wV6A3<k#ueVOPMq&
zr}e2(?u0hg<k(8pg?OvSm{t~ZB8l%BqttArB#yV(tiG78=PRPge7ljYluT02%G9#p
zc=8z-A!oOz%cA6O$r^fOq|8I!XSMEzpRO)P5lm-LC=7;t-wh$ssp;DFm&`1xejgf(
z$}mke!PpZDo40zpgaxh$dl3AzpGuCm&Qe}QLq>IWsinX@QaT>dsbD>Xp8%8c`<?=-
zWLa05h}VRqMNEf2?UdwL2G$a@>HLamm~(i{7L&S0uZ;`W-tqU4XAgQclM$PxE7<J8
zGd+j`0+W(m8dPnT*2M7-(Y_6%Zo*V1O1S3})8V$Oq}K$zJoI{vRmL|#J<?lBr5%0t
z&@uPNiGG_u4Z8WM8Sja~BQMr169y@KL>6OH(PSjHjR$(nh({vsNnawhP!!HcP!l)5
zG;C=k0xL<^q+4rpbp{sGzcc~ZfGv9J*k~PPl}e~t$>WPSxzi0}05(D6d<=5+E}Y4e
z@<Yjm&6F?CT4`lC!wyHrTMqCTt(Pgyo7(NVWv#k*j46wyIR=sYR;=i8_~FY&tQp;h
zfpL%+S1V`(Zhe&<?uR&V5$pmN-`kHFv#^4B>_QZtDcC7qh4#dQFYb6Pulf_8iAYYE
z1SWJfNe5@auBbE5O=oeO@o*H5mS(pm%$!5yz-71~lEN5=x0eN|V`xAeP;eTje?eC=
z53WneK;6n35{OaIH2Oh6Hx)kV-jL-wMzFlynGI8Wk_A<~_|06rKB#Pi_QY2XtIGW_
zYr)RECK_JRzR1tMd(pM(L=F98y~7wd4QBKAmFF(AF(e~+80$GLZpFc;a{kj1h}g4l
z3SxIRlV=h%Pl1yRacl^g>9q%>U+`P(J`oh-w8i82mFCn|NJ5oX*^VKODX2>~HLUky
z3D(ak0Sj=Kv^&8dUhU(3Ab!U5TIy97PKQ))&`Ml~hik%cHNspUpCn24cqH@dq6ZVo
zO9xz!cEMm;NL;#z-tThlFF%=^ukE8S0;hDMR_`rv#e<aYbPGO~W9lUzuBOTPL90&c
zR82d!Vbie&tJD03mxAC>TYg7io1w9n_vJpK+6%=c#Y?wjAs_(#RQA0gr&Va2BQTq`
zUc8)wHEDl&Uyo<>-PHksM;b-y(`E_t8Rez@Iw+eogcEI*FDg@Bc;;?3j3&kPsq(mx
z+Yr_J#?G<iViBF_i-C`^0W<4y5Y<7upFVbe+w4SEx8<0WO)7k9q+=SHv8&2`sGd31
zkP3T*TR{1=Imw7Bxva>6D?t2G%O9o&e7Gbf&>#(-)|8)GIbG_a${TU26cVrIQSt=%
zQ~XY-b1<AergIK&x^rak248~9*8uk*oc6$o#Zn(iVc~|=$h-*}4E^AdA4l#_08y1S
zYGVuNW}QWwu7GIm89Ib{_{rX5a@%Tm1dS!m8ET;#8F;-U+>VQVc>IV=7um0^Li>dF
z`zSm_o*i@ra4B+Tw5jdguVqx`O(f4?_USIMJzLvS$*kvBfEuToq-VR%K*%1VHu=++
zQ`=cG3cCnEv{ZbP-h9qbkF}%qT$j|Z7ZB2?s7nK@gM{bAD=eoDKCCMlm4LG~yre!-
zzPP#Rn9ZDUg<W_~9$+r!l&aHZxl-|!w`b*`F?^8{WN|Fl(ZYCkU|l%GSZ3jDXB3!3
z@B?Ll8<PL?Ko@VKqa3t7oCX}UNZw$4iU1C#kYm)23vR~w>b4++M78-V&VX<1ah(DN
z(4O5b`Fif%*k?L|t%!WY`W$C_C`tzC`tI7XC`->oJs_Ezs=K*O_{*#SgNcvYdmBbG
zHd8!UTzGApZC}n7LUp1fe0L<3|B5GdLbxX@{ETeUB2vymJgWP0q2E<&!Dtg4>v`aa
zw(QcLoA&eK{6?Rb&6P0kY+YszBLXK49i~F!jr)7|xcnA*mOe1aZgkdmt4{Nq2!!SL
z`aD{6M>c00muqJt4$P+RAj*cV^vn99UtJ*s${&agQ;C>;SEM|l%KoH_^kAcmX=%)*
zHpByMU_F12iGE#68rHGAHO_ReJ#<2ijo|T7`{PSG)V-bKw}mpTJwtCl%cq2zxB__m
zM_p2k8pDmwA*$v@cmm>I)TW|7a7ng*X7afyR1dcuVGl|BQzy$MM+zD{d~n#)9?1qW
zdk(th4Ljb-vpv5VUt&9iuQBnQ$JicZ)+HoL`&)B^Jr9F1wvf=*1and~v}3u{+7u7F
zf0U`l4Qx-ANfaB3bD1uIeT^zeXerps8nIW(tmIxYSL;5~!&&ZOLVug2j4t7G=zzK+
zmPy5<4h%vq$Fw)i1)ya{D;GyEm3fybsc8$=$`y^bRdmO{XU#95EZ$I$bBg)FW#=}s
z@@&c?xwLF3|C7$%>}T7xl0toBc6N^C{!>a8vWc=G!bAFKmn{AKS6RxOWIJB<mSe9A
zwUk5~;ttm-UwXh*gg5olvLGjDrJF~aE)zw$2Cx_eu%5KNe;go|?QkK;r66LMH$Q{i
z(o$Px!SY-^Yt$SqP8{b!^ECQ;8ws+BoP3c3|Li3_f4T#5JuXaP83(&fL-hPNOc59?
znfTb~SLKNXcJO_UhW#o^NzATJJ`ny)XA=kT!Ksrt0Xa@;!{BT9F}vwy=edtakafQD
z=(}1}Nz&PD@?L&t;Imei8b~`}i&1->ZXP&0CyXAi<q;~b<N8*s9G=^}i4s)D#$vcL
zyoq3g&u7Tt(OJAod?dG1{^^Vuq3YRSWq4`w0-bvlYFVR;^C&sH+UzI?O$GcL8apjR
zBLj5TOsv@Cm8hg8bezCoS{oA(leEXhmjHBtcA+h4Pm!GlcHAU!ed9Vw-1M+HCy#uO
zH%T1#Vjl}leAtLQ&d&RC)sO2tvt_Xc&<0tk)QkAJ8r!~IY(q0`d(^U5`NE3@Sq-TR
zPLeTrxJ@0$k2pP&(e@cSpW~{9G<MOgPxaYWw-STSzeukb!@_O(y7rRZdA?gf***U)
z?}>Hd?7R#S46K6UXYXl#c_#APL5SfW<<-|rcfX&B6e*isa|L^RK=0}D`4q-T0VAs0
zToyrF6`_k$UFGAGhY^&gg)(Fq0p%J{h?E)WQ(h@Gy=f6o<Dj$lh>xUSAuT4ir<zaZ
z>}jI)36|NnmnI|<V;nFnIxNnd$1}$bE4<H-by6>vtij;t!jT?6Jf-E19}9Lf9(+N+
z)+0)I5mST_?3diP*n2=ZONTYdXkjKsZ%E$jjU@0w_lL+UHJOz|K{{Uh%Zy0dhiqyh
zofWXzgRyFzY>zpMC8-L^43>u#+-zlaTMOS(uS!p{Jw#u3_9s)(s)L6j-+`M5sq?f+
zIIcjq$}~j9b<R^nFdDNl9nxz0ZvWBFP}9lsRa;+d{AySj+c<6#i^S0IHmk%&jX5^c
z;~Zw15>`0_hIz~?4?b(Sqdpi(;1=8~wkIABU+APWQd<Zk3H$p=O%NeU9`uQnD5Y7U
zZNq%5c(I+iD%=SLJySp!k^{YMT|y)xH?yL?HBbUR2<-$rQ*O?xKYbb$@+_#vqFTep
zFO+s7Sok3?#8&7hvsDrKw8<Fz&N4_Yl#i_L(k>f5v@g=1c{c{d*J(X5+cfEdG?qxq
z{GKkF;)8^H&Xdi~fb~hwtJRsfg#tdExEuDRY^x9l6=E+|fxczIW4Z29NS~-oLa$Iq
z93;5$(M0N8ba%8&q>vFc=1}a8T?P~_nrL5t<WLfpVju(QTm11|XlZC+^uwVFqS$p#
z>Ye~X>G=3QoFlBae8vVt-K!^@vusN<8gQJ!WD7H%{*YgY0#(tXxXy##C@o^U7ysxe
zLmUWN@4)JBjjZ3G-_)mrA`|NPCc8Oe!%Ios4$HWpBmJse7q?)@Xk%$x&lIY>vX$7L
zpfNWlXxy2p7TqW`Wq22}Q3OC2OWTP_X(*#kRx1WPe%}$C!Qn^FvdYmvqgk>^nyk;6
zXv*S#P~NVx1n6pdbXuX9x_}h1SY#3ZyvLZ&VnWVva4<x~i=T>)9D|i7kjGY{>am&^
z-_x1UYM1RU#z17=AruK~{BK$A65Sajj_OW|cpYQBGWO*xfGJXSn4E&VMWchq%>0yP
z{M2q=zx!VnO71gb8}Al2i+uxb=ffIyx@oso@8Jb88ld6M#wgXd=WcX$q$91o(94Ek
zjeBqQ+CZ64hI>sZ@#tjdL}JeJu?GS7N^s$WCIzO`cvj60*d&#&-BQ>+qK#7l+!u1t
zBuyL-Cqups?2>)ek2Z|QnAqs_`u1#y8=~Hvsn^2Jtx-O`limc*w;byk^2D-!*zqRi
zVcX+4lzwcCgb+(lRO<!u{im0+jt`r2`Em5{bbf@HeK<qd*JgT&gFYTPE6SUsguim&
zK56=?e>WJ~qi;q2!t6;?%qjGcIza=C6{T7q6_?A@qrK#+)+?drrs3U}4Fov+Y}`>M
z<N<x^M%)G=No8uzY`9zTx~0*Hu=^Ld!u9U7w&?RTuZ{ao=<@qCI9ASbxvZDy67qU+
z>#40OUPpwpaC-8&q8yW0XWGw`RcSpBX+7hZ@xar<?ckho#G5?>fCNnrl-{k@`@Vv>
zYWB*T=4hLJ1SOb<!(sRM0mK6-l~UfZMKxR;X!5H!sx-KdXIoUf6XLl$A&bwC7x=7g
zE{M?vA9|hz;)XD_9e*XW?EE<4#XI4fx!OVDw18`ZapG8Wgp14}w$W<njWlPG@NmQw
zb~xmmLM`PJWd~P~50FcGc!QIPF_@WW?}@s3h27Q)2Xa~Xetg4#b@WtlHT|2bpgBQ?
z&jfXV?}L-R5x7o0^Qn74{~(FLnMxT-;o@&K{uBgPOZg2ZF;`bMBW*it(_K-Gj}_AO
z;%B^em2d-m3l@E=bOcyNQ|iI(`9>SF_)2AaX*g(#(88~bVG9w)ZE91eIQWflNecYC
zzUt}ov<&)S&i$}?LlbIi9i&-g=UUgjWTq*v$!0$;8u&hwL*S^V!GPSpM3PR3Ra5*d
z7d77UC4M{#587NcZS4+JN=m#i)7T0`jWQ{HK3rIIlr3cDFt4odV25yu9H1!}BVW-&
zrq<Ip6S3)|!|AK+z9KY7{3P+HsCYhp4u>M5DjDzbd^pE^Q<-$1^_tX)dX8;97ILK{
z!{kF{!h`(`6__+1UD5=8sS&#!R>*KqN9_?(Z$<p9Q<$woFmSv?@e7n`z`~aA(Nn*e
z;v+G%*|zYj6!lp7`k)nC@k5v}N5SsG2cM0yW7~<A@aBNL4LVCJ4<Jd3UW1px)sL^U
zs$`DajP9W|Y>4cY#B)pG8>2pZqI;RiYW6aUt7kk*s^D~Rml_fg$m+4+O5?J&p1)wE
zp5L-X(6og1s(?d7X#l-RWO+5Jj(pAS{nz1abM^O;8hb^X4pC7ADpzUlS{F~RUoZp^
zuJCU_fq}V!9;knx^uYD2S9E`RnEsyF^ZO$;`8uWNI%hZzKq=t`q12cKEvQjJ9dww9
zCerpM3n@Ag+XZJztlqHRs!9X(Dv&P;_}zz$N&xwA@~Kfnd3}YiABK*T)Ar2E?OG6V
z<;mFs`D?U7>Rradv7(?3oCZZS_0Xr#3NNkpM1@q<KMz!5%$Nu5i+)sIFy{P_q+hSM
z;iw?+TF)i*sZH;kvB>n-X$;aNLYL;yIMX4uubh^Xb?HloImt$=^s8vm)3g!{H1D|k
zmbg_Rr-ypQokGREIcG<<SfM<L)C{35M|z0ho<S)c5EtqO=v6$Z0H~eIX80m~(tU=R
zL3N5~h#B=Iwc7k;i`(a8I3mQ}afulUJBj$0^q3_DT(<p-SI?0%aPpz+DIj$*B}iUA
zhegR2LsLk|nW3_Ft7Vxf_NE5qvIo(&BBB9MEdjy3?4<J*(1g-rfO?l&x<uP@KxaW4
zLtk%eP39}E5G>8u(=W^+<Zfal!4GQuNFjsaBFn4Oh`dNX4~%@PtEduGHBQ*)LSAqw
zGMaE}MFf-^tLx9oM*4|DvNUeij`G%RgcN$mGW*$nj-Zq#C7#X9O?0d`E+u#IQh{=*
zZ2%~#v+7MnjcTDC+oY<>oxelI&t0U`dT=bBMe1fl+9!l&vEPFFu~yAu!XIv4@S{;|
z8?%<1@hJp%7AfZPYRARF1hf`cq_VFQ-y74;EdMob{z&qec2hiQJOQa>f-?Iz^VXOr
z-wnfu*uT$(5WmLsGsVkHULPBvTRy0H(}S<w+S-%VXz-mEN`|2vC7HKn=EI0e2(Ez_
z;KT<*I@#}{vu3;1dggp)8=E+#`C(~F8+4AX@0ZwSOO<2E`ZL;@94hBVC4XO0xwpgQ
zgWPEX<Q(51hsL35g>0SQ<i>18W0kp_U}8Phc3gz!Hj#*VYh$AiDE245!YA0M$Q@rM
zT;}1DQ}MxV<)*j{hknSHyihgMPCK=H)b-iz9N~KT%<&Qmjf39L@&7b;;>9nQkDax-
zk%7ZMA%o41l#(G5K=k{D{80E@P|I;aufYpOlIJXv!dS+T^plIVpPeZ)Gp`vo+?BWt
z8U8u=C51u%>yDCWt>`VGkE5~2dD4y_8+n_+I9mFN(4jHJ&x!+l*>%}b4Z>z#(tb~<
z+<+X~GIi`sDb=SI-7m>*krlqE3aQD?D5Wi<Ba$(_sO)#OHmv}v5DU%=iw?a*va39O
zLikPo6&<mEHY~avK_Thox6G2xQ}qJ~GR5g`luw}pOtt+%uFMfaEk<Wo{@i4iz;nGs
z&34iJfD)yG>YX;#8m|ENYKw}H^95u!=n=xr3jxhCB&InJ7>zgLJg;i?Sjjd`YW!2;
z%+y=LwB+MMnSGF@iu#I%!mvt)aXzQ*NW$cHNHwjoaLtqKCHqB}LW^ozBX?`D4&h%#
zeMZ3ZumBn}5y9&odo3<n86WE!41U!tFm&A8g~@)NM3ZJ|Ku8PFpX}%!(RCzkS1D!l
z!C~f5(eg|Xa&Ankm8nSd0`z5`y<K&JIyJ!O?c#^2&$HOUyPo|WK`Z|NP<{jJPtziw
z|7!N{3%}j^PI8YmF*~wH8ix_p?@CAz8G<&#E;o3ME-xmePXCjLV4!N6O{Bchj-)hs
zv2h1+I7&=46*UPu5C2oxc`OLQHE6=oVEZ3ecxMxyPj{Yzoi}S^J$|E*{Ys^+1*a4z
z2<G{AD7x*JsY8ghqnyC`U3F>=hN$Q&SRte*^-SNZg2<}6>OzRpF91oy0{RuZU(Q0I
zvx%|9>;)-Ca9#<P7Wrw4fJ;!T3I~=XuG4qUzdn><gies%pptp`D%~itKS+c*D)6Ji
zagzx*N#WVK-OielWmXV0&Y|dWbpkXyV&u+INL-|+>L)HQt~axu0q{745Ac;s1XQKV
ze3D9I5gV5SP-J>&3U!lg1`HN>n5B6XxYpwhL^t0Z)4$`YK93vTd^7BD%<)cIm|<Bo
zSavI~^av=K6Fvm&YAAA`a`(9a&nhq_KHDFQvszY{8Kd`T5?UIAdi-8pqdSO|Mx%b8
zrsPt=&$DA44$wCzXtmXkTXzUW+mKO-d(gvEml_OMPSg1DKH3M_iD`5j<$Cr%IIWij
zf@YuWx7i1WKm|hugN6ptLW2>4e!;*%9}B-3NX+J*Nr@;5(27Zmf(TmfHsej^Bz+J1
zXKIjJ)H{thL4W<HnUsLEm?$U*g-%NJzK82ZH^2yYJP?C?{>Ouro|6&aPw=-JW8G=2
z|L4YL)^rYf7J7DOKXpTX$4$Y{-2B!jT4y^w8yh3LKRKO3-4DOshFk}N^^Q{r(0K0+
z?7w}x>(s{Diq6K)8sy)>%*g&{u>)l+-Lg~=gteW?pE`B@FE`N!F-+aE;XhjF+2|RV
z8vV2((yeA-VDO;3=^E;fhW~b=Wd5r8otQrO{Vu)M1{j(+?+^q%xpYCo<JWR(HwFa1
zR$=;6FK*ljT3b6@>jc<H>6rmQ<&ytZ2ly?bw*X)WB8(n^B4Gmxr^1bQ&=m;I4O$g{
z3m|M{tmkOyAPnMHu(Z}Q1X1GM|A+)VDP3Fz934zSl)z>N|D^`G-+>Mej|VcK+?iew
zQ3=DH4zz;i>z{Yv_l@j*?{936kxM{c7eK$1cf8wxL>>O#`+vsu*KR)te$adfTD*w(
zAStXnZk<6N3V-Vs#GB%vXZat+(EFWbk<QmU2dzIV(A1LN@j6KS6R(oiCMGxH5BFW(
z7Okhh<C1{vCoZL~KYacW>bky#{yGY`rOvN)?{5qUuFv=r=dyYZrULf%MppWuNRUWc
z8|YaIn}P0DGkwSZ(njAO$Zhr3Yw`3O1A+&F*2UjO{0`P%kK(qL;kEkfjRC=lxPRjL
z{{4PO3-*5RZ_B3LUB&?ZpJ4nk1E4L&eT~HX0Jo(|uGQCW3<z!_{A+-_T5P}h{+lP|
zwb;pjO%aqB`nRFKmOi=P&D+up*WBVa1_V$4m8)M1pWFw#O>utB@p)rF@W*n$==TlS
zKiTfzhrLbAeRqru%D;fUwXOUcHud{pw@Ib1xxQ}<2)?KC&%y5PVef<7rcu2<w7)SR
zc!t_P2f2OTa3A3|3FO_WLeu%@2)`#z{)C+MKJ0DgJ%O81fv!OCTK)eG_V+>l!8dsy
z?lvdaHJ#s$0m18y{x#fB$o=l)-sV?Qya5GWf#8Vd{~Grn@qgX#!EI`Y>++l%1A;eL
z{_7t6jMeEr@a+oxyCL^+_}9Qc;i0&Xd%LXp?to*R|26LKH<iF&R{P%vzFiM0aua6I
z6$oDA_CEsOuc5vVdAs!Ry3q8-fZ)Ja|0Cq@EBO}B$9>G(m0)*QF4*h;5%YG5<9)c>
z1vq!7bIJSv1^27i-mcH!zX>ep3Iw0^{nx<1jOy)N_UoFD8v}x~2mEWapI3m~kMQkR
z#&@4FuEGBn`mgtSx6je<B80yC1;U@s&i@+W_EF>Y7vUQNf=^}sTZErIEpH!cy|@7Z
zU4h_Oxxd2s=f{}$XXy4}%JqTSjRC<i@_vDOf3JLNpYx}!2PEiK2N)O~=qCsCwHvMA
H`mg^3F4joe

literal 49502
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%0A$pwhjXzyA0ZzErH{1@M
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
OJOEd-=rxTO#Qy`$*1Hh^

diff --git a/.mvn/wrapper/maven-wrapper.properties b/.mvn/wrapper/maven-wrapper.properties
index c315043..cd0d451 100644
--- a/.mvn/wrapper/maven-wrapper.properties
+++ b/.mvn/wrapper/maven-wrapper.properties
@@ -1 +1 @@
-distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.5.0/apache-maven-3.5.0-bin.zip
+distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.6.0/apache-maven-3.6.0-bin.zip
diff --git a/.prettierignore b/.prettierignore
new file mode 100644
index 0000000..151fcf7
--- /dev/null
+++ b/.prettierignore
@@ -0,0 +1,3 @@
+node_modules
+target
+package-lock.json
diff --git a/.prettierrc b/.prettierrc
new file mode 100644
index 0000000..6fd4aa1
--- /dev/null
+++ b/.prettierrc
@@ -0,0 +1,12 @@
+# Prettier configuration
+
+printWidth: 140
+singleQuote: true
+tabWidth: 4
+useTabs: false
+
+# js and ts rules:
+arrowParens: avoid
+
+# jsx and tsx rules:
+jsxBracketSameLine: false
diff --git a/.yo-rc.json b/.yo-rc.json
index 7abf3d9..5f5c816 100644
--- a/.yo-rc.json
+++ b/.yo-rc.json
@@ -4,7 +4,7 @@
       "packageName": "com.budderfly.sites",
       "nativeLanguage": "en"
     },
-    "jhipsterVersion": "4.14.4",
+    "jhipsterVersion": "5.7.2",
     "baseName": "sites",
     "packageName": "com.budderfly.sites",
     "packageFolder": "com/budderfly/sites",
@@ -36,7 +36,8 @@
     ],
     "clientPackageManager": "yarn",
     "skipClient": true,
-    "skipUserManagement": true
+    "skipUserManagement": true,
+    "otherModules": []
   },
   "generator-jhipster-entity-audit": {
     "auditFramework": "custom"
diff --git a/README.md b/README.md
index 90e027e..0d80ce0 100644
--- a/README.md
+++ b/README.md
@@ -1,5 +1,6 @@
 # sites
-This application was generated using JHipster 4.14.4, you can find documentation and help at [http://www.jhipster.tech/documentation-archive/v4.14.4](http://www.jhipster.tech/documentation-archive/v4.14.4).
+
+This application was generated using JHipster 5.7.2, you can find documentation and help at [https://www.jhipster.tech/documentation-archive/v5.7.2](https://www.jhipster.tech/documentation-archive/v5.7.2).
 
 This is a "microservice" application intended to be part of a microservice architecture, please refer to the [Doing microservices with JHipster][] page of the documentation for more information.
 
@@ -11,17 +12,17 @@ To start your application in the dev profile, simply run:
 
     ./mvnw
 
-
 For further instructions on how to develop with JHipster, have a look at [Using JHipster in development][].
 
+### Doing API-First development using openapi-generator
 
-### Doing API-First development using swagger-codegen
+[OpenAPI-Generator]() is configured for this application. You can generate API code from the `src/main/resources/swagger/api.yml` definition file by running:
 
-[Swagger-Codegen]() is configured for this application. You can generate API code from the `src/main/resources/swagger/api.yml` definition file by running:
 ```bash
 ./mvnw generate-sources
 ```
-Then implements the generated interfaces with `@RestController` classes.
+
+Then implements the generated delegate classes with `@Service` classes.
 
 To edit the `api.yml` definition file, you can use a tool such as [Swagger-Editor](). Start a local instance of the swagger-editor using docker by running: `docker-compose -f src/main/docker/swagger-editor.yml up -d`. The editor will then be reachable at [http://localhost:7742](http://localhost:7742).
 
@@ -37,7 +38,6 @@ To ensure everything worked, run:
 
     java -jar target/*.war
 
-
 Refer to [Using JHipster in production][] for more details.
 
 ## Testing
@@ -45,13 +45,24 @@ Refer to [Using JHipster in production][] for more details.
 To launch your application's tests, run:
 
     ./mvnw clean test
-### Other tests
 
-Performance tests are run by [Gatling][] and written in Scala. They're located in [src/test/gatling](src/test/gatling) and can be run with:
+For more information, refer to the [Running tests page][].
 
-    ./mvnw gatling:execute
+### Code quality
 
-For more information, refer to the [Running tests page][].
+Sonar is used to analyse code quality. You can start a local Sonar server (accessible on http://localhost:9001) with:
+
+```
+docker-compose -f src/main/docker/sonar.yml up -d
+```
+
+Then, run a Sonar analysis:
+
+```
+./mvnw -Pprod clean test sonar:sonar
+```
+
+For more information, refer to the [Code quality page][].
 
 ## Using Docker to simplify development (optional)
 
@@ -68,7 +79,7 @@ To stop it and remove the container, run:
 You can also fully dockerize your application and all the services that it depends on.
 To achieve this, first build a docker image of your app by running:
 
-    ./mvnw verify -Pprod dockerfile:build
+    ./mvnw package -Pprod verify jib:dockerBuild
 
 Then run:
 
@@ -80,17 +91,16 @@ For more information refer to [Using Docker and Docker-Compose][], this page als
 
 To configure CI for your project, run the ci-cd sub-generator (`jhipster ci-cd`), this will let you generate configuration files for a number of Continuous Integration systems. Consult the [Setting up Continuous Integration][] page for more information.
 
-[JHipster Homepage and latest documentation]: http://www.jhipster.tech
-[JHipster 4.14.4 archive]: http://www.jhipster.tech/documentation-archive/v4.14.4
-[Doing microservices with JHipster]: http://www.jhipster.tech/documentation-archive/v4.14.4/microservices-architecture/
-[Using JHipster in development]: http://www.jhipster.tech/documentation-archive/v4.14.4/development/
-[Service Discovery and Configuration with the JHipster-Registry]: http://www.jhipster.tech/documentation-archive/v4.14.4/microservices-architecture/#jhipster-registry
-[Using Docker and Docker-Compose]: http://www.jhipster.tech/documentation-archive/v4.14.4/docker-compose
-[Using JHipster in production]: http://www.jhipster.tech/documentation-archive/v4.14.4/production/
-[Running tests page]: http://www.jhipster.tech/documentation-archive/v4.14.4/running-tests/
-[Setting up Continuous Integration]: http://www.jhipster.tech/documentation-archive/v4.14.4/setting-up-ci/
-
-[Gatling]: http://gatling.io/
-[Swagger-Codegen]: https://github.com/swagger-api/swagger-codegen
-[Swagger-Editor]: http://editor.swagger.io
-[Doing API-First development]: http://www.jhipster.tech/documentation-archive/v4.14.4/doing-api-first-development/
+[jhipster homepage and latest documentation]: https://www.jhipster.tech
+[jhipster 5.7.2 archive]: https://www.jhipster.tech/documentation-archive/v5.7.2
+[doing microservices with jhipster]: https://www.jhipster.tech/documentation-archive/v5.7.2/microservices-architecture/
+[using jhipster in development]: https://www.jhipster.tech/documentation-archive/v5.7.2/development/
+[service discovery and configuration with the jhipster-registry]: https://www.jhipster.tech/documentation-archive/v5.7.2/microservices-architecture/#jhipster-registry
+[using docker and docker-compose]: https://www.jhipster.tech/documentation-archive/v5.7.2/docker-compose
+[using jhipster in production]: https://www.jhipster.tech/documentation-archive/v5.7.2/production/
+[running tests page]: https://www.jhipster.tech/documentation-archive/v5.7.2/running-tests/
+[code quality page]: https://www.jhipster.tech/documentation-archive/v5.7.2/code-quality/
+[setting up continuous integration]: https://www.jhipster.tech/documentation-archive/v5.7.2/setting-up-ci/
+[openapi-generator]: https://openapi-generator.tech
+[swagger-editor]: http://editor.swagger.io
+[doing api-first development]: https://www.jhipster.tech/documentation-archive/v5.7.2/doing-api-first-development/
diff --git a/mvnw b/mvnw
index a1ba1bf..5551fde 100755
--- a/mvnw
+++ b/mvnw
@@ -54,38 +54,16 @@ case "`uname`" in
   CYGWIN*) cygwin=true ;;
   MINGW*) mingw=true;;
   Darwin*) darwin=true
-           #
-           # Look for the Apple JDKs first to preserve the existing behaviour, and then look
-           # for the new JDKs provided by Oracle.
-           #
-           if [ -z "$JAVA_HOME" ] && [ -L /System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK ] ; then
-             #
-             # Apple JDKs
-             #
-             export JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home
-           fi
-
-           if [ -z "$JAVA_HOME" ] && [ -L /System/Library/Java/JavaVirtualMachines/CurrentJDK ] ; then
-             #
-             # Apple JDKs
-             #
-             export JAVA_HOME=/System/Library/Java/JavaVirtualMachines/CurrentJDK/Contents/Home
-           fi
-
-           if [ -z "$JAVA_HOME" ] && [ -L "/Library/Java/JavaVirtualMachines/CurrentJDK" ] ; then
-             #
-             # Oracle JDKs
-             #
-             export JAVA_HOME=/Library/Java/JavaVirtualMachines/CurrentJDK/Contents/Home
-           fi
-
-           if [ -z "$JAVA_HOME" ] && [ -x "/usr/libexec/java_home" ]; then
-             #
-             # Apple JDKs
-             #
-             export JAVA_HOME=`/usr/libexec/java_home`
-           fi
-           ;;
+    # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home
+    # See https://developer.apple.com/library/mac/qa/qa1170/_index.html
+    if [ -z "$JAVA_HOME" ]; then
+      if [ -x "/usr/libexec/java_home" ]; then
+        export JAVA_HOME="`/usr/libexec/java_home`"
+      else
+        export JAVA_HOME="/Library/Java/Home"
+      fi
+    fi
+    ;;
 esac
 
 if [ -z "$JAVA_HOME" ] ; then
@@ -130,7 +108,7 @@ if $cygwin ; then
     CLASSPATH=`cygpath --path --unix "$CLASSPATH"`
 fi
 
-# For Migwn, ensure paths are in UNIX format before anything is touched
+# For Mingw, ensure paths are in UNIX format before anything is touched
 if $mingw ; then
   [ -n "$M2_HOME" ] &&
     M2_HOME="`(cd "$M2_HOME"; pwd)`"
@@ -184,27 +162,28 @@ fi
 
 CLASSWORLDS_LAUNCHER=org.codehaus.plexus.classworlds.launcher.Launcher
 
-# For Cygwin, switch paths to Windows format before running java
-if $cygwin; then
-  [ -n "$M2_HOME" ] &&
-    M2_HOME=`cygpath --path --windows "$M2_HOME"`
-  [ -n "$JAVA_HOME" ] &&
-    JAVA_HOME=`cygpath --path --windows "$JAVA_HOME"`
-  [ -n "$CLASSPATH" ] &&
-    CLASSPATH=`cygpath --path --windows "$CLASSPATH"`
-fi
-
 # traverses directory structure from process work directory to filesystem root
 # first directory with .mvn subdirectory is considered project base directory
 find_maven_basedir() {
-  local basedir=$(pwd)
-  local wdir=$(pwd)
+
+  if [ -z "$1" ]
+  then
+    echo "Path not specified to find_maven_basedir"
+    return 1
+  fi
+
+  basedir="$1"
+  wdir="$1"
   while [ "$wdir" != '/' ] ; do
     if [ -d "$wdir"/.mvn ] ; then
       basedir=$wdir
       break
     fi
-    wdir=$(cd "$wdir/.."; pwd)
+    # workaround for JBEAP-8937 (on Solaris 10/Sparc)
+    if [ -d "${wdir}" ]; then
+      wdir=`cd "$wdir/.."; pwd`
+    fi
+    # end of workaround
   done
   echo "${basedir}"
 }
@@ -216,13 +195,87 @@ concat_lines() {
   fi
 }
 
-export MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-$(find_maven_basedir)}
+BASE_DIR=`find_maven_basedir "$(pwd)"`
+if [ -z "$BASE_DIR" ]; then
+  exit 1;
+fi
+
+##########################################################################################
+# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
+# This allows using the maven wrapper in projects that prohibit checking in binary data.
+##########################################################################################
+if [ -r "$BASE_DIR/.mvn/wrapper/maven-wrapper.jar" ]; then
+    if [ "$MVNW_VERBOSE" = true ]; then
+      echo "Found .mvn/wrapper/maven-wrapper.jar"
+    fi
+else
+    if [ "$MVNW_VERBOSE" = true ]; then
+      echo "Couldn't find .mvn/wrapper/maven-wrapper.jar, downloading it ..."
+    fi
+    jarUrl="https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.4.2/maven-wrapper-0.4.2.jar"
+    while IFS="=" read key value; do
+      case "$key" in (wrapperUrl) jarUrl="$value"; break ;;
+      esac
+    done < "$BASE_DIR/.mvn/wrapper/maven-wrapper.properties"
+    if [ "$MVNW_VERBOSE" = true ]; then
+      echo "Downloading from: $jarUrl"
+    fi
+    wrapperJarPath="$BASE_DIR/.mvn/wrapper/maven-wrapper.jar"
+
+    if command -v wget > /dev/null; then
+        if [ "$MVNW_VERBOSE" = true ]; then
+          echo "Found wget ... using wget"
+        fi
+        wget "$jarUrl" -O "$wrapperJarPath"
+    elif command -v curl > /dev/null; then
+        if [ "$MVNW_VERBOSE" = true ]; then
+          echo "Found curl ... using curl"
+        fi
+        curl -o "$wrapperJarPath" "$jarUrl"
+    else
+        if [ "$MVNW_VERBOSE" = true ]; then
+          echo "Falling back to using Java to download"
+        fi
+        javaClass="$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.java"
+        if [ -e "$javaClass" ]; then
+            if [ ! -e "$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class" ]; then
+                if [ "$MVNW_VERBOSE" = true ]; then
+                  echo " - Compiling MavenWrapperDownloader.java ..."
+                fi
+                # Compiling the Java class
+                ("$JAVA_HOME/bin/javac" "$javaClass")
+            fi
+            if [ -e "$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class" ]; then
+                # Running the downloader
+                if [ "$MVNW_VERBOSE" = true ]; then
+                  echo " - Running MavenWrapperDownloader.java ..."
+                fi
+                ("$JAVA_HOME/bin/java" -cp .mvn/wrapper MavenWrapperDownloader "$MAVEN_PROJECTBASEDIR")
+            fi
+        fi
+    fi
+fi
+##########################################################################################
+# End of extension
+##########################################################################################
+
+export MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-"$BASE_DIR"}
+if [ "$MVNW_VERBOSE" = true ]; then
+  echo $MAVEN_PROJECTBASEDIR
+fi
 MAVEN_OPTS="$(concat_lines "$MAVEN_PROJECTBASEDIR/.mvn/jvm.config") $MAVEN_OPTS"
 
-# Provide a "standardized" way to retrieve the CLI args that will
-# work with both Windows and non-Windows executions.
-MAVEN_CMD_LINE_ARGS="$MAVEN_CONFIG $@"
-export MAVEN_CMD_LINE_ARGS
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin; then
+  [ -n "$M2_HOME" ] &&
+    M2_HOME=`cygpath --path --windows "$M2_HOME"`
+  [ -n "$JAVA_HOME" ] &&
+    JAVA_HOME=`cygpath --path --windows "$JAVA_HOME"`
+  [ -n "$CLASSPATH" ] &&
+    CLASSPATH=`cygpath --path --windows "$CLASSPATH"`
+  [ -n "$MAVEN_PROJECTBASEDIR" ] &&
+    MAVEN_PROJECTBASEDIR=`cygpath --path --windows "$MAVEN_PROJECTBASEDIR"`
+fi
 
 WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain
 
@@ -230,4 +283,4 @@ exec "$JAVACMD" \
   $MAVEN_OPTS \
   -classpath "$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar" \
   "-Dmaven.home=${M2_HOME}" "-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}" \
-  ${WRAPPER_LAUNCHER} "$@"
+  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG "$@"
diff --git a/mvnw.cmd b/mvnw.cmd
index 2b934e8..e5cfb0a 100644
--- a/mvnw.cmd
+++ b/mvnw.cmd
@@ -35,6 +35,8 @@
 
 @REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'
 @echo off
+@REM set title of command window
+title %0
 @REM enable echoing my setting MAVEN_BATCH_ECHO to 'on'
 @if "%MAVEN_BATCH_ECHO%" == "on"  echo %MAVEN_BATCH_ECHO%
 
@@ -80,8 +82,6 @@ goto error
 
 :init
 
-set MAVEN_CMD_LINE_ARGS=%*
-
 @REM Find the project base dir, i.e. the directory that contains the folder ".mvn".
 @REM Fallback to current working directory if not found.
 
@@ -117,11 +117,27 @@ for /F "usebackq delims=" %%a in ("%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config") do s
 :endReadAdditionalConfig
 
 SET MAVEN_JAVA_EXE="%JAVA_HOME%\bin\java.exe"
-
-set WRAPPER_JAR="".\.mvn\wrapper\maven-wrapper.jar""
+set WRAPPER_JAR="%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.jar"
 set WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain
 
-%MAVEN_JAVA_EXE% %JVM_CONFIG_MAVEN_PROPS% %MAVEN_OPTS% %MAVEN_DEBUG_OPTS% -classpath %WRAPPER_JAR% "-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%" %WRAPPER_LAUNCHER% %MAVEN_CMD_LINE_ARGS%
+set DOWNLOAD_URL="https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.4.2/maven-wrapper-0.4.2.jar"
+FOR /F "tokens=1,2 delims==" %%A IN (%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.properties) DO (
+	IF "%%A"=="wrapperUrl" SET DOWNLOAD_URL=%%B 
+)
+
+@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
+@REM This allows using the maven wrapper in projects that prohibit checking in binary data.
+if exist %WRAPPER_JAR% (
+    echo Found %WRAPPER_JAR%
+) else (
+    echo Couldn't find %WRAPPER_JAR%, downloading it ...
+	echo Downloading from: %DOWNLOAD_URL%
+    powershell -Command "(New-Object Net.WebClient).DownloadFile('%DOWNLOAD_URL%', '%WRAPPER_JAR%')"
+    echo Finished downloading %WRAPPER_JAR%
+)
+@REM End of extension
+
+%MAVEN_JAVA_EXE% %JVM_CONFIG_MAVEN_PROPS% %MAVEN_OPTS% %MAVEN_DEBUG_OPTS% -classpath %WRAPPER_JAR% "-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%" %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*
 if ERRORLEVEL 1 goto error
 goto end
 
@@ -142,4 +158,4 @@ if "%MAVEN_BATCH_PAUSE%" == "on" pause
 
 if "%MAVEN_TERMINATE_CMD%" == "on" exit %ERROR_CODE%
 
-exit /B %ERROR_CODE%
\ No newline at end of file
+exit /B %ERROR_CODE%
diff --git a/package.json b/package.json
index ba1c5f4..a0254d5 100644
--- a/package.json
+++ b/package.json
@@ -1,16 +1,16 @@
 {
-  "name": "sites",
-  "version": "0.0.0",
-  "description": "Description for sites",
-  "private": true,
-  "license": "UNLICENSED",
-  "cacheDirectories": [
-    "node_modules"
-  ],
-  "devDependencies": {
-    "generator-jhipster": "4.14.4"
-  },
-  "engines": {
-    "node": ">=6.9.0"
-  }
+    "name": "sites",
+    "version": "0.0.0",
+    "description": "Description for sites",
+    "private": true,
+    "license": "UNLICENSED",
+    "cacheDirectories": [
+        "node_modules"
+    ],
+    "devDependencies": {
+        "generator-jhipster": "5.7.2"
+    },
+    "engines": {
+        "node": ">=8.9.0"
+    }
 }
diff --git a/pom.xml b/pom.xml
index 9bc1c12..528b4bd 100644
--- a/pom.xml
+++ b/pom.xml
@@ -8,13 +8,19 @@
     <packaging>war</packaging>
     <name>Sites</name>
 
+    <repositories>
+        <!-- jhipster-needle-maven-repository -->
+    </repositories>
+
+    <!-- jhipster-needle-distribution-management -->
+
     <properties>
         <!-- Build properties -->
         <maven.version>3.0.0</maven.version>
         <java.version>1.8</java.version>
-        <scala.version>2.12.1</scala.version>
-        <node.version>v8.9.4</node.version>
-        <yarn.version>v1.3.2</yarn.version>
+        <scala.version>2.12.6</scala.version>
+        <node.version>v10.14.1</node.version>
+        <yarn.version>v1.12.3</yarn.version>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
         <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
         <project.testresult.directory>${project.build.directory}/test-results</project.testresult.directory>
@@ -27,57 +33,60 @@
         <!-- These remain empty unless the corresponding profile is active -->
         <profile.no-liquibase />
         <profile.swagger />
+        <profile.tls />
 
         <!-- Dependency versions -->
-        <jhipster-dependencies.version>0.1.12</jhipster-dependencies.version>
+        <jhipster-dependencies.version>2.0.29</jhipster-dependencies.version>
         <!-- The spring-boot version should match the one managed by
         https://mvnrepository.com/artifact/io.github.jhipster/jhipster-dependencies/${jhipster-dependencies.version} -->
-        <spring-boot.version>1.5.13.RELEASE</spring-boot.version>
+        <spring-boot.version>2.0.7.RELEASE</spring-boot.version>
         <!-- The hibernate version should match the one managed by
-        https://mvnrepository.com/artifact/io.github.jhipster/jhipster-dependencies/${jhipster-dependencies.version} -->
-        <hibernate.version>5.2.12.Final</hibernate.version>
+        https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-dependencies/${spring-boot.version} -->
+        <hibernate.version>5.2.17.Final</hibernate.version>
         <!-- The javassist version should match the one managed by
         https://mvnrepository.com/artifact/org.hibernate/hibernate-core/${hibernate.version} -->
-        <javassist.version>3.20.0-GA</javassist.version>
+        <javassist.version>3.22.0-GA</javassist.version>
         <!-- The liquibase version should match the one managed by
         https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-dependencies/${spring-boot.version} -->
         <liquibase.version>3.5.5</liquibase.version>
         <liquibase-hibernate5.version>3.6</liquibase-hibernate5.version>
-        <validation-api.version>1.1.0.Final</validation-api.version>
+        <validation-api.version>2.0.1.Final</validation-api.version>
         <mapstruct.version>1.2.0.Final</mapstruct.version>
 
         <!-- Plugin versions -->
-        <maven-clean-plugin.version>2.6.1</maven-clean-plugin.version>
-        <maven-compiler-plugin.version>3.7.0</maven-compiler-plugin.version>
+        <maven-clean-plugin.version>3.1.0</maven-clean-plugin.version>
+        <maven-compiler-plugin.version>3.8.0</maven-compiler-plugin.version>
         <maven-eclipse-plugin.version>2.10</maven-eclipse-plugin.version>
-        <maven-enforcer-plugin.version>3.0.0-M1</maven-enforcer-plugin.version>
-        <maven-resources-plugin.version>3.0.1</maven-resources-plugin.version>
-        <maven-surefire-plugin.version>2.18.1</maven-surefire-plugin.version>
-        <maven-war-plugin.version>2.6</maven-war-plugin.version>
-        <dockerfile-maven-plugin.version>1.3.4</dockerfile-maven-plugin.version>
-        <gatling-maven-plugin.version>2.2.1</gatling-maven-plugin.version>
-        <jacoco-maven-plugin.version>0.7.9</jacoco-maven-plugin.version>
-        <scala-maven-plugin.version>3.2.2</scala-maven-plugin.version>
-        <sonar-maven-plugin.version>3.2</sonar-maven-plugin.version>
-        <swagger-codegen-maven-plugin.version>2.2.3</swagger-codegen-maven-plugin.version>
+        <maven-enforcer-plugin.version>3.0.0-M2</maven-enforcer-plugin.version>
+        <maven-resources-plugin.version>3.1.0</maven-resources-plugin.version>
+        <maven-surefire-plugin.version>2.22.1</maven-surefire-plugin.version>
+        <maven-war-plugin.version>3.2.2</maven-war-plugin.version>
+        <jib-maven-plugin.version>0.9.11</jib-maven-plugin.version>
+        <jacoco-maven-plugin.version>0.8.2</jacoco-maven-plugin.version>
+        <lifecycle-mapping.version>1.0.0</lifecycle-mapping.version>
+        <scala-maven-plugin.version>3.4.2</scala-maven-plugin.version>
+        <sonar-maven-plugin.version>3.5.0.1254</sonar-maven-plugin.version>
+        <openapi-generator-maven-plugin.version>3.3.0</openapi-generator-maven-plugin.version>
+        <git-commit-id-plugin.version>2.2.5</git-commit-id-plugin.version>
 
         <!-- Sonar properties -->
+        <sonar.host.url>http://localhost:9001</sonar.host.url>
         <sonar.exclusions>src/main/webapp/content/**/*.*, src/main/webapp/i18n/*.js, target/www/**/*.*</sonar.exclusions>
-        <sonar.issue.ignore.multicriteria>S3437,UndocumentedApi,BoldAndItalicTagsCheck</sonar.issue.ignore.multicriteria>
-        <!-- Rule https://sonarqube.com/coding_rules#rule_key=Web%3ABoldAndItalicTagsCheck is ignored. Even if we agree that using the "i" tag is an awful practice, this is what is recommended by http://fontawesome.io/examples/ -->
+        <sonar.issue.ignore.multicriteria>S3437,S4684,UndocumentedApi,BoldAndItalicTagsCheck</sonar.issue.ignore.multicriteria>
+        <!-- Rule https://sonarcloud.io/coding_rules?open=Web%3ABoldAndItalicTagsCheck&rule_key=Web%3ABoldAndItalicTagsCheck is ignored. Even if we agree that using the "i" tag is an awful practice, this is what is recommended by http://fontawesome.io/examples/ -->
         <sonar.issue.ignore.multicriteria.BoldAndItalicTagsCheck.resourceKey>src/main/webapp/app/**/*.*</sonar.issue.ignore.multicriteria.BoldAndItalicTagsCheck.resourceKey>
         <sonar.issue.ignore.multicriteria.BoldAndItalicTagsCheck.ruleKey>Web:BoldAndItalicTagsCheck</sonar.issue.ignore.multicriteria.BoldAndItalicTagsCheck.ruleKey>
-        <!-- Rule https://sonarqube.com/coding_rules#rule_key=squid%3AS3437 is ignored, as a JPA-managed field cannot be transient -->
+        <!-- Rule https://sonarcloud.io/coding_rules?open=squid%3AS3437&rule_key=squid%3AS3437 is ignored, as a JPA-managed field cannot be transient -->
         <sonar.issue.ignore.multicriteria.S3437.resourceKey>src/main/java/**/*</sonar.issue.ignore.multicriteria.S3437.resourceKey>
         <sonar.issue.ignore.multicriteria.S3437.ruleKey>squid:S3437</sonar.issue.ignore.multicriteria.S3437.ruleKey>
-        <!-- Rule http://sonarqube.com/coding_rules#rule_key=squid%3AUndocumentedApi is ignored, as we want to follow "clean code" guidelines and classes, methods and arguments names should be self-explanatory -->
+        <!-- Rule https://sonarcloud.io/coding_rules?open=squid%3AUndocumentedApi&rule_key=squid%3AUndocumentedApi is ignored, as we want to follow "clean code" guidelines and classes, methods and arguments names should be self-explanatory -->
         <sonar.issue.ignore.multicriteria.UndocumentedApi.resourceKey>src/main/java/**/*</sonar.issue.ignore.multicriteria.UndocumentedApi.resourceKey>
         <sonar.issue.ignore.multicriteria.UndocumentedApi.ruleKey>squid:UndocumentedApi</sonar.issue.ignore.multicriteria.UndocumentedApi.ruleKey>
-        <sonar.jacoco.itReportPath>${project.testresult.directory}/coverage/jacoco/jacoco-it.exec</sonar.jacoco.itReportPath>
-        <sonar.jacoco.reportPath>${project.testresult.directory}/coverage/jacoco/jacoco.exec</sonar.jacoco.reportPath>
+        <!-- Rule https://sonarcloud.io/coding_rules?open=squid%3AS4684&rule_key=squid%3AS4684 -->
+        <sonar.issue.ignore.multicriteria.S4684.resourceKey>src/main/java/**/*</sonar.issue.ignore.multicriteria.S4684.resourceKey>
+        <sonar.issue.ignore.multicriteria.S4684.ruleKey>squid:S4684</sonar.issue.ignore.multicriteria.S4684.ruleKey>
+        <sonar.jacoco.reportPaths>${project.testresult.directory}/coverage/jacoco/jacoco.exec</sonar.jacoco.reportPaths>
         <sonar.java.codeCoveragePlugin>jacoco</sonar.java.codeCoveragePlugin>
-        <sonar.javascript.jstestdriver.reportsPath>${project.testresult.directory}/karma</sonar.javascript.jstestdriver.reportsPath>
-        <sonar.typescript.lcov.reportPaths>${project.testresult.directory}/coverage/report-lcov/lcov.info</sonar.typescript.lcov.reportPaths>
         <sonar.sources>${project.basedir}/src/main/</sonar.sources>
         <sonar.surefire.reportsPath>${project.testresult.directory}/surefire-reports</sonar.surefire.reportsPath>
         <sonar.tests>${project.basedir}/src/test/</sonar.tests>
@@ -100,12 +109,13 @@
 
     <dependencies>
         <dependency>
-            <groupId>org.springframework.boot</groupId>
-            <artifactId>spring-boot-starter-cache</artifactId>
+            <groupId>io.github.jhipster</groupId>
+            <artifactId>jhipster-framework</artifactId>
         </dependency>
+
         <dependency>
-            <groupId>io.github.jhipster</groupId>
-            <artifactId>jhipster</artifactId>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-cache</artifactId>
         </dependency>
         <dependency>
             <groupId>io.dropwizard.metrics</groupId>
@@ -120,6 +130,18 @@
             <artifactId>metrics-json</artifactId>
         </dependency>
         <dependency>
+            <groupId>io.prometheus</groupId>
+            <artifactId>simpleclient</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>io.prometheus</groupId>
+            <artifactId>simpleclient_dropwizard</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>io.prometheus</groupId>
+            <artifactId>simpleclient_servlet</artifactId>
+        </dependency>
+        <dependency>
             <groupId>io.dropwizard.metrics</groupId>
             <artifactId>metrics-jvm</artifactId>
         </dependency>
@@ -144,10 +166,6 @@
             <artifactId>jackson-datatype-jsr310</artifactId>
         </dependency>
         <dependency>
-            <groupId>com.fasterxml.jackson.datatype</groupId>
-            <artifactId>jackson-datatype-json-org</artifactId>
-        </dependency>
-        <dependency>
             <groupId>com.fasterxml.jackson.module</groupId>
             <artifactId>jackson-module-afterburner</artifactId>
         </dependency>
@@ -203,15 +221,6 @@
             <artifactId>commons-lang3</artifactId>
         </dependency>
         <dependency>
-            <groupId>io.gatling.highcharts</groupId>
-            <artifactId>gatling-charts-highcharts</artifactId>
-            <scope>test</scope>
-        </dependency>
-        <dependency>
-            <groupId>com.jcraft</groupId>
-            <artifactId>jzlib</artifactId>
-        </dependency>
-        <dependency>
             <groupId>javax.cache</groupId>
             <artifactId>cache-api</artifactId>
         </dependency>
@@ -226,10 +235,15 @@
         </dependency>
         <dependency>
             <groupId>org.hibernate</groupId>
-            <artifactId>hibernate-envers</artifactId>
+            <artifactId>hibernate-jpamodelgen</artifactId>
+            <scope>provided</scope>
         </dependency>
         <dependency>
             <groupId>org.hibernate</groupId>
+            <artifactId>hibernate-envers</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.hibernate.validator</groupId>
             <artifactId>hibernate-validator</artifactId>
         </dependency>
         <dependency>
@@ -243,28 +257,24 @@
         <dependency>
             <groupId>org.mapstruct</groupId>
             <artifactId>mapstruct-jdk8</artifactId>
-            <version>${mapstruct.version}</version>
         </dependency>
         <dependency>
-            <groupId>org.springframework</groupId>
-            <artifactId>spring-context-support</artifactId>
-        </dependency>
-        <dependency>
-            <groupId>org.springframework.boot</groupId>
-            <artifactId>spring-boot-actuator</artifactId>
+            <groupId>org.mapstruct</groupId>
+            <artifactId>mapstruct-processor</artifactId>
+            <scope>provided</scope>
         </dependency>
         <dependency>
             <groupId>org.springframework.boot</groupId>
-            <artifactId>spring-boot-autoconfigure</artifactId>
+            <artifactId>spring-boot-configuration-processor</artifactId>
+            <scope>provided</scope>
         </dependency>
         <dependency>
             <groupId>org.springframework.boot</groupId>
-            <artifactId>spring-boot-configuration-processor</artifactId>
-            <optional>true</optional>
+            <artifactId>spring-boot-loader-tools</artifactId>
         </dependency>
         <dependency>
             <groupId>org.springframework.boot</groupId>
-            <artifactId>spring-boot-loader-tools</artifactId>
+            <artifactId>spring-boot-starter-actuator</artifactId>
         </dependency>
         <dependency>
             <groupId>org.springframework.boot</groupId>
@@ -278,10 +288,29 @@
             <groupId>org.springframework.boot</groupId>
             <artifactId>spring-boot-starter-data-elasticsearch</artifactId>
         </dependency>
+        <!-- Spring Data Jest dependencies for Elasticsearch -->
         <dependency>
-            <groupId>net.java.dev.jna</groupId>
-            <artifactId>jna</artifactId>
+            <groupId>com.github.vanroy</groupId>
+            <artifactId>spring-boot-starter-data-jest</artifactId>
+            <exclusions>
+                <exclusion>
+                    <groupId>commons-logging</groupId>
+                    <artifactId>commons-logging</artifactId>
+                </exclusion>
+            </exclusions>
         </dependency>
+        <!-- log4j needed to create embedded elasticsearch instance -->
+        <dependency>
+            <groupId>org.apache.logging.log4j</groupId>
+            <artifactId>log4j-api</artifactId>
+            <version>2.7</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.logging.log4j</groupId>
+            <artifactId>log4j-core</artifactId>
+            <version>2.7</version>
+        </dependency>
+        <!-- end of Spring Data Jest dependencies -->
         <dependency>
             <groupId>org.springframework.boot</groupId>
             <artifactId>spring-boot-starter-logging</artifactId>
@@ -296,26 +325,26 @@
         </dependency>
         <dependency>
             <groupId>org.springframework.boot</groupId>
-            <artifactId>spring-boot-starter-test</artifactId>
-            <scope>test</scope>
+            <artifactId>spring-boot-starter-thymeleaf</artifactId>
         </dependency>
         <dependency>
-            <groupId>org.springframework.security</groupId>
-            <artifactId>spring-security-test</artifactId>
-            <scope>test</scope>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-web</artifactId>
         </dependency>
         <dependency>
             <groupId>org.springframework.boot</groupId>
-            <artifactId>spring-boot-test</artifactId>
+            <artifactId>spring-boot-starter-test</artifactId>
             <scope>test</scope>
         </dependency>
         <dependency>
             <groupId>org.springframework.boot</groupId>
-            <artifactId>spring-boot-starter-thymeleaf</artifactId>
+            <artifactId>spring-boot-test</artifactId>
+            <scope>test</scope>
         </dependency>
         <dependency>
-            <groupId>org.springframework.boot</groupId>
-            <artifactId>spring-boot-starter-web</artifactId>
+            <groupId>org.springframework.security</groupId>
+            <artifactId>spring-security-test</artifactId>
+            <scope>test</scope>
         </dependency>
         <dependency>
             <groupId>org.zalando</groupId>
@@ -336,15 +365,11 @@
         </dependency>
         <dependency>
             <groupId>org.springframework.cloud</groupId>
-            <artifactId>spring-cloud-starter-ribbon</artifactId>
+            <artifactId>spring-cloud-starter-netflix-ribbon</artifactId>
         </dependency>
         <dependency>
             <groupId>org.springframework.cloud</groupId>
-            <artifactId>spring-cloud-starter-hystrix</artifactId>
-        </dependency>
-        <dependency>
-            <groupId>org.springframework.cloud</groupId>
-            <artifactId>spring-cloud-starter-spectator</artifactId>
+            <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
         </dependency>
         <dependency>
             <groupId>org.springframework.retry</groupId>
@@ -352,7 +377,7 @@
         </dependency>
         <dependency>
             <groupId>org.springframework.cloud</groupId>
-            <artifactId>spring-cloud-starter-eureka</artifactId>
+            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
         </dependency>
         <dependency>
             <groupId>org.springframework.cloud</groupId>
@@ -364,11 +389,11 @@
         </dependency>
         <dependency>
             <groupId>org.springframework.cloud</groupId>
-            <artifactId>spring-cloud-starter-feign</artifactId>
+            <artifactId>spring-cloud-starter-openfeign</artifactId>
         </dependency>
         <dependency>
-            <groupId>org.springframework.cloud</groupId>
-            <artifactId>spring-cloud-spring-service-connector</artifactId>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-cloud-connectors</artifactId>
         </dependency>
         <!-- Security -->
         <dependency>
@@ -382,36 +407,8 @@
         <defaultGoal>spring-boot:run</defaultGoal>
         <plugins>
             <plugin>
-                <groupId>io.gatling</groupId>
-                <artifactId>gatling-maven-plugin</artifactId>
-                <version>${gatling-maven-plugin.version}</version>
-                <configuration>
-                    <configFolder>src/test/gatling/conf</configFolder>
-                    <dataFolder>src/test/gatling/user-files/data</dataFolder>
-                    <resultsFolder>target/gatling/results/${maven.build.timestamp}/</resultsFolder>
-                    <bodiesFolder>src/test/gatling/user-files/bodies</bodiesFolder>
-                    <simulationsFolder>src/test/gatling/user-files/simulations</simulationsFolder>
-                    <!-- If uncommented, these arguments below will be applied to all your gatling tests -->
-                    <!--<jvmArgs>
-                        <jvmArg>-Dusers=100</jvmArg>
-                        <jvmArg>-Dramp=1</jvmArg>
-                    </jvmArgs>-->
-                    <!--
-                    This will run multiple simulations one by one. Useful when doing Gatling
-                    tests in CI.
-                    -->
-                    <runMultipleSimulations>true</runMultipleSimulations>
-                    <!--
-                    To run only one simulation, you need to disable the "runMultipleSimulations"
-                    above, and write the name of your simulation below.
-                    -->
-                    <!--<simulationClass>WriteTheNameOfYourGatlingSimulation</simulationClass>-->
-                </configuration>
-            </plugin>
-            <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-compiler-plugin</artifactId>
-                <version>${maven-compiler-plugin.version}</version>
                 <configuration>
                     <annotationProcessorPaths>
                         <path>
@@ -432,180 +429,34 @@
             <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-eclipse-plugin</artifactId>
-                <version>${maven-eclipse-plugin.version}</version>
-                <configuration>
-                    <downloadSources>true</downloadSources>
-                    <downloadJavadocs>true</downloadJavadocs>
-                </configuration>
             </plugin>
             <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-enforcer-plugin</artifactId>
-                <version>${maven-enforcer-plugin.version}</version>
-                <executions>
-                    <execution>
-                        <id>enforce-versions</id>
-                        <goals>
-                            <goal>enforce</goal>
-                        </goals>
-                    </execution>
-                </executions>
-                <configuration>
-                    <rules>
-                        <requireMavenVersion>
-                            <message>You are running an older version of Maven. JHipster requires at least Maven ${maven.version}</message>
-                            <version>[${maven.version},)</version>
-                        </requireMavenVersion>
-                        <requireJavaVersion>
-                            <!-- Until JHipster supports JDK 9 -->
-                            <message>You are running an incompatible version of Java. JHipster requires JDK ${java.version}</message>
-                            <version>[1.8,1.9)</version>
-                        </requireJavaVersion>
-                    </rules>
-                </configuration>
             </plugin>
             <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-resources-plugin</artifactId>
-                <version>${maven-resources-plugin.version}</version>
-                <executions>
-                    <execution>
-                        <id>default-resources</id>
-                        <phase>validate</phase>
-                        <goals>
-                            <goal>copy-resources</goal>
-                        </goals>
-                        <configuration>
-                            <outputDirectory>target/classes</outputDirectory>
-                            <useDefaultDelimiters>false</useDefaultDelimiters>
-                            <delimiters>
-                                <delimiter>#</delimiter>
-                            </delimiters>
-                            <resources>
-                                <resource>
-                                    <directory>src/main/resources/</directory>
-                                    <filtering>true</filtering>
-                                    <includes>
-                                        <include>config/*.yml</include>
-                                    </includes>
-                                </resource>
-                                <resource>
-                                    <directory>src/main/resources/</directory>
-                                    <filtering>false</filtering>
-                                    <excludes>
-                                        <exclude>config/*.yml</exclude>
-                                    </excludes>
-                                </resource>
-                            </resources>
-                        </configuration>
-                    </execution>
-                    <execution>
-                        <id>docker-resources</id>
-                        <phase>validate</phase>
-                        <goals>
-                            <goal>copy-resources</goal>
-                        </goals>
-                        <configuration>
-                            <outputDirectory>target/</outputDirectory>
-                            <resources>
-                                <resource>
-                                    <directory>src/main/docker/</directory>
-                                    <filtering>false</filtering>
-                                    <excludes>
-                                        <exclude>**/*.yml</exclude>
-                                    </excludes>
-                                </resource>
-                            </resources>
-                        </configuration>
-                    </execution>
-                </executions>
             </plugin>
             <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-surefire-plugin</artifactId>
-                <version>${maven-surefire-plugin.version}</version>
-                <configuration>
-                    <!-- Force alphabetical order to have a reproducible build -->
-                    <runOrder>alphabetical</runOrder>
-                </configuration>
             </plugin>
             <plugin>
                 <groupId>org.jacoco</groupId>
                 <artifactId>jacoco-maven-plugin</artifactId>
-                <version>${jacoco-maven-plugin.version}</version>
-                <executions>
-                    <execution>
-                        <id>pre-unit-tests</id>
-                        <goals>
-                            <goal>prepare-agent</goal>
-                        </goals>
-                        <configuration>
-                            <!-- Sets the path to the file which contains the execution data. -->
-                            <destFile>${project.testresult.directory}/coverage/jacoco/jacoco.exec</destFile>
-                        </configuration>
-                    </execution>
-                    <!-- Ensures that the code coverage report for unit tests is created after unit tests have been run -->
-                    <execution>
-                        <id>post-unit-test</id>
-                        <phase>test</phase>
-                        <goals>
-                            <goal>report</goal>
-                        </goals>
-                        <configuration>
-                            <dataFile>${project.testresult.directory}/coverage/jacoco/jacoco.exec</dataFile>
-                            <outputDirectory>${project.testresult.directory}/coverage/jacoco</outputDirectory>
-                        </configuration>
-                    </execution>
-                </executions>
             </plugin>
             <plugin>
                 <groupId>org.sonarsource.scanner.maven</groupId>
                 <artifactId>sonar-maven-plugin</artifactId>
-                <version>${sonar-maven-plugin.version}</version>
             </plugin>
             <plugin>
                 <groupId>org.liquibase</groupId>
                 <artifactId>liquibase-maven-plugin</artifactId>
-                <version>${liquibase.version}</version>
-                <configuration>
-                    <changeLogFile>src/main/resources/config/liquibase/master.xml</changeLogFile>
-                    <diffChangeLogFile>src/main/resources/config/liquibase/changelog/${maven.build.timestamp}_changelog.xml</diffChangeLogFile>
-                    <driver>com.mysql.jdbc.Driver</driver>
-                    <url>jdbc:mysql://localhost:3306/sites</url>
-                    <defaultSchemaName>sites</defaultSchemaName>
-                    <username>root</username>
-                    <password></password>
-                    <referenceUrl>hibernate:spring:com.budderfly.sites.domain?dialect=org.hibernate.dialect.MySQL5InnoDBDialect&amp;hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&amp;hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy</referenceUrl>
-                    <verbose>true</verbose>
-                    <logging>debug</logging>
-                </configuration>
-                <dependencies>
-                    <dependency>
-                        <groupId>org.javassist</groupId>
-                        <artifactId>javassist</artifactId>
-                        <version>${javassist.version}</version>
-                    </dependency>
-                    <dependency>
-                        <groupId>org.liquibase.ext</groupId>
-                        <artifactId>liquibase-hibernate5</artifactId>
-                        <version>${liquibase-hibernate5.version}</version>
-                    </dependency>
-                    <dependency>
-                        <groupId>org.springframework.boot</groupId>
-                        <artifactId>spring-boot-starter-data-jpa</artifactId>
-                        <version>${spring-boot.version}</version>
-                    </dependency>
-                    <dependency>
-                        <groupId>javax.validation</groupId>
-                        <artifactId>validation-api</artifactId>
-                        <version>${validation-api.version}</version>
-                    </dependency>
-                </dependencies>
             </plugin>
             <plugin>
                 <groupId>org.springframework.boot</groupId>
                 <artifactId>spring-boot-maven-plugin</artifactId>
-                <version>${spring-boot.version}</version>
                 <executions>
                     <execution>
                         <goals>
@@ -624,91 +475,318 @@
                 </configuration>
             </plugin>
             <plugin>
-                <groupId>com.spotify</groupId>
-                <artifactId>dockerfile-maven-plugin</artifactId>
-                <version>${dockerfile-maven-plugin.version}</version>
-                <!--
-                Uncomment the section below to build the docker image with mvn package and and push it with mvn deploy
-                <executions>
-                    <execution>
-                    <id>default</id>
-                    <goals>
-                        <goal>build</goal>
-                        <goal>push</goal>
-                    </goals>
-                    </execution>
-                </executions>
-                -->
-                <configuration>
-                    <repository>sites</repository>
-                    <tag>latest</tag>
-                    <contextDirectory>${project.build.directory}</contextDirectory>
-                </configuration>
+                <groupId>com.google.cloud.tools</groupId>
+                <artifactId>jib-maven-plugin</artifactId>
             </plugin>
             <plugin>
                 <!--
-                    Plugin that provides API-first development using swagger-codegen to
-                    generate Spring-MVC endpoint stubs at compile time from a swagger definition file
+                    Plugin that provides API-first development using openapi-generator to
+                    generate Spring-MVC endpoint stubs at compile time from an OpenAPI definition file
                 -->
-                <groupId>io.swagger</groupId>
-                <artifactId>swagger-codegen-maven-plugin</artifactId>
-                <version>${swagger-codegen-maven-plugin.version}</version>
-                <executions>
-                    <execution>
-                        <goals>
-                            <goal>generate</goal>
-                        </goals>
-                        <configuration>
-                            <inputSpec>${project.basedir}/src/main/resources/swagger/api.yml</inputSpec>
-                            <language>spring</language>
-                            <apiPackage>com.budderfly.sites.web.api</apiPackage>
-                            <modelPackage>com.budderfly.sites.web.api.model</modelPackage>
-                            <generateSupportingFiles>false</generateSupportingFiles>
-                            <configOptions>
-                                <interfaceOnly>true</interfaceOnly>
-                                <java8>true</java8>
-                            </configOptions>
-                        </configuration>
-                    </execution>
-                </executions>
+                <groupId>org.openapitools</groupId>
+                <artifactId>openapi-generator-maven-plugin</artifactId>
             </plugin>
             <!-- jhipster-needle-maven-add-plugin -->
         </plugins>
         <pluginManagement>
             <plugins>
-                <!--
-                    This plugin's configuration is used to store Eclipse m2e settings only.
-                    It has no influence on the Maven build itself.
-                    Remove when the m2e plugin can correctly bind to Maven lifecycle
-                -->
                 <plugin>
-                    <groupId>org.eclipse.m2e</groupId>
-                    <artifactId>lifecycle-mapping</artifactId>
-                    <version>1.0.0</version>
+                    <groupId>org.apache.maven.plugins</groupId>
+                    <artifactId>maven-compiler-plugin</artifactId>
+                    <version>${maven-compiler-plugin.version}</version>
+                </plugin>
+                <plugin>
+                    <groupId>pl.project13.maven</groupId>
+                    <artifactId>git-commit-id-plugin</artifactId>
+                    <version>${git-commit-id-plugin.version}</version>
+                        <executions>
+                            <execution>
+                                <goals>
+                                    <goal>revision</goal>
+                                </goals>
+                            </execution>
+                        </executions>
+                        <configuration>
+                            <failOnNoGitDirectory>false</failOnNoGitDirectory>
+                            <generateGitPropertiesFile>true</generateGitPropertiesFile>
+                            <includeOnlyProperties>
+                                <includeOnlyProperty>^git.commit.id.abbrev$</includeOnlyProperty>
+                                <includeOnlyProperty>^git.commit.id.describe$</includeOnlyProperty>
+                                <includeOnlyProperty>^git.branch$</includeOnlyProperty>
+                            </includeOnlyProperties>
+                    </configuration>
+                </plugin>
+                <plugin>
+                    <groupId>org.jacoco</groupId>
+                    <artifactId>jacoco-maven-plugin</artifactId>
+                    <version>${jacoco-maven-plugin.version}</version>
+                    <executions>
+                        <execution>
+                            <id>pre-unit-tests</id>
+                            <goals>
+                                <goal>prepare-agent</goal>
+                            </goals>
+                            <configuration>
+                                <!-- Sets the path to the file which contains the execution data. -->
+                                <destFile>${project.testresult.directory}/coverage/jacoco/jacoco.exec</destFile>
+                            </configuration>
+                        </execution>
+                        <!-- Ensures that the code coverage report for unit tests is created after unit tests have been run -->
+                        <execution>
+                            <id>post-unit-test</id>
+                            <phase>test</phase>
+                            <goals>
+                                <goal>report</goal>
+                            </goals>
+                            <configuration>
+                                <dataFile>${project.testresult.directory}/coverage/jacoco/jacoco.exec</dataFile>
+                                <outputDirectory>${project.testresult.directory}/coverage/jacoco</outputDirectory>
+                            </configuration>
+                        </execution>
+                    </executions>
+                </plugin>
+                <plugin>
+                    <groupId>com.google.cloud.tools</groupId>
+                    <artifactId>jib-maven-plugin</artifactId>
+                    <version>${jib-maven-plugin.version}</version>
+                    <configuration>
+                      <from>
+                          <image>openjdk:8-jre-alpine</image>
+                      </from>
+                      <to>
+                          <image>sites:latest</image>
+                      </to>
+                      <container>
+                          <entrypoint>
+                              <shell>sh</shell>
+                              <option>-c</option>
+                              <arg>chmod +x /entrypoint.sh &amp;&amp; sync &amp;&amp; /entrypoint.sh</arg>
+                          </entrypoint>
+                          <ports>
+                              <port>8082</port>
+                              <port>5701/udp</port>
+                          </ports>
+                          <environment>
+                              <SPRING_OUTPUT_ANSI_ENABLED>ALWAYS</SPRING_OUTPUT_ANSI_ENABLED>
+                              <JHIPSTER_SLEEP>0</JHIPSTER_SLEEP>
+                          </environment>
+                          <useCurrentTimestamp>true</useCurrentTimestamp>
+                      </container>
+                  </configuration>
+                </plugin>
+                <plugin>
+                    <groupId>org.liquibase</groupId>
+                    <artifactId>liquibase-maven-plugin</artifactId>
+                    <version>${liquibase.version}</version>
+                    <configuration>
+                        <changeLogFile>src/main/resources/config/liquibase/master.xml</changeLogFile>
+                        <diffChangeLogFile>src/main/resources/config/liquibase/changelog/${maven.build.timestamp}_changelog.xml</diffChangeLogFile>
+                        <driver>com.mysql.jdbc.Driver</driver>
+                        <url>jdbc:mysql://localhost:3306/sites</url>
+                        <defaultSchemaName>sites</defaultSchemaName>
+                        <username>root</username>
+                        <password></password>
+                        <referenceUrl>hibernate:spring:com.budderfly.sites.domain?dialect=org.hibernate.dialect.MySQL5InnoDBDialect&amp;hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&amp;hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy</referenceUrl>
+                        <verbose>true</verbose>
+                        <logging>debug</logging>
+                    </configuration>
+                    <dependencies>
+                        <dependency>
+                            <groupId>org.javassist</groupId>
+                            <artifactId>javassist</artifactId>
+                            <version>${javassist.version}</version>
+                        </dependency>
+                        <dependency>
+                            <groupId>org.liquibase.ext</groupId>
+                            <artifactId>liquibase-hibernate5</artifactId>
+                            <version>${liquibase-hibernate5.version}</version>
+                        </dependency>
+                        <dependency>
+                            <groupId>org.springframework.boot</groupId>
+                            <artifactId>spring-boot-starter-data-jpa</artifactId>
+                            <version>${spring-boot.version}</version>
+                        </dependency>
+                        <dependency>
+                            <groupId>javax.validation</groupId>
+                            <artifactId>validation-api</artifactId>
+                            <version>${validation-api.version}</version>
+                        </dependency>
+                    </dependencies>
+                </plugin>
+                <plugin>
+                    <artifactId>maven-clean-plugin</artifactId>
+                    <version>${maven-clean-plugin.version}</version>
+                </plugin>
+                <plugin>
+                    <groupId>org.apache.maven.plugins</groupId>
+                    <artifactId>maven-eclipse-plugin</artifactId>
+                    <version>${maven-eclipse-plugin.version}</version>
+                    <configuration>
+                        <downloadSources>true</downloadSources>
+                        <downloadJavadocs>true</downloadJavadocs>
+                    </configuration>
+                </plugin>
+                <plugin>
+                    <groupId>org.apache.maven.plugins</groupId>
+                    <artifactId>maven-enforcer-plugin</artifactId>
+                    <version>${maven-enforcer-plugin.version}</version>
+                    <executions>
+                        <execution>
+                            <id>enforce-versions</id>
+                            <goals>
+                                <goal>enforce</goal>
+                            </goals>
+                        </execution>
+                    </executions>
+                    <configuration>
+                        <rules>
+                            <requireMavenVersion>
+                                <message>You are running an older version of Maven. JHipster requires at least Maven ${maven.version}</message>
+                                <version>[${maven.version},)</version>
+                            </requireMavenVersion>
+                            <requireJavaVersion>
+                                <!-- Until JHipster supports JDK 9 -->
+                                <message>You are running an incompatible version of Java. JHipster requires JDK ${java.version}</message>
+                                <version>[1.8,1.9)</version>
+                            </requireJavaVersion>
+                        </rules>
+                    </configuration>
+                </plugin>
+                <plugin>
+                    <groupId>org.apache.maven.plugins</groupId>
+                    <artifactId>maven-resources-plugin</artifactId>
+                    <version>${maven-resources-plugin.version}</version>
+                    <executions>
+                        <execution>
+                            <id>default-resources</id>
+                            <phase>validate</phase>
+                            <goals>
+                                <goal>copy-resources</goal>
+                            </goals>
+                            <configuration>
+                                <outputDirectory>target/classes</outputDirectory>
+                                <useDefaultDelimiters>false</useDefaultDelimiters>
+                                <delimiters>
+                                    <delimiter>#</delimiter>
+                                </delimiters>
+                                <resources>
+                                    <resource>
+                                        <directory>src/main/resources/</directory>
+                                        <filtering>true</filtering>
+                                        <includes>
+                                            <include>config/*.yml</include>
+                                        </includes>
+                                    </resource>
+                                    <resource>
+                                        <directory>src/main/resources/</directory>
+                                        <filtering>false</filtering>
+                                        <excludes>
+                                            <exclude>config/*.yml</exclude>
+                                        </excludes>
+                                    </resource>
+                                </resources>
+                            </configuration>
+                        </execution>
+                        <execution>
+                            <id>jib-www-resources</id>
+                            <phase>verify</phase>
+                            <goals>
+                                <goal>copy-resources</goal>
+                            </goals>
+                            <configuration>
+                                <outputDirectory>target/classes/static/</outputDirectory>
+                                <resources>
+                                    <resource>
+                                        <directory>target/www</directory>
+                                        <filtering>false</filtering>
+                                    </resource>
+                                </resources>
+                            </configuration>
+                        </execution>
+                    </executions>
+                </plugin>
+                <plugin>
+                    <groupId>org.apache.maven.plugins</groupId>
+                    <artifactId>maven-surefire-plugin</artifactId>
+                    <version>${maven-surefire-plugin.version}</version>
+                    <configuration>
+                        <!-- Force alphabetical order to have a reproducible build -->
+                        <runOrder>alphabetical</runOrder>
+                        <!-- Fixes a bug which will be solved in next version after 2.22.1 then this can be removed -->
+                        <!-- see: https://issues.apache.org/jira/browse/SUREFIRE-1588 -->
+                        <useSystemClassLoader>false</useSystemClassLoader>
+                    </configuration>
+                </plugin>
+                <plugin>
+                    <groupId>org.apache.maven.plugins</groupId>
+                    <artifactId>maven-war-plugin</artifactId>
+                    <version>${maven-war-plugin.version}</version>
+                </plugin>
+                <plugin>
+                    <!--
+                        Plugin that provides API-first development using openapi-generator to
+                        generate Spring-MVC endpoint stubs at compile time from an OpenAPI definition file
+                    -->
+                    <groupId>org.openapitools</groupId>
+                    <artifactId>openapi-generator-maven-plugin</artifactId>
+                    <version>${openapi-generator-maven-plugin.version}</version>
+                    <executions>
+                        <execution>
+                            <goals>
+                                <goal>generate</goal>
+                            </goals>
+                            <configuration>
+                                <inputSpec>${project.basedir}/src/main/resources/swagger/api.yml</inputSpec>
+                                <generatorName>spring</generatorName>
+                                <apiPackage>com.budderfly.sites.web.api</apiPackage>
+                                <modelPackage>com.budderfly.sites.web.api.model</modelPackage>
+                                <supportingFilesToGenerate>ApiUtil.java</supportingFilesToGenerate>
+                                <validateSpec>true</validateSpec>
+                                <configOptions>
+                                    <delegatePattern>true</delegatePattern>
+                                </configOptions>
+                            </configuration>
+                        </execution>
+                    </executions>
+                </plugin>
+                <plugin>
+                    <groupId>net.alchim31.maven</groupId>
+                    <artifactId>scala-maven-plugin</artifactId>
+                    <version>${scala-maven-plugin.version}</version>
+                    <executions>
+                        <execution>
+                            <id>compile</id>
+                            <phase>compile</phase>
+                            <goals>
+                                <goal>add-source</goal>
+                                <goal>compile</goal>
+                            </goals>
+                        </execution>
+                        <execution>
+                            <id>test-compile</id>
+                            <phase>test-compile</phase>
+                            <goals>
+                                <goal>add-source</goal>
+                                <goal>testCompile</goal>
+                            </goals>
+                        </execution>
+                    </executions>
                     <configuration>
-                        <lifecycleMappingMetadata>
-                            <pluginExecutions>
-                                <pluginExecution>
-                                    <pluginExecutionFilter>
-                                        <groupId>org.jacoco</groupId>
-                                        <artifactId>
-                                            jacoco-maven-plugin
-                                        </artifactId>
-                                        <versionRange>
-                                            ${jacoco-maven-plugin.version}
-                                        </versionRange>
-                                        <goals>
-                                            <goal>prepare-agent</goal>
-                                        </goals>
-                                    </pluginExecutionFilter>
-                                    <action>
-                                        <ignore/>
-                                    </action>
-                                </pluginExecution>
-                            </pluginExecutions>
-                        </lifecycleMappingMetadata>
+                        <recompileMode>incremental</recompileMode>
+                        <verbose>true</verbose>
+                        <scalaVersion>${scala.version}</scalaVersion>
                     </configuration>
                 </plugin>
+                <plugin>
+                    <groupId>org.sonarsource.scanner.maven</groupId>
+                    <artifactId>sonar-maven-plugin</artifactId>
+                    <version>${sonar-maven-plugin.version}</version>
+                </plugin>
+                <plugin>
+                    <groupId>org.springframework.boot</groupId>
+                    <artifactId>spring-boot-maven-plugin</artifactId>
+                    <version>${spring-boot.version}</version>
+                </plugin>
             </plugins>
         </pluginManagement>
     </build>
@@ -726,6 +804,12 @@
             </properties>
         </profile>
         <profile>
+            <id>tls</id>
+            <properties>
+                <profile.tls>,tls</profile.tls>
+            </properties>
+        </profile>
+        <profile>
             <id>dev</id>
             <activation>
                 <activeByDefault>true</activeByDefault>
@@ -746,7 +830,6 @@
                     <plugin>
                         <groupId>org.apache.maven.plugins</groupId>
                         <artifactId>maven-war-plugin</artifactId>
-                        <version>${maven-war-plugin.version}</version>
                         <configuration>
                             <failOnMissingWebXml>false</failOnMissingWebXml>
                         </configuration>
@@ -755,7 +838,7 @@
             </build>
             <properties>
                 <!-- default Spring profiles -->
-                <spring.profiles.active>dev${profile.no-liquibase}</spring.profiles.active>
+                <spring.profiles.active>dev${profile.tls}${profile.no-liquibase}</spring.profiles.active>
             </properties>
         </profile>
         <profile>
@@ -770,7 +853,6 @@
                 <plugins>
                     <plugin>
                         <artifactId>maven-clean-plugin</artifactId>
-                        <version>${maven-clean-plugin.version}</version>
                         <configuration>
                             <filesets>
                                 <fileset>
@@ -782,7 +864,6 @@
                     <plugin>
                         <groupId>org.apache.maven.plugins</groupId>
                         <artifactId>maven-war-plugin</artifactId>
-                        <version>${maven-war-plugin.version}</version>
                         <configuration>
                             <failOnMissingWebXml>false</failOnMissingWebXml>
                         </configuration>
@@ -790,7 +871,6 @@
                     <plugin>
                         <groupId>org.springframework.boot</groupId>
                         <artifactId>spring-boot-maven-plugin</artifactId>
-                        <version>${spring-boot.version}</version>
                         <configuration>
                             <mainClass>${start-class}</mainClass>
                             <executable>true</executable>
@@ -806,23 +886,6 @@
                     <plugin>
                         <groupId>pl.project13.maven</groupId>
                         <artifactId>git-commit-id-plugin</artifactId>
-                        <version>2.2.4</version>
-                            <executions>
-                                <execution>
-                                    <goals>
-                                        <goal>revision</goal>
-                                    </goals>
-                                </execution>
-                            </executions>
-                            <configuration>
-                                <failOnNoGitDirectory>false</failOnNoGitDirectory>
-                                <generateGitPropertiesFile>true</generateGitPropertiesFile>
-                                <includeOnlyProperties>
-                                    <includeOnlyProperty>^git.commit.id.abbrev$</includeOnlyProperty>
-                                    <includeOnlyProperty>^git.commit.id.describe$</includeOnlyProperty>
-                                    <includeOnlyProperty>^git.branch$</includeOnlyProperty>
-                                </includeOnlyProperties>
-                        </configuration>
                     </plugin>
                 </plugins>
             </build>
@@ -837,7 +900,7 @@
                 It allows automatic compilation of Java classes as soon as they are saved.
                 To use it, run in 3 terminals:
                 - './mvnw -Pcc scala:cc' for continuous compilation of your classes
-                - './mvnw -Pcc' for hot reload of Spring boot
+                - './mvnw -Pcc -Pdev' for hot reload of Spring boot
                 - 'npm start/yarn start' for hot reload of the HTML/JavaScript asset
                 Everything should hot reload automatically!
             -->
@@ -858,7 +921,6 @@
                     <plugin>
                         <groupId>org.apache.maven.plugins</groupId>
                         <artifactId>maven-war-plugin</artifactId>
-                        <version>${maven-war-plugin.version}</version>
                         <configuration>
                             <failOnMissingWebXml>false</failOnMissingWebXml>
                             <warSourceDirectory>src/main/webapp/</warSourceDirectory>
@@ -867,7 +929,6 @@
                     <plugin>
                         <groupId>org.springframework.boot</groupId>
                         <artifactId>spring-boot-maven-plugin</artifactId>
-                        <version>${spring-boot.version}</version>
                         <configuration>
                             <mainClass>${start-class}</mainClass>
                             <executable>true</executable>
@@ -882,7 +943,6 @@
                     <plugin>
                         <groupId>org.apache.maven.plugins</groupId>
                         <artifactId>maven-compiler-plugin</artifactId>
-                        <version>${maven-compiler-plugin.version}</version>
                         <executions>
                             <execution>
                                 <id>default-compile</id>
@@ -897,30 +957,6 @@
                     <plugin>
                         <groupId>net.alchim31.maven</groupId>
                         <artifactId>scala-maven-plugin</artifactId>
-                        <version>${scala-maven-plugin.version}</version>
-                        <executions>
-                            <execution>
-                                <id>compile</id>
-                                <phase>compile</phase>
-                                <goals>
-                                    <goal>add-source</goal>
-                                    <goal>compile</goal>
-                                </goals>
-                            </execution>
-                            <execution>
-                                <id>test-compile</id>
-                                <phase>test-compile</phase>
-                                <goals>
-                                    <goal>add-source</goal>
-                                    <goal>testCompile</goal>
-                                </goals>
-                            </execution>
-                        </executions>
-                        <configuration>
-                            <recompileMode>incremental</recompileMode>
-                            <verbose>true</verbose>
-                            <scalaVersion>${scala.version}</scalaVersion>
-                        </configuration>
                     </plugin>
                 </plugins>
             </build>
@@ -931,38 +967,6 @@
         </profile>
         <profile>
             <!--
-                Profile for monitoring the application with Graphite.
-            -->
-            <id>graphite</id>
-            <dependencies>
-                <dependency>
-                    <groupId>io.dropwizard.metrics</groupId>
-                    <artifactId>metrics-graphite</artifactId>
-                </dependency>
-            </dependencies>
-        </profile>
-        <profile>
-            <!--
-                Profile for monitoring the application with Prometheus.
-            -->
-            <id>prometheus</id>
-            <dependencies>
-                <dependency>
-                    <groupId>io.prometheus</groupId>
-                    <artifactId>simpleclient</artifactId>
-                </dependency>
-                <dependency>
-                    <groupId>io.prometheus</groupId>
-                    <artifactId>simpleclient_servlet</artifactId>
-                </dependency>
-                <dependency>
-                    <groupId>io.prometheus</groupId>
-                    <artifactId>simpleclient_dropwizard</artifactId>
-                </dependency>
-            </dependencies>
-        </profile>
-        <profile>
-            <!--
                 Profile for tracing requests with Zipkin.
             -->
             <id>zipkin</id>
@@ -976,18 +980,82 @@
         <profile>
             <!--
                 Profile for applying IDE-specific configuration.
-                At the moment it only configures MapStruct, which you need when working
-                with DTOs.
+                At the moment it configures MapStruct and Hibernate JPA Metamodel Generator, which you need when working
+                with DTOs and entity filtering.
             -->
             <id>IDE</id>
             <dependencies>
                 <dependency>
                     <groupId>org.mapstruct</groupId>
                     <artifactId>mapstruct-processor</artifactId>
-                    <version>${mapstruct.version}</version>
+                </dependency>
+                <dependency>
+                    <groupId>org.hibernate</groupId>
+                    <artifactId>hibernate-jpamodelgen</artifactId>
                 </dependency>
             </dependencies>
         </profile>
+        <profile>
+            <!-- This is automatically activated when working in Eclipse -->
+            <id>eclipse</id>
+            <activation>
+                <property>
+                    <name>m2e.version</name>
+                </property>
+            </activation>
+            <build>
+                <pluginManagement>
+                    <plugins>
+                        <!--
+                            This plugin's configuration is used to store Eclipse m2e settings only.
+                            It has no influence on the Maven build itself.
+                            Remove when the m2e plugin can correctly bind to Maven lifecycle
+                        -->
+                        <plugin>
+                            <groupId>org.eclipse.m2e</groupId>
+                            <artifactId>lifecycle-mapping</artifactId>
+                            <version>${lifecycle-mapping.version}</version>
+                            <configuration>
+                                <lifecycleMappingMetadata>
+                                    <pluginExecutions>
+                                        <pluginExecution>
+                                            <pluginExecutionFilter>
+                                                <groupId>org.jacoco</groupId>
+                                                <artifactId>
+                                                    jacoco-maven-plugin
+                                                </artifactId>
+                                                <versionRange>
+                                                    ${jacoco-maven-plugin.version}
+                                                </versionRange>
+                                                <goals>
+                                                    <goal>prepare-agent</goal>
+                                                </goals>
+                                            </pluginExecutionFilter>
+                                            <action>
+                                                <ignore/>
+                                            </action>
+                                        </pluginExecution>
+                                        <pluginExecution>
+                                            <pluginExecutionFilter>
+                                                <groupId>org.openapitools</groupId>
+                                                <artifactId>openapi-generator-maven-plugin</artifactId>
+                                                <versionRange>${openapi-generator-maven-plugin.version}</versionRange>
+                                                <goals>
+                                                    <goal>generate</goal>
+                                                </goals>
+                                            </pluginExecutionFilter>
+                                            <action>
+                                                <ignore />
+                                            </action>
+                                        </pluginExecution>
+                                    </pluginExecutions>
+                                </lifecycleMappingMetadata>
+                            </configuration>
+                        </plugin>
+                    </plugins>
+                </pluginManagement>
+            </build>
+        </profile>
         <!-- jhipster-needle-maven-add-profile -->
     </profiles>
 </project>
diff --git a/src/main/docker/.dockerignore b/src/main/docker/.dockerignore
index 28e6b13..b03bdc7 100644
--- a/src/main/docker/.dockerignore
+++ b/src/main/docker/.dockerignore
@@ -1,5 +1,14 @@
 # https://docs.docker.com/engine/reference/builder/#dockerignore-file
-# by default ignore everything except the jar file
-**/*
+classes/
+generated-sources/
+generated-test-sources/
+h2db/
+maven-archiver/
+maven-status/
+reports/
+surefire-reports/
+test-classes/
+test-results/
+www/
 !*.jar
 !*.war
diff --git a/src/main/docker/Dockerfile b/src/main/docker/Dockerfile
index dff7f64..428a354 100644
--- a/src/main/docker/Dockerfile
+++ b/src/main/docker/Dockerfile
@@ -4,10 +4,17 @@ ENV SPRING_OUTPUT_ANSI_ENABLED=ALWAYS \
     JHIPSTER_SLEEP=0 \
     JAVA_OPTS=""
 
-CMD echo "The application will start in ${JHIPSTER_SLEEP}s..." && \
-    sleep ${JHIPSTER_SLEEP} && \
-    java ${JAVA_OPTS} -Djava.security.egd=file:/dev/./urandom -jar /app.war
+# Add a jhipster user to run our application so that it doesn't need to run as root
+RUN adduser -D -s /bin/sh jhipster
+WORKDIR /home/jhipster
+
+ADD entrypoint.sh entrypoint.sh
+RUN chmod 755 entrypoint.sh && chown jhipster:jhipster entrypoint.sh
+USER jhipster
+
+ENTRYPOINT ["./entrypoint.sh"]
 
 EXPOSE 8082 5701/udp
 
-ADD *.war /app.war
+ADD *.war app.war
+
diff --git a/src/main/docker/app.yml b/src/main/docker/app.yml
index d5030ae..5ed636e 100644
--- a/src/main/docker/app.yml
+++ b/src/main/docker/app.yml
@@ -3,12 +3,13 @@ services:
     sites-app:
         image: sites
         environment:
+            - _JAVA_OPTIONS=-Xmx512m -Xms256m
             - SPRING_PROFILES_ACTIVE=prod,swagger
             - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://admin:$${jhipster.registry.password}@jhipster-registry:8761/eureka
             - SPRING_CLOUD_CONFIG_URI=http://admin:$${jhipster.registry.password}@jhipster-registry:8761/config
             - SPRING_DATASOURCE_URL=jdbc:mysql://sites-mysql:3306/sites?useUnicode=true&characterEncoding=utf8&useSSL=false
             - JHIPSTER_SLEEP=30 # gives time for the JHipster Registry to boot before the application
-            - SPRING_DATA_ELASTICSEARCH_CLUSTER_NODES=sites-elasticsearch:9300
+            - SPRING_DATA_JEST_URI=http://sites-elasticsearch:9200
     sites-mysql:
         extends:
             file: mysql.yml
@@ -22,4 +23,5 @@ services:
             file: jhipster-registry.yml
             service: jhipster-registry
         environment:
-            - SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCH_LOCATIONS=file:./central-config/docker-config/
+            - SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_TYPE=native
+            - SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_SEARCH_LOCATIONS=file:./central-config/docker-config/
diff --git a/src/main/docker/central-server-config/README.md b/src/main/docker/central-server-config/README.md
index f2c94b5..5da1071 100644
--- a/src/main/docker/central-server-config/README.md
+++ b/src/main/docker/central-server-config/README.md
@@ -1,7 +1,8 @@
 # Central configuration sources details
 
 The JHipster-Registry will use the following directories as its configuration source :
-- localhost-config : when running the registry in docker with the jhipster-registry.yml docker-compose file
-- docker-config : when running the registry and the app both in docker with the app.yml docker-compose file
 
-For more info, refer to http://www.jhipster.tech/microservices-architecture/#registry_app_configuration
+-   localhost-config : when running the registry in docker with the jhipster-registry.yml docker-compose file
+-   docker-config : when running the registry and the app both in docker with the app.yml docker-compose file
+
+For more info, refer to https://www.jhipster.tech/microservices-architecture/#registry_app_configuration
diff --git a/src/main/docker/central-server-config/docker-config/application.yml b/src/main/docker/central-server-config/docker-config/application.yml
index d95847f..8a973c0 100644
--- a/src/main/docker/central-server-config/docker-config/application.yml
+++ b/src/main/docker/central-server-config/docker-config/application.yml
@@ -7,7 +7,7 @@ jhipster:
     security:
         authentication:
             jwt:
-                secret: my-secret-token-to-change-in-production
+                secret: my-secret-key-which-should-be-changed-in-production-and-be-base64-encoded
 
 eureka:
     client:
diff --git a/src/main/docker/central-server-config/localhost-config/application.yml b/src/main/docker/central-server-config/localhost-config/application.yml
index 2c8a0de..db4602e 100644
--- a/src/main/docker/central-server-config/localhost-config/application.yml
+++ b/src/main/docker/central-server-config/localhost-config/application.yml
@@ -7,7 +7,7 @@ jhipster:
     security:
         authentication:
             jwt:
-                secret: my-secret-token-to-change-in-production
+                secret: my-secret-key-which-should-be-changed-in-production-and-be-base64-encoded
 
 eureka:
     client:
diff --git a/src/main/docker/elasticsearch.yml b/src/main/docker/elasticsearch.yml
index d4951c5..946261e 100644
--- a/src/main/docker/elasticsearch.yml
+++ b/src/main/docker/elasticsearch.yml
@@ -1,9 +1,12 @@
 version: '2'
 services:
     sites-elasticsearch:
-        image: elasticsearch:2.4.6
+        image: elasticsearch:5.6.13
         # volumes:
         #     - ~/volumes/jhipster/sites/elasticsearch/:/usr/share/elasticsearch/data/
         ports:
             - 9200:9200
             - 9300:9300
+        command: -Enetwork.host=0.0.0.0 -Ediscovery.type=single-node
+        environment:
+            - "ES_JAVA_OPTS=-Xms1024m -Xmx1024m"
diff --git a/src/main/docker/entrypoint.sh b/src/main/docker/entrypoint.sh
new file mode 100644
index 0000000..ccffafb
--- /dev/null
+++ b/src/main/docker/entrypoint.sh
@@ -0,0 +1,4 @@
+#!/bin/sh
+
+echo "The application will start in ${JHIPSTER_SLEEP}s..." && sleep ${JHIPSTER_SLEEP}
+exec java ${JAVA_OPTS} -Djava.security.egd=file:/dev/./urandom -jar "${HOME}/app.war" "$@"
diff --git a/src/main/docker/hazelcast-management-center.yml b/src/main/docker/hazelcast-management-center.yml
index 8f91100..83181ab 100644
--- a/src/main/docker/hazelcast-management-center.yml
+++ b/src/main/docker/hazelcast-management-center.yml
@@ -1,6 +1,6 @@
 version: '2'
 services:
     sites-hazelcast-management-center:
-        image: hazelcast/management-center:3.9.1
+        image: hazelcast/management-center:3.9.3
         ports:
             - 8180:8080
diff --git a/src/main/docker/jhipster-registry.yml b/src/main/docker/jhipster-registry.yml
index df531b1..3db3d40 100644
--- a/src/main/docker/jhipster-registry.yml
+++ b/src/main/docker/jhipster-registry.yml
@@ -1,19 +1,22 @@
 version: '2'
 services:
     jhipster-registry:
-        image: jhipster/jhipster-registry:v3.2.4
+        image: jhipster/jhipster-registry:v4.0.6
         volumes:
             - ./central-server-config:/central-config
         # When run with the "dev" Spring profile, the JHipster Registry will
         # read the config from the local filesystem (central-server-config directory)
         # When run with the "prod" Spring profile, it will read the configuration from a Git repository
-        # See http://www.jhipster.tech/microservices-architecture/#registry_app_configuration
+        # See https://www.jhipster.tech/microservices-architecture/#registry_app_configuration
         environment:
-            - SPRING_PROFILES_ACTIVE=dev,native,swagger
-            - SECURITY_USER_PASSWORD=admin
+            - _JAVA_OPTIONS=-Xmx512m -Xms256m
+            - SPRING_PROFILES_ACTIVE=dev,swagger,uaa
+            - SPRING_SECURITY_USER_PASSWORD=admin
             - JHIPSTER_REGISTRY_PASSWORD=admin
-            - SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCH_LOCATIONS=file:./central-config/localhost-config/
-            # - GIT_URI=https://github.com/jhipster/jhipster-registry/
-            # - GIT_SEARCH_PATHS=central-config
+            - SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_TYPE=native
+            - SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_SEARCH_LOCATIONS=file:./central-config/localhost-config/
+            # - SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_TYPE=git
+            # - SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_URI=https://github.com/jhipster/jhipster-registry/
+            # - SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_SEARCH_PATHS=central-config
         ports:
             - 8761:8761
diff --git a/src/main/docker/mysql.yml b/src/main/docker/mysql.yml
index 9982f6b..aec60ae 100644
--- a/src/main/docker/mysql.yml
+++ b/src/main/docker/mysql.yml
@@ -10,4 +10,4 @@ services:
             - MYSQL_DATABASE=sites
         ports:
             - 3306:3306
-        command: mysqld --lower_case_table_names=1 --skip-ssl --character_set_server=utf8 --explicit_defaults_for_timestamp
+        command: mysqld --lower_case_table_names=1 --skip-ssl --character_set_server=utf8mb4 --explicit_defaults_for_timestamp
diff --git a/src/main/docker/sonar.yml b/src/main/docker/sonar.yml
index c8a480b..d24bd95 100644
--- a/src/main/docker/sonar.yml
+++ b/src/main/docker/sonar.yml
@@ -1,7 +1,7 @@
 version: '2'
 services:
     sites-sonar:
-        image: sonarqube:6.5-alpine
+        image: sonarqube:7.1
         ports:
-            - 9000:9000
+            - 9001:9000
             - 9092:9092
diff --git a/src/main/java/com/budderfly/sites/ApplicationWebXml.java b/src/main/java/com/budderfly/sites/ApplicationWebXml.java
index 5922931..cd87da9 100644
--- a/src/main/java/com/budderfly/sites/ApplicationWebXml.java
+++ b/src/main/java/com/budderfly/sites/ApplicationWebXml.java
@@ -2,11 +2,11 @@ package com.budderfly.sites;
 
 import com.budderfly.sites.config.DefaultProfileUtil;
 import org.springframework.boot.builder.SpringApplicationBuilder;
-import org.springframework.boot.web.support.SpringBootServletInitializer;
+import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;
 
 /**
  * This is a helper Java class that provides an alternative to creating a web.xml.
- * This will be invoked only when the application is deployed to a servlet container like Tomcat, JBoss etc.
+ * This will be invoked only when the application is deployed to a Servlet container like Tomcat, JBoss etc.
  */
 public class ApplicationWebXml extends SpringBootServletInitializer {
 
diff --git a/src/main/java/com/budderfly/sites/SitesApp.java b/src/main/java/com/budderfly/sites/SitesApp.java
index 0bbf399..8b81e42 100644
--- a/src/main/java/com/budderfly/sites/SitesApp.java
+++ b/src/main/java/com/budderfly/sites/SitesApp.java
@@ -6,11 +6,11 @@ import com.budderfly.sites.config.DefaultProfileUtil;
 
 import io.github.jhipster.config.JHipsterConstants;
 
+import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.boot.SpringApplication;
-import org.springframework.boot.actuate.autoconfigure.*;
-import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
@@ -27,7 +27,7 @@ import java.util.Collection;
 @ComponentScan(
     excludeFilters = @ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE, classes = OAuth2InterceptedFeignConfiguration.class)
 )
-@EnableAutoConfiguration(exclude = {MetricFilterAutoConfiguration.class, MetricRepositoryAutoConfiguration.class})
+@SpringBootApplication
 @EnableConfigurationProperties({LiquibaseProperties.class, ApplicationProperties.class})
 @EnableDiscoveryClient
 public class SitesApp {
@@ -43,9 +43,9 @@ public class SitesApp {
     /**
      * Initializes sites.
      * <p>
-     * Spring profiles can be configured with a program arguments --spring.profiles.active=your-active-profile
+     * Spring profiles can be configured with a program argument --spring.profiles.active=your-active-profile
      * <p>
-     * You can find more information on how profiles work with JHipster on <a href="http://www.jhipster.tech/profiles/">http://www.jhipster.tech/profiles/</a>.
+     * You can find more information on how profiles work with JHipster on <a href="https://www.jhipster.tech/profiles/">https://www.jhipster.tech/profiles/</a>.
      */
     @PostConstruct
     public void initApplication() {
@@ -64,32 +64,50 @@ public class SitesApp {
      * Main method, used to run the application.
      *
      * @param args the command line arguments
-     * @throws UnknownHostException if the local host name could not be resolved into an address
      */
-    public static void main(String[] args) throws UnknownHostException {
+    public static void main(String[] args) {
         SpringApplication app = new SpringApplication(SitesApp.class);
         DefaultProfileUtil.addDefaultProfile(app);
         Environment env = app.run(args).getEnvironment();
+        logApplicationStartup(env);
+    }
+
+    private static void logApplicationStartup(Environment env) {
         String protocol = "http";
         if (env.getProperty("server.ssl.key-store") != null) {
             protocol = "https";
         }
+        String serverPort = env.getProperty("server.port");
+        String contextPath = env.getProperty("server.servlet.context-path");
+        if (StringUtils.isBlank(contextPath)) {
+            contextPath = "/";
+        }
+        String hostAddress = "localhost";
+        try {
+            hostAddress = InetAddress.getLocalHost().getHostAddress();
+        } catch (UnknownHostException e) {
+            log.warn("The host name could not be determined, using `localhost` as fallback");
+        }
         log.info("\n----------------------------------------------------------\n\t" +
                 "Application '{}' is running! Access URLs:\n\t" +
-                "Local: \t\t{}://localhost:{}\n\t" +
-                "External: \t{}://{}:{}\n\t" +
+                "Local: \t\t{}://localhost:{}{}\n\t" +
+                "External: \t{}://{}:{}{}\n\t" +
                 "Profile(s): \t{}\n----------------------------------------------------------",
             env.getProperty("spring.application.name"),
             protocol,
-            env.getProperty("server.port"),
+            serverPort,
+            contextPath,
             protocol,
-            InetAddress.getLocalHost().getHostAddress(),
-            env.getProperty("server.port"),
+            hostAddress,
+            serverPort,
+            contextPath,
             env.getActiveProfiles());
 
         String configServerStatus = env.getProperty("configserver.status");
+        if (configServerStatus == null) {
+            configServerStatus = "Not found or not setup for this application";
+        }
         log.info("\n----------------------------------------------------------\n\t" +
-                "Config Server: \t{}\n----------------------------------------------------------",
-            configServerStatus == null ? "Not found or not setup for this application" : configServerStatus);
+                "Config Server: \t{}\n----------------------------------------------------------", configServerStatus);
     }
 }
diff --git a/src/main/java/com/budderfly/sites/client/AuthorizedFeignClient.java b/src/main/java/com/budderfly/sites/client/AuthorizedFeignClient.java
index be05864..41247ea 100644
--- a/src/main/java/com/budderfly/sites/client/AuthorizedFeignClient.java
+++ b/src/main/java/com/budderfly/sites/client/AuthorizedFeignClient.java
@@ -1,7 +1,7 @@
 package com.budderfly.sites.client;
 
-import org.springframework.cloud.netflix.feign.FeignClient;
-import org.springframework.cloud.netflix.feign.FeignClientsConfiguration;
+import org.springframework.cloud.openfeign.FeignClient;
+import org.springframework.cloud.openfeign.FeignClientsConfiguration;
 import org.springframework.core.annotation.AliasFor;
 
 import java.lang.annotation.*;
diff --git a/src/main/java/com/budderfly/sites/client/AuthorizedUserFeignClient.java b/src/main/java/com/budderfly/sites/client/AuthorizedUserFeignClient.java
index a3197d4..c14ac7d 100644
--- a/src/main/java/com/budderfly/sites/client/AuthorizedUserFeignClient.java
+++ b/src/main/java/com/budderfly/sites/client/AuthorizedUserFeignClient.java
@@ -2,8 +2,8 @@ package com.budderfly.sites.client;
 
 import java.lang.annotation.*;
 
-import org.springframework.cloud.netflix.feign.FeignClient;
-import org.springframework.cloud.netflix.feign.FeignClientsConfiguration;
+import org.springframework.cloud.openfeign.FeignClient;
+import org.springframework.cloud.openfeign.FeignClientsConfiguration;
 import org.springframework.core.annotation.AliasFor;
 
 @Retention(RetentionPolicy.RUNTIME)
diff --git a/src/main/java/com/budderfly/sites/client/OAuth2InterceptedFeignConfiguration.java b/src/main/java/com/budderfly/sites/client/OAuth2InterceptedFeignConfiguration.java
index fb3b90c..080c30e 100644
--- a/src/main/java/com/budderfly/sites/client/OAuth2InterceptedFeignConfiguration.java
+++ b/src/main/java/com/budderfly/sites/client/OAuth2InterceptedFeignConfiguration.java
@@ -4,13 +4,11 @@ import java.io.IOException;
 
 import org.springframework.cloud.security.oauth2.client.feign.OAuth2FeignRequestInterceptor;
 import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
 import org.springframework.security.oauth2.client.DefaultOAuth2ClientContext;
 
 import feign.RequestInterceptor;
 import io.github.jhipster.security.uaa.LoadBalancedResourceDetails;
 
-@Configuration
 public class OAuth2InterceptedFeignConfiguration {
 
     private final LoadBalancedResourceDetails loadBalancedResourceDetails;
diff --git a/src/main/java/com/budderfly/sites/client/OAuth2UserClientFeignConfiguration.java b/src/main/java/com/budderfly/sites/client/OAuth2UserClientFeignConfiguration.java
index 59e5643..1a5f44c 100644
--- a/src/main/java/com/budderfly/sites/client/OAuth2UserClientFeignConfiguration.java
+++ b/src/main/java/com/budderfly/sites/client/OAuth2UserClientFeignConfiguration.java
@@ -3,11 +3,9 @@ package com.budderfly.sites.client;
 import java.io.IOException;
 
 import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
 
 import feign.RequestInterceptor;
 
-@Configuration
 public class OAuth2UserClientFeignConfiguration {
 
     @Bean(name = "userFeignClientInterceptor")
diff --git a/src/main/java/com/budderfly/sites/client/UserFeignClientInterceptor.java b/src/main/java/com/budderfly/sites/client/UserFeignClientInterceptor.java
index 34ebb0f..e0c1e42 100644
--- a/src/main/java/com/budderfly/sites/client/UserFeignClientInterceptor.java
+++ b/src/main/java/com/budderfly/sites/client/UserFeignClientInterceptor.java
@@ -4,12 +4,10 @@ import org.springframework.security.core.Authentication;
 import org.springframework.security.core.context.SecurityContext;
 import org.springframework.security.core.context.SecurityContextHolder;
 import org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationDetails;
-import org.springframework.stereotype.Component;
 
 import feign.RequestInterceptor;
 import feign.RequestTemplate;
 
-@Component
 public class UserFeignClientInterceptor implements RequestInterceptor{
 
     private static final String AUTHORIZATION_HEADER = "Authorization";
diff --git a/src/main/java/com/budderfly/sites/config/AsyncConfiguration.java b/src/main/java/com/budderfly/sites/config/AsyncConfiguration.java
index 9bb9436..536824f 100644
--- a/src/main/java/com/budderfly/sites/config/AsyncConfiguration.java
+++ b/src/main/java/com/budderfly/sites/config/AsyncConfiguration.java
@@ -11,13 +11,16 @@ import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.scheduling.annotation.*;
 import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
+import org.springframework.scheduling.annotation.SchedulingConfigurer;
+import org.springframework.scheduling.config.ScheduledTaskRegistrar;
 
 import java.util.concurrent.Executor;
+import java.util.concurrent.Executors;
 
 @Configuration
 @EnableAsync
 @EnableScheduling
-public class AsyncConfiguration implements AsyncConfigurer {
+public class AsyncConfiguration implements AsyncConfigurer, SchedulingConfigurer {
 
     private final Logger log = LoggerFactory.getLogger(AsyncConfiguration.class);
 
@@ -43,4 +46,14 @@ public class AsyncConfiguration implements AsyncConfigurer {
     public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() {
         return new SimpleAsyncUncaughtExceptionHandler();
     }
+    
+    @Override
+    public void configureTasks(ScheduledTaskRegistrar taskRegistrar) {
+        taskRegistrar.setScheduler(scheduledTaskExecutor());
+    }
+
+    @Bean
+    public Executor scheduledTaskExecutor() {
+        return Executors.newScheduledThreadPool(jHipsterProperties.getAsync().getCorePoolSize());
+    }
 }
diff --git a/src/main/java/com/budderfly/sites/config/CacheConfiguration.java b/src/main/java/com/budderfly/sites/config/CacheConfiguration.java
index 0caf27c..d6a9189 100644
--- a/src/main/java/com/budderfly/sites/config/CacheConfiguration.java
+++ b/src/main/java/com/budderfly/sites/config/CacheConfiguration.java
@@ -74,7 +74,8 @@ public class CacheConfiguration {
         if (this.registration == null) {
             log.warn("No discovery service is set up, Hazelcast cannot create a cluster.");
         } else {
-            // The serviceId is by default the application's name, see Spring Boot's eureka.instance.appname property
+            // The serviceId is by default the application's name,
+            // see the "spring.application.name" standard Spring property
             String serviceId = registration.getServiceId();
             log.debug("Configuring Hazelcast clustering for instanceId: {}", serviceId);
             // In development, everything goes through 127.0.0.1, with a different port
@@ -100,7 +101,7 @@ public class CacheConfiguration {
                 }
             }
         }
-        config.getMapConfigs().put("default", initializeDefaultMapConfig());
+        config.getMapConfigs().put("default", initializeDefaultMapConfig(jHipsterProperties));
 
         // Full reference is available at: http://docs.hazelcast.org/docs/management-center/3.9/manual/html/Deploying_and_Starting.html
         config.setManagementCenterConfig(initializeDefaultManagementCenterConfig(jHipsterProperties));
@@ -116,31 +117,31 @@ public class CacheConfiguration {
         return managementCenterConfig;
     }
 
-    private MapConfig initializeDefaultMapConfig() {
+    private MapConfig initializeDefaultMapConfig(JHipsterProperties jHipsterProperties) {
         MapConfig mapConfig = new MapConfig();
 
-    /*
+        /*
         Number of backups. If 1 is set as the backup-count for example,
         then all entries of the map will be copied to another JVM for
         fail-safety. Valid numbers are 0 (no backup), 1, 2, 3.
-     */
-        mapConfig.setBackupCount(0);
+        */
+        mapConfig.setBackupCount(jHipsterProperties.getCache().getHazelcast().getBackupCount());
 
-    /*
+        /*
         Valid values are:
         NONE (no eviction),
         LRU (Least Recently Used),
         LFU (Least Frequently Used).
         NONE is the default.
-     */
+        */
         mapConfig.setEvictionPolicy(EvictionPolicy.LRU);
 
-    /*
+        /*
         Maximum size of the map. When max size is reached,
         map is evicted based on the policy defined.
         Any integer between 0 and Integer.MAX_VALUE. 0 means
         Integer.MAX_VALUE. Default is 0.
-     */
+        */
         mapConfig.setMaxSizeConfig(new MaxSizeConfig(0, MaxSizeConfig.MaxSizePolicy.USED_HEAP_SIZE));
 
         return mapConfig;
diff --git a/src/main/java/com/budderfly/sites/config/CloudDatabaseConfiguration.java b/src/main/java/com/budderfly/sites/config/CloudDatabaseConfiguration.java
index 1a3237f..26d562a 100644
--- a/src/main/java/com/budderfly/sites/config/CloudDatabaseConfiguration.java
+++ b/src/main/java/com/budderfly/sites/config/CloudDatabaseConfiguration.java
@@ -9,14 +9,19 @@ import org.springframework.cloud.config.java.AbstractCloudConfig;
 import org.springframework.context.annotation.*;
 
 import javax.sql.DataSource;
+import org.springframework.boot.context.properties.ConfigurationProperties;
+
 
 @Configuration
 @Profile(JHipsterConstants.SPRING_PROFILE_CLOUD)
 public class CloudDatabaseConfiguration extends AbstractCloudConfig {
 
     private final Logger log = LoggerFactory.getLogger(CloudDatabaseConfiguration.class);
+    
+    private final String CLOUD_CONFIGURATION_HIKARI_PREFIX = "spring.datasource.hikari";
 
     @Bean
+    @ConfigurationProperties(CLOUD_CONFIGURATION_HIKARI_PREFIX)
     public DataSource dataSource(CacheManager cacheManager) {
         log.info("Configuring JDBC datasource from a cloud provider");
         return connectionFactory().dataSource();
diff --git a/src/main/java/com/budderfly/sites/config/Constants.java b/src/main/java/com/budderfly/sites/config/Constants.java
index 985fdab..e48f2a7 100644
--- a/src/main/java/com/budderfly/sites/config/Constants.java
+++ b/src/main/java/com/budderfly/sites/config/Constants.java
@@ -6,7 +6,7 @@ package com.budderfly.sites.config;
 public final class Constants {
 
     // Regex for acceptable logins
-    public static final String LOGIN_REGEX = "^[_'.@A-Za-z0-9-]*$";
+    public static final String LOGIN_REGEX = "^[_.@A-Za-z0-9-]*$";
 
     public static final String SYSTEM_ACCOUNT = "system";
     public static final String ANONYMOUS_USER = "anonymoususer";
diff --git a/src/main/java/com/budderfly/sites/config/DatabaseConfiguration.java b/src/main/java/com/budderfly/sites/config/DatabaseConfiguration.java
index 1cda552..5410143 100644
--- a/src/main/java/com/budderfly/sites/config/DatabaseConfiguration.java
+++ b/src/main/java/com/budderfly/sites/config/DatabaseConfiguration.java
@@ -1,26 +1,17 @@
 package com.budderfly.sites.config;
 
 import io.github.jhipster.config.JHipsterConstants;
-import io.github.jhipster.config.liquibase.AsyncSpringLiquibase;
-
-import liquibase.integration.spring.SpringLiquibase;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.springframework.beans.factory.annotation.Qualifier;
-import org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties;
-import org.springframework.cache.CacheManager;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
-import org.springframework.core.env.Environment;
-import org.springframework.data.elasticsearch.repository.ElasticsearchRepository;
 import org.springframework.data.elasticsearch.repository.config.EnableElasticsearchRepositories;
-import org.springframework.core.task.TaskExecutor;
+
 import org.springframework.data.jpa.repository.config.EnableJpaAuditing;
 import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
 import org.springframework.transaction.annotation.EnableTransactionManagement;
 
-import javax.sql.DataSource;
 
 @Configuration
 @EnableJpaRepositories("com.budderfly.sites.repository")
@@ -30,33 +21,4 @@ import javax.sql.DataSource;
 public class DatabaseConfiguration {
 
     private final Logger log = LoggerFactory.getLogger(DatabaseConfiguration.class);
-
-    private final Environment env;
-
-    private final CacheManager cacheManager;
-
-    public DatabaseConfiguration(Environment env, CacheManager cacheManager) {
-        this.env = env;
-    this.cacheManager = cacheManager;
-    }
-
-    @Bean
-    public SpringLiquibase liquibase(@Qualifier("taskExecutor") TaskExecutor taskExecutor,
-            DataSource dataSource, LiquibaseProperties liquibaseProperties) {
-
-        // Use liquibase.integration.spring.SpringLiquibase if you don't want Liquibase to start asynchronously
-        SpringLiquibase liquibase = new AsyncSpringLiquibase(taskExecutor, env);
-        liquibase.setDataSource(dataSource);
-        liquibase.setChangeLog("classpath:config/liquibase/master.xml");
-        liquibase.setContexts(liquibaseProperties.getContexts());
-        liquibase.setDefaultSchema(liquibaseProperties.getDefaultSchema());
-        liquibase.setDropFirst(liquibaseProperties.isDropFirst());
-        if (env.acceptsProfiles(JHipsterConstants.SPRING_PROFILE_NO_LIQUIBASE)) {
-            liquibase.setShouldRun(false);
-        } else {
-            liquibase.setShouldRun(liquibaseProperties.isEnabled());
-            log.debug("Configuring Liquibase");
-        }
-        return liquibase;
-    }
 }
diff --git a/src/main/java/com/budderfly/sites/config/DateTimeFormatConfiguration.java b/src/main/java/com/budderfly/sites/config/DateTimeFormatConfiguration.java
index 04e6d2b..895798a 100644
--- a/src/main/java/com/budderfly/sites/config/DateTimeFormatConfiguration.java
+++ b/src/main/java/com/budderfly/sites/config/DateTimeFormatConfiguration.java
@@ -3,10 +3,13 @@ package com.budderfly.sites.config;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.format.FormatterRegistry;
 import org.springframework.format.datetime.standard.DateTimeFormatterRegistrar;
-import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
+import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
 
+/**
+ * Configure the converters to use the ISO format for dates by default.
+ */
 @Configuration
-public class DateTimeFormatConfiguration extends WebMvcConfigurerAdapter {
+public class DateTimeFormatConfiguration implements WebMvcConfigurer {
 
     @Override
     public void addFormatters(FormatterRegistry registry) {
diff --git a/src/main/java/com/budderfly/sites/config/ElasticsearchConfiguration.java b/src/main/java/com/budderfly/sites/config/ElasticsearchConfiguration.java
index f632451..461e378 100644
--- a/src/main/java/com/budderfly/sites/config/ElasticsearchConfiguration.java
+++ b/src/main/java/com/budderfly/sites/config/ElasticsearchConfiguration.java
@@ -1,23 +1,48 @@
 package com.budderfly.sites.config;
 
-import java.io.IOException;
-
-import org.elasticsearch.client.Client;
+import com.fasterxml.jackson.databind.DeserializationFeature;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.SerializationFeature;
+import com.github.vanroy.springdata.jest.JestElasticsearchTemplate;
+import com.github.vanroy.springdata.jest.mapper.DefaultJestResultsMapper;
+import io.searchbox.client.JestClient;
+import org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchProperties;
+import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
-import org.springframework.data.elasticsearch.core.ElasticsearchTemplate;
+import org.springframework.context.annotation.Primary;
+import org.springframework.data.elasticsearch.core.ElasticsearchOperations;
 import org.springframework.data.elasticsearch.core.EntityMapper;
-import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;
+import org.springframework.data.elasticsearch.core.convert.ElasticsearchConverter;
+import org.springframework.data.elasticsearch.core.mapping.SimpleElasticsearchMappingContext;
 
-import com.fasterxml.jackson.databind.DeserializationFeature;
-import com.fasterxml.jackson.databind.ObjectMapper;
+import java.io.IOException;
 
 @Configuration
+@EnableConfigurationProperties(ElasticsearchProperties.class)
 public class ElasticsearchConfiguration {
 
+    private ObjectMapper mapper;
+
+    public ElasticsearchConfiguration(ObjectMapper mapper) {
+        this.mapper = mapper;
+    }
+
     @Bean
-    public ElasticsearchTemplate elasticsearchTemplate(Client client, Jackson2ObjectMapperBuilder jackson2ObjectMapperBuilder) {
-        return new ElasticsearchTemplate(client, new CustomEntityMapper(jackson2ObjectMapperBuilder.createXmlMapper(false).build()));
+    public EntityMapper getEntityMapper() {
+        return new CustomEntityMapper(mapper);
+    }
+
+    @Bean
+    @Primary
+    public ElasticsearchOperations elasticsearchTemplate(final JestClient jestClient,
+                                                         final ElasticsearchConverter elasticsearchConverter,
+                                                         final SimpleElasticsearchMappingContext simpleElasticsearchMappingContext,
+                                                         EntityMapper mapper) {
+        return new JestElasticsearchTemplate(
+            jestClient,
+            elasticsearchConverter,
+            new DefaultJestResultsMapper(simpleElasticsearchMappingContext, mapper));
     }
 
     public class CustomEntityMapper implements EntityMapper {
@@ -28,6 +53,9 @@ public class ElasticsearchConfiguration {
             this.objectMapper = objectMapper;
             objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
             objectMapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);
+            objectMapper.configure(SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS, true);
+            objectMapper.configure(SerializationFeature.INDENT_OUTPUT, false);
+            objectMapper.configure(DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS, true);
         }
 
         @Override
@@ -40,4 +68,5 @@ public class ElasticsearchConfiguration {
             return objectMapper.readValue(source, clazz);
         }
     }
+
 }
diff --git a/src/main/java/com/budderfly/sites/config/FeignConfiguration.java b/src/main/java/com/budderfly/sites/config/FeignConfiguration.java
index 5336629..8220dca 100644
--- a/src/main/java/com/budderfly/sites/config/FeignConfiguration.java
+++ b/src/main/java/com/budderfly/sites/config/FeignConfiguration.java
@@ -1,10 +1,18 @@
 package com.budderfly.sites.config;
 
-import org.springframework.cloud.netflix.feign.EnableFeignClients;
+import org.springframework.cloud.openfeign.EnableFeignClients;
+import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
 @Configuration
 @EnableFeignClients(basePackages = "com.budderfly.sites")
 public class FeignConfiguration {
 
+    /**
+     * Set the Feign specific log level to log client REST requests
+     */
+    @Bean
+    feign.Logger.Level feignLoggerLevel() {
+        return feign.Logger.Level.BASIC;
+    }
 }
diff --git a/src/main/java/com/budderfly/sites/config/JacksonConfiguration.java b/src/main/java/com/budderfly/sites/config/JacksonConfiguration.java
index 6875f3c..612dff4 100644
--- a/src/main/java/com/budderfly/sites/config/JacksonConfiguration.java
+++ b/src/main/java/com/budderfly/sites/config/JacksonConfiguration.java
@@ -1,16 +1,33 @@
 package com.budderfly.sites.config;
 
 import com.fasterxml.jackson.datatype.hibernate5.Hibernate5Module;
+import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;
+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
 import com.fasterxml.jackson.module.afterburner.AfterburnerModule;
 
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.zalando.problem.ProblemModule;
-import org.zalando.problem.validation.ConstraintViolationProblemModule;
+import org.zalando.problem.violations.ConstraintViolationProblemModule;
 
 @Configuration
 public class JacksonConfiguration {
 
+    /**
+     * Support for Java date and time API.
+     * @return the corresponding Jackson module.
+     */
+    @Bean
+    public JavaTimeModule javaTimeModule() {
+        return new JavaTimeModule();
+    }
+
+    @Bean
+    public Jdk8Module jdk8TimeModule() {
+        return new Jdk8Module();
+    }
+
+
     /*
      * Support for Hibernate types in Jackson.
      */
diff --git a/src/main/java/com/budderfly/sites/config/LiquibaseConfiguration.java b/src/main/java/com/budderfly/sites/config/LiquibaseConfiguration.java
new file mode 100644
index 0000000..52ce05c
--- /dev/null
+++ b/src/main/java/com/budderfly/sites/config/LiquibaseConfiguration.java
@@ -0,0 +1,53 @@
+package com.budderfly.sites.config;
+
+import javax.sql.DataSource;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.beans.factory.annotation.Qualifier;
+import org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties;
+import org.springframework.cache.CacheManager;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.core.env.Environment;
+import org.springframework.core.task.TaskExecutor;
+
+import io.github.jhipster.config.JHipsterConstants;
+import io.github.jhipster.config.liquibase.AsyncSpringLiquibase;
+import liquibase.integration.spring.SpringLiquibase;
+
+@Configuration
+public class LiquibaseConfiguration {
+
+    private final Logger log = LoggerFactory.getLogger(LiquibaseConfiguration.class);
+
+    private final Environment env;
+
+    private final CacheManager cacheManager;
+
+    public LiquibaseConfiguration(Environment env, CacheManager cacheManager) {
+        this.env = env;
+        this.cacheManager = cacheManager;
+    }
+
+    @Bean
+    public SpringLiquibase liquibase(@Qualifier("taskExecutor") TaskExecutor taskExecutor,
+            DataSource dataSource, LiquibaseProperties liquibaseProperties) {
+
+        // Use liquibase.integration.spring.SpringLiquibase if you don't want Liquibase to start asynchronously
+        SpringLiquibase liquibase = new AsyncSpringLiquibase(taskExecutor, env);
+        liquibase.setDataSource(dataSource);
+        liquibase.setChangeLog("classpath:config/liquibase/master.xml");
+        liquibase.setContexts(liquibaseProperties.getContexts());
+        liquibase.setDefaultSchema(liquibaseProperties.getDefaultSchema());
+        liquibase.setDropFirst(liquibaseProperties.isDropFirst());
+        liquibase.setChangeLogParameters(liquibaseProperties.getParameters());
+        if (env.acceptsProfiles(JHipsterConstants.SPRING_PROFILE_NO_LIQUIBASE)) {
+            liquibase.setShouldRun(false);
+        } else {
+            liquibase.setShouldRun(liquibaseProperties.isEnabled());
+            log.debug("Configuring Liquibase");
+        }
+        return liquibase;
+    }
+}
diff --git a/src/main/java/com/budderfly/sites/config/LocaleConfiguration.java b/src/main/java/com/budderfly/sites/config/LocaleConfiguration.java
index 1e4e6a4..1866c45 100644
--- a/src/main/java/com/budderfly/sites/config/LocaleConfiguration.java
+++ b/src/main/java/com/budderfly/sites/config/LocaleConfiguration.java
@@ -2,22 +2,14 @@ package com.budderfly.sites.config;
 
 import io.github.jhipster.config.locale.AngularCookieLocaleResolver;
 
-import org.springframework.context.EnvironmentAware;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
-import org.springframework.core.env.Environment;
 import org.springframework.web.servlet.LocaleResolver;
-import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
-import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
+import org.springframework.web.servlet.config.annotation.*;
 import org.springframework.web.servlet.i18n.LocaleChangeInterceptor;
 
 @Configuration
-public class LocaleConfiguration extends WebMvcConfigurerAdapter implements EnvironmentAware {
-
-    @Override
-    public void setEnvironment(Environment environment) {
-        // unused
-    }
+public class LocaleConfiguration implements WebMvcConfigurer {
 
     @Bean(name = "localeResolver")
     public LocaleResolver localeResolver() {
diff --git a/src/main/java/com/budderfly/sites/config/LoggingConfiguration.java b/src/main/java/com/budderfly/sites/config/LoggingConfiguration.java
index 9db46c6..8dad1ec 100644
--- a/src/main/java/com/budderfly/sites/config/LoggingConfiguration.java
+++ b/src/main/java/com/budderfly/sites/config/LoggingConfiguration.java
@@ -21,10 +21,7 @@ import net.logstash.logback.stacktrace.ShortenedThrowableConverter;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Value;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
-import org.springframework.cloud.netflix.eureka.EurekaInstanceConfigBean;
 import org.springframework.cloud.context.config.annotation.RefreshScope;
-import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.annotation.Configuration;
 
 @Configuration
@@ -43,17 +40,14 @@ public class LoggingConfiguration {
 
     private final String serverPort;
 
-    private final EurekaInstanceConfigBean eurekaInstanceConfigBean;
-
     private final String version;
 
     private final JHipsterProperties jHipsterProperties;
 
     public LoggingConfiguration(@Value("${spring.application.name}") String appName, @Value("${server.port}") String serverPort,
-        @Autowired(required = false) EurekaInstanceConfigBean eurekaInstanceConfigBean, @Value("${info.project.version}") String version, JHipsterProperties jHipsterProperties) {
+         @Value("${info.project.version:}") String version, JHipsterProperties jHipsterProperties) {
         this.appName = appName;
         this.serverPort = serverPort;
-        this.eurekaInstanceConfigBean = eurekaInstanceConfigBean;
         this.version = version;
         this.jHipsterProperties = jHipsterProperties;
         if (jHipsterProperties.getLogging().getLogstash().isEnabled()) {
@@ -78,18 +72,15 @@ public class LoggingConfiguration {
         logstashAppender.setName(LOGSTASH_APPENDER_NAME);
         logstashAppender.setContext(context);
         String optionalFields = "";
-        if (eurekaInstanceConfigBean != null) {
-            optionalFields = "\"instance_id\":\"" + eurekaInstanceConfigBean.getInstanceId() + "\",";
-        }
         String customFields = "{\"app_name\":\"" + appName + "\",\"app_port\":\"" + serverPort + "\"," +
             optionalFields + "\"version\":\"" + version + "\"}";
 
         // More documentation is available at: https://github.com/logstash/logstash-logback-encoder
-        LogstashEncoder logstashEncoder=new LogstashEncoder();
+        LogstashEncoder logstashEncoder = new LogstashEncoder();
         // Set the Logstash appender config from JHipster properties
         logstashEncoder.setCustomFields(customFields);
         // Set the Logstash appender config from JHipster properties
-        logstashAppender.addDestinations(new InetSocketAddress(jHipsterProperties.getLogging().getLogstash().getHost(),jHipsterProperties.getLogging().getLogstash().getPort()));
+        logstashAppender.addDestinations(new InetSocketAddress(jHipsterProperties.getLogging().getLogstash().getHost(), jHipsterProperties.getLogging().getLogstash().getPort()));
 
         ShortenedThrowableConverter throwableConverter = new ShortenedThrowableConverter();
         throwableConverter.setRootCauseFirst(true);
diff --git a/src/main/java/com/budderfly/sites/config/MetricsConfiguration.java b/src/main/java/com/budderfly/sites/config/MetricsConfiguration.java
index ee07f62..a9c8eda 100644
--- a/src/main/java/com/budderfly/sites/config/MetricsConfiguration.java
+++ b/src/main/java/com/budderfly/sites/config/MetricsConfiguration.java
@@ -1,14 +1,6 @@
 package com.budderfly.sites.config;
 
 import io.github.jhipster.config.JHipsterProperties;
-import io.github.jhipster.config.metrics.SpectatorLogMetricWriter;
-
-import com.netflix.spectator.api.Registry;
-import org.springframework.boot.actuate.autoconfigure.ExportMetricReader;
-import org.springframework.boot.actuate.autoconfigure.ExportMetricWriter;
-import org.springframework.boot.actuate.metrics.writer.MetricWriter;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
-import org.springframework.cloud.netflix.metrics.spectator.SpectatorMetricReader;
 
 import com.codahale.metrics.JmxReporter;
 import com.codahale.metrics.JvmAttributeGaugeSet;
@@ -19,20 +11,25 @@ import com.codahale.metrics.jvm.*;
 import com.ryantenney.metrics.spring.config.annotation.EnableMetrics;
 import com.ryantenney.metrics.spring.config.annotation.MetricsConfigurerAdapter;
 import com.zaxxer.hikari.HikariDataSource;
+import io.prometheus.client.CollectorRegistry;
+import io.prometheus.client.dropwizard.DropwizardExports;
+import io.prometheus.client.exporter.MetricsServlet;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.slf4j.Marker;
 import org.slf4j.MarkerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.web.servlet.ServletContextInitializer;
 import org.springframework.context.annotation.*;
 
 import javax.annotation.PostConstruct;
+import javax.servlet.ServletContext;
 import java.lang.management.ManagementFactory;
 import java.util.concurrent.TimeUnit;
 
 @Configuration
 @EnableMetrics(proxyTargetClass = true)
-public class MetricsConfiguration extends MetricsConfigurerAdapter {
+public class MetricsConfiguration extends MetricsConfigurerAdapter implements ServletContextInitializer {
 
     private static final String PROP_METRIC_REG_JVM_MEMORY = "jvm.memory";
     private static final String PROP_METRIC_REG_JVM_GARBAGE = "jvm.garbage";
@@ -83,6 +80,8 @@ public class MetricsConfiguration extends MetricsConfigurerAdapter {
         metricRegistry.register(PROP_METRIC_REG_JVM_ATTRIBUTE_SET, new JvmAttributeGaugeSet());
         if (hikariDataSource != null) {
             log.debug("Monitoring the datasource");
+            // remove the factory created by HikariDataSourceMetricsPostProcessor until JHipster migrate to Micrometer
+            hikariDataSource.setMetricsTrackerFactory(null);
             hikariDataSource.setMetricRegistry(metricRegistry);
         }
         if (jHipsterProperties.getMetrics().getJmx().isEnabled()) {
@@ -103,19 +102,18 @@ public class MetricsConfiguration extends MetricsConfigurerAdapter {
         }
     }
 
-    /* Spectator metrics log reporting */
-    @Bean
-    @ConditionalOnProperty("jhipster.logging.spectator-metrics.enabled")
-    @ExportMetricReader
-    public SpectatorMetricReader spectatorMetricReader(Registry registry) {
-        log.info("Initializing Spectator Metrics Log reporting");
-        return new SpectatorMetricReader(registry);
-    }
+    @Override
+    public void onStartup(ServletContext servletContext) {
 
-    @Bean
-    @ConditionalOnProperty("jhipster.logging.spectator-metrics.enabled")
-    @ExportMetricWriter
-    MetricWriter metricWriter() {
-        return new SpectatorLogMetricWriter();
+        if (jHipsterProperties.getMetrics().getPrometheus().isEnabled()) {
+            String endpoint = jHipsterProperties.getMetrics().getPrometheus().getEndpoint();
+
+            log.debug("Initializing prometheus metrics exporting via {}", endpoint);
+
+            CollectorRegistry.defaultRegistry.register(new DropwizardExports(metricRegistry));
+            servletContext
+                .addServlet("prometheusMetrics", new MetricsServlet(CollectorRegistry.defaultRegistry))
+                .addMapping(endpoint);
+        }
     }
 }
diff --git a/src/main/java/com/budderfly/sites/config/MicroserviceSecurityConfiguration.java b/src/main/java/com/budderfly/sites/config/MicroserviceSecurityConfiguration.java
deleted file mode 100644
index be211dd..0000000
--- a/src/main/java/com/budderfly/sites/config/MicroserviceSecurityConfiguration.java
+++ /dev/null
@@ -1,76 +0,0 @@
-package com.budderfly.sites.config;
-
-import com.budderfly.sites.config.oauth2.OAuth2JwtAccessTokenConverter;
-import com.budderfly.sites.config.oauth2.OAuth2Properties;
-import com.budderfly.sites.security.oauth2.OAuth2SignatureVerifierClient;
-import com.budderfly.sites.security.AuthoritiesConstants;
-
-import org.springframework.beans.factory.annotation.Qualifier;
-import org.springframework.cloud.client.loadbalancer.RestTemplateCustomizer;
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
-import org.springframework.security.config.annotation.web.builders.HttpSecurity;
-import org.springframework.security.config.http.SessionCreationPolicy;
-import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;
-import org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;
-import org.springframework.security.oauth2.provider.token.TokenStore;
-import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;
-import org.springframework.security.oauth2.provider.token.store.JwtTokenStore;
-import org.springframework.security.web.csrf.CookieCsrfTokenRepository;
-import org.springframework.web.client.RestTemplate;
-
-@Configuration
-@EnableResourceServer
-@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)
-public class MicroserviceSecurityConfiguration extends ResourceServerConfigurerAdapter {
-    private final OAuth2Properties oAuth2Properties;
-
-    public MicroserviceSecurityConfiguration(OAuth2Properties oAuth2Properties) {
-        this.oAuth2Properties = oAuth2Properties;
-    }
-
-    @Override
-    public void configure(HttpSecurity http) throws Exception {
-        http
-            .csrf()
-            .disable()
-            .headers()
-            .frameOptions()
-            .disable()
-        .and()
-            .sessionManagement()
-            .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
-        .and()
-            .authorizeRequests()
-            .antMatchers("/api/profile-info").permitAll()
-            .antMatchers("/api/**").authenticated()
-            .antMatchers("/management/health").permitAll()
-            .antMatchers("/management/**").hasAuthority(AuthoritiesConstants.ADMIN)
-            .antMatchers("/swagger-resources/configuration/ui").permitAll();
-    }
-
-    @Bean
-    public TokenStore tokenStore(JwtAccessTokenConverter jwtAccessTokenConverter) {
-        return new JwtTokenStore(jwtAccessTokenConverter);
-    }
-
-    @Bean
-    public JwtAccessTokenConverter jwtAccessTokenConverter(OAuth2SignatureVerifierClient signatureVerifierClient) {
-        return new OAuth2JwtAccessTokenConverter(oAuth2Properties, signatureVerifierClient);
-    }
-
-    @Bean
-	@Qualifier("loadBalancedRestTemplate")
-    public RestTemplate loadBalancedRestTemplate(RestTemplateCustomizer customizer) {
-        RestTemplate restTemplate = new RestTemplate();
-        customizer.customize(restTemplate);
-        return restTemplate;
-    }
-
-    @Bean
-    @Qualifier("vanillaRestTemplate")
-    public RestTemplate vanillaRestTemplate() {
-        return new RestTemplate();
-    }
-}
diff --git a/src/main/java/com/budderfly/sites/config/SecurityConfiguration.java b/src/main/java/com/budderfly/sites/config/SecurityConfiguration.java
new file mode 100644
index 0000000..b76ac53
--- /dev/null
+++ b/src/main/java/com/budderfly/sites/config/SecurityConfiguration.java
@@ -0,0 +1,75 @@
+package com.budderfly.sites.config;
+
+import com.budderfly.sites.config.oauth2.OAuth2JwtAccessTokenConverter;
+import com.budderfly.sites.config.oauth2.OAuth2Properties;
+import com.budderfly.sites.security.oauth2.OAuth2SignatureVerifierClient;
+import com.budderfly.sites.security.AuthoritiesConstants;
+
+import org.springframework.beans.factory.annotation.Qualifier;
+import org.springframework.cloud.client.loadbalancer.RestTemplateCustomizer;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
+import org.springframework.security.config.annotation.web.builders.HttpSecurity;
+import org.springframework.security.config.http.SessionCreationPolicy;
+import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;
+import org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;
+import org.springframework.security.oauth2.provider.token.TokenStore;
+import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;
+import org.springframework.security.oauth2.provider.token.store.JwtTokenStore;
+import org.springframework.security.web.csrf.CookieCsrfTokenRepository;
+import org.springframework.web.client.RestTemplate;
+
+@Configuration
+@EnableResourceServer
+@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)
+public class SecurityConfiguration extends ResourceServerConfigurerAdapter {
+    private final OAuth2Properties oAuth2Properties;
+
+    public SecurityConfiguration(OAuth2Properties oAuth2Properties) {
+        this.oAuth2Properties = oAuth2Properties;
+    }
+
+    @Override
+    public void configure(HttpSecurity http) throws Exception {
+        http
+            .csrf()
+            .disable()
+            .headers()
+            .frameOptions()
+            .disable()
+        .and()
+            .sessionManagement()
+            .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
+        .and()
+            .authorizeRequests()
+            .antMatchers("/api/**").authenticated()
+            .antMatchers("/management/health").permitAll()
+            .antMatchers("/management/info").permitAll()
+            .antMatchers("/management/**").hasAuthority(AuthoritiesConstants.ADMIN);
+    }
+
+    @Bean
+    public TokenStore tokenStore(JwtAccessTokenConverter jwtAccessTokenConverter) {
+        return new JwtTokenStore(jwtAccessTokenConverter);
+    }
+
+    @Bean
+    public JwtAccessTokenConverter jwtAccessTokenConverter(OAuth2SignatureVerifierClient signatureVerifierClient) {
+        return new OAuth2JwtAccessTokenConverter(oAuth2Properties, signatureVerifierClient);
+    }
+
+    @Bean
+	@Qualifier("loadBalancedRestTemplate")
+    public RestTemplate loadBalancedRestTemplate(RestTemplateCustomizer customizer) {
+        RestTemplate restTemplate = new RestTemplate();
+        customizer.customize(restTemplate);
+        return restTemplate;
+    }
+
+    @Bean
+    @Qualifier("vanillaRestTemplate")
+    public RestTemplate vanillaRestTemplate() {
+        return new RestTemplate();
+    }
+}
diff --git a/src/main/java/com/budderfly/sites/config/ThymeleafConfiguration.java b/src/main/java/com/budderfly/sites/config/ThymeleafConfiguration.java
deleted file mode 100644
index b3d8871..0000000
--- a/src/main/java/com/budderfly/sites/config/ThymeleafConfiguration.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.budderfly.sites.config;
-
-import org.apache.commons.lang3.CharEncoding;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.springframework.context.annotation.*;
-import org.thymeleaf.templateresolver.ClassLoaderTemplateResolver;
-
-@Configuration
-public class ThymeleafConfiguration {
-
-    @SuppressWarnings("unused")
-    private final Logger log = LoggerFactory.getLogger(ThymeleafConfiguration.class);
-
-    @Bean
-    @Description("Thymeleaf template resolver serving HTML 5 emails")
-    public ClassLoaderTemplateResolver emailTemplateResolver() {
-        ClassLoaderTemplateResolver emailTemplateResolver = new ClassLoaderTemplateResolver();
-        emailTemplateResolver.setPrefix("mails/");
-        emailTemplateResolver.setSuffix(".html");
-        emailTemplateResolver.setTemplateMode("HTML5");
-        emailTemplateResolver.setCharacterEncoding(CharEncoding.UTF_8);
-        emailTemplateResolver.setOrder(1);
-        return emailTemplateResolver;
-    }
-}
diff --git a/src/main/java/com/budderfly/sites/config/WebConfigurer.java b/src/main/java/com/budderfly/sites/config/WebConfigurer.java
index dd388c8..dd66bf9 100644
--- a/src/main/java/com/budderfly/sites/config/WebConfigurer.java
+++ b/src/main/java/com/budderfly/sites/config/WebConfigurer.java
@@ -1,36 +1,35 @@
 package com.budderfly.sites.config;
 
-import io.github.jhipster.config.JHipsterConstants;
-import io.github.jhipster.config.JHipsterProperties;
-
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.servlet.InstrumentedFilter;
 import com.codahale.metrics.servlets.MetricsServlet;
-import com.hazelcast.core.HazelcastInstance;
-
+import io.github.jhipster.config.JHipsterProperties;
+import io.undertow.UndertowOptions;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.context.embedded.*;
-import org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory;
-import io.undertow.UndertowOptions;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.server.*;
 import org.springframework.boot.web.servlet.ServletContextInitializer;
+import org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.core.env.Environment;
+import org.springframework.http.MediaType;
 import org.springframework.web.cors.CorsConfiguration;
 import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
 import org.springframework.web.filter.CorsFilter;
-import org.springframework.http.MediaType;
 
-import java.util.*;
 import javax.servlet.*;
+import java.nio.charset.StandardCharsets;
+import java.util.*;
+
 
 /**
  * Configuration of web application with Servlet 3.0 APIs.
  */
 @Configuration
-public class WebConfigurer implements ServletContextInitializer, EmbeddedServletContainerCustomizer {
+public class WebConfigurer implements ServletContextInitializer, WebServerFactoryCustomizer<WebServerFactory> {
 
     private final Logger log = LoggerFactory.getLogger(WebConfigurer.class);
 
@@ -38,15 +37,12 @@ public class WebConfigurer implements ServletContextInitializer, EmbeddedServlet
 
     private final JHipsterProperties jHipsterProperties;
 
-    private final HazelcastInstance hazelcastInstance;
-
     private MetricRegistry metricRegistry;
 
-    public WebConfigurer(Environment env, JHipsterProperties jHipsterProperties, HazelcastInstance hazelcastInstance) {
+    public WebConfigurer(Environment env, JHipsterProperties jHipsterProperties) {
 
         this.env = env;
         this.jHipsterProperties = jHipsterProperties;
-        this.hazelcastInstance = hazelcastInstance;
     }
 
     @Override
@@ -63,13 +59,8 @@ public class WebConfigurer implements ServletContextInitializer, EmbeddedServlet
      * Customize the Servlet engine: Mime types, the document root, the cache.
      */
     @Override
-    public void customize(ConfigurableEmbeddedServletContainer container) {
-        MimeMappings mappings = new MimeMappings(MimeMappings.DEFAULT);
-        // IE issue, see https://github.com/jhipster/generator-jhipster/pull/711
-        mappings.add("html", MediaType.TEXT_HTML_VALUE + ";charset=utf-8");
-        // CloudFoundry issue, see https://github.com/cloudfoundry/gorouter/issues/64
-        mappings.add("json", MediaType.TEXT_HTML_VALUE + ";charset=utf-8");
-        container.setMimeMappings(mappings);
+    public void customize(WebServerFactory server) {
+        setMimeMappings(server);
 
         /*
          * Enable HTTP/2 for Undertow - https://twitter.com/ankinson/status/829256167700492288
@@ -78,14 +69,26 @@ public class WebConfigurer implements ServletContextInitializer, EmbeddedServlet
          * for more information.
          */
         if (jHipsterProperties.getHttp().getVersion().equals(JHipsterProperties.Http.Version.V_2_0) &&
-            container instanceof UndertowEmbeddedServletContainerFactory) {
+            server instanceof UndertowServletWebServerFactory) {
 
-            ((UndertowEmbeddedServletContainerFactory) container)
+            ((UndertowServletWebServerFactory) server)
                 .addBuilderCustomizers(builder ->
                     builder.setServerOption(UndertowOptions.ENABLE_HTTP2, true));
         }
     }
 
+    private void setMimeMappings(WebServerFactory server) {
+        if (server instanceof ConfigurableServletWebServerFactory) {
+            MimeMappings mappings = new MimeMappings(MimeMappings.DEFAULT);
+            // IE issue, see https://github.com/jhipster/generator-jhipster/pull/711
+            mappings.add("html", MediaType.TEXT_HTML_VALUE + ";charset=" + StandardCharsets.UTF_8.name().toLowerCase());
+            // CloudFoundry issue, see https://github.com/cloudfoundry/gorouter/issues/64
+            mappings.add("json", MediaType.TEXT_HTML_VALUE + ";charset=" + StandardCharsets.UTF_8.name().toLowerCase());
+            ConfigurableServletWebServerFactory servletWebServer = (ConfigurableServletWebServerFactory) server;
+            servletWebServer.setMimeMappings(mappings);
+        }
+    }
+
     /**
      * Initializes Metrics.
      */
diff --git a/src/main/java/com/budderfly/sites/config/audit/AuditEventConverter.java b/src/main/java/com/budderfly/sites/config/audit/AuditEventConverter.java
index 7adddb8..99b704f 100644
--- a/src/main/java/com/budderfly/sites/config/audit/AuditEventConverter.java
+++ b/src/main/java/com/budderfly/sites/config/audit/AuditEventConverter.java
@@ -38,7 +38,7 @@ public class AuditEventConverter {
         if (persistentAuditEvent == null) {
             return null;
         }
-        return new AuditEvent(Date.from(persistentAuditEvent.getAuditEventDate()), persistentAuditEvent.getPrincipal(),
+        return new AuditEvent(persistentAuditEvent.getAuditEventDate(), persistentAuditEvent.getPrincipal(),
             persistentAuditEvent.getAuditEventType(), convertDataToObjects(persistentAuditEvent.getData()));
     }
 
@@ -71,21 +71,16 @@ public class AuditEventConverter {
 
         if (data != null) {
             for (Map.Entry<String, Object> entry : data.entrySet()) {
-                Object object = entry.getValue();
-
                 // Extract the data that will be saved.
-                if (object instanceof WebAuthenticationDetails) {
-                    WebAuthenticationDetails authenticationDetails = (WebAuthenticationDetails) object;
+                if (entry.getValue() instanceof WebAuthenticationDetails) {
+                    WebAuthenticationDetails authenticationDetails = (WebAuthenticationDetails) entry.getValue();
                     results.put("remoteAddress", authenticationDetails.getRemoteAddress());
                     results.put("sessionId", authenticationDetails.getSessionId());
-                } else if (object != null) {
-                    results.put(entry.getKey(), object.toString());
                 } else {
-                    results.put(entry.getKey(), "null");
+                    results.put(entry.getKey(), Objects.toString(entry.getValue()));
                 }
             }
         }
-
         return results;
     }
 }
diff --git a/src/main/java/com/budderfly/sites/config/oauth2/OAuth2JwtAccessTokenConverter.java b/src/main/java/com/budderfly/sites/config/oauth2/OAuth2JwtAccessTokenConverter.java
index 55b0fc8..09c02f5 100644
--- a/src/main/java/com/budderfly/sites/config/oauth2/OAuth2JwtAccessTokenConverter.java
+++ b/src/main/java/com/budderfly/sites/config/oauth2/OAuth2JwtAccessTokenConverter.java
@@ -6,6 +6,7 @@ import org.slf4j.LoggerFactory;
 import org.springframework.security.jwt.crypto.sign.SignatureVerifier;
 import org.springframework.security.oauth2.common.exceptions.InvalidTokenException;
 import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;
+import org.springframework.security.oauth2.provider.OAuth2Authentication;
 
 import java.util.Map;
 
@@ -66,7 +67,7 @@ public class OAuth2JwtAccessTokenConverter extends JwtAccessTokenConverter {
         }
         try {
             SignatureVerifier verifier = signatureVerifierClient.getSignatureVerifier();
-            if(verifier!=null) {
+            if (verifier != null) {
                 setVerifier(verifier);
                 lastKeyFetchTimestamp = t;
                 log.debug("Public key retrieved from OAuth2 server to create SignatureVerifier");
@@ -77,4 +78,32 @@ public class OAuth2JwtAccessTokenConverter extends JwtAccessTokenConverter {
         }
         return false;
     }
+    /**
+     * Extract JWT claims and set it to OAuth2Authentication decoded details.
+     * Here is how to get details:
+     *
+     * <pre>
+     * <code>
+     *  SecurityContext securityContext = SecurityContextHolder.getContext();
+     *  Authentication authentication = securityContext.getAuthentication();
+     *  if (authentication != null) {
+     *      Object details = authentication.getDetails();
+     *      if (details instanceof OAuth2AuthenticationDetails) {
+     *          Object decodedDetails = ((OAuth2AuthenticationDetails) details).getDecodedDetails();
+     *          if (decodedDetails != null &amp;&amp; decodedDetails instanceof Map) {
+     *             String detailFoo = ((Map) decodedDetails).get("foo");
+     *          }
+     *      }
+     *  }
+     * </code>
+     *  </pre>
+     * @param claims OAuth2JWTToken claims
+     * @return OAuth2Authentication
+     */
+    @Override
+    public OAuth2Authentication extractAuthentication(Map<String, ?> claims) {
+        OAuth2Authentication authentication = super.extractAuthentication(claims);
+        authentication.setDetails(claims);
+        return authentication;
+    }
 }
diff --git a/src/main/java/com/budderfly/sites/domain/AbstractAuditingEntity.java b/src/main/java/com/budderfly/sites/domain/AbstractAuditingEntity.java
index 91fb72f..1b41ca4 100644
--- a/src/main/java/com/budderfly/sites/domain/AbstractAuditingEntity.java
+++ b/src/main/java/com/budderfly/sites/domain/AbstractAuditingEntity.java
@@ -1,7 +1,5 @@
 package com.budderfly.sites.domain;
 
-import java.io.Serializable;
-
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import org.hibernate.envers.Audited;
 import org.springframework.data.annotation.CreatedBy;
@@ -9,6 +7,8 @@ import org.springframework.data.annotation.CreatedDate;
 import org.springframework.data.annotation.LastModifiedBy;
 import org.springframework.data.annotation.LastModifiedDate;
 import org.springframework.data.jpa.domain.support.AuditingEntityListener;
+
+import java.io.Serializable;
 import java.time.Instant;
 import javax.persistence.Column;
 import javax.persistence.EntityListeners;
@@ -31,7 +31,7 @@ public abstract class AbstractAuditingEntity implements Serializable {
     private String createdBy;
 
     @CreatedDate
-    @Column(name = "created_date", nullable = false)
+    @Column(name = "created_date", updatable = false)
     @JsonIgnore
     private Instant createdDate = Instant.now();
 
diff --git a/src/main/java/com/budderfly/sites/domain/PersistentAuditEvent.java b/src/main/java/com/budderfly/sites/domain/PersistentAuditEvent.java
index a445ddc..c3d1223 100644
--- a/src/main/java/com/budderfly/sites/domain/PersistentAuditEvent.java
+++ b/src/main/java/com/budderfly/sites/domain/PersistentAuditEvent.java
@@ -5,6 +5,7 @@ import javax.validation.constraints.NotNull;
 import java.io.Serializable;
 import java.time.Instant;
 import java.util.HashMap;
+import java.util.Objects;
 import java.util.Map;
 
 /**
@@ -16,6 +17,8 @@ import java.util.Map;
 @Table(name = "jhi_persistent_audit_event")
 public class PersistentAuditEvent implements Serializable {
 
+    private static final long serialVersionUID = 1L;
+
     @Id
     @GeneratedValue(strategy = GenerationType.IDENTITY)
     @Column(name = "event_id")
@@ -76,4 +79,31 @@ public class PersistentAuditEvent implements Serializable {
     public void setData(Map<String, String> data) {
         this.data = data;
     }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) {
+            return true;
+        }
+        if (o == null || getClass() != o.getClass()) {
+            return false;
+        }
+
+        PersistentAuditEvent persistentAuditEvent = (PersistentAuditEvent) o;
+        return !(persistentAuditEvent.getId() == null || getId() == null) && Objects.equals(getId(), persistentAuditEvent.getId());
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hashCode(getId());
+    }
+
+    @Override
+    public String toString() {
+        return "PersistentAuditEvent{" +
+            "principal='" + principal + '\'' +
+            ", auditEventDate=" + auditEventDate +
+            ", auditEventType='" + auditEventType + '\'' +
+            '}';
+    }
 }
diff --git a/src/main/java/com/budderfly/sites/domain/Site.java b/src/main/java/com/budderfly/sites/domain/Site.java
index 13d2d36..735cbbf 100644
--- a/src/main/java/com/budderfly/sites/domain/Site.java
+++ b/src/main/java/com/budderfly/sites/domain/Site.java
@@ -1,5 +1,6 @@
 package com.budderfly.sites.domain;
 
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import org.hibernate.annotations.Cache;
 import org.hibernate.annotations.CacheConcurrencyStrategy;
 
@@ -108,6 +109,7 @@ public class Site implements Serializable {
     private Boolean rollBilling;
 
     @ManyToOne
+    @JsonIgnoreProperties("")
     private Site parentSite;
 
     // jhipster-needle-entity-add-field - JHipster will add fields here, do not remove
diff --git a/src/main/java/com/budderfly/sites/repository/SiteRepository.java b/src/main/java/com/budderfly/sites/repository/SiteRepository.java
index 095f0c0..275d26e 100644
--- a/src/main/java/com/budderfly/sites/repository/SiteRepository.java
+++ b/src/main/java/com/budderfly/sites/repository/SiteRepository.java
@@ -1,13 +1,12 @@
 package com.budderfly.sites.repository;
 
 import com.budderfly.sites.domain.Site;
-import org.springframework.stereotype.Repository;
-
 import org.springframework.data.jpa.repository.*;
+import org.springframework.stereotype.Repository;
 
 
 /**
- * Spring Data JPA repository for the Site entity.
+ * Spring Data  repository for the Site entity.
  */
 @SuppressWarnings("unused")
 @Repository
diff --git a/src/main/java/com/budderfly/sites/security/SpringSecurityAuditorAware.java b/src/main/java/com/budderfly/sites/security/SpringSecurityAuditorAware.java
index dfc6348..2c0d849 100644
--- a/src/main/java/com/budderfly/sites/security/SpringSecurityAuditorAware.java
+++ b/src/main/java/com/budderfly/sites/security/SpringSecurityAuditorAware.java
@@ -2,6 +2,8 @@ package com.budderfly.sites.security;
 
 import com.budderfly.sites.config.Constants;
 
+import java.util.Optional;
+
 import org.springframework.data.domain.AuditorAware;
 import org.springframework.stereotype.Component;
 
@@ -12,7 +14,7 @@ import org.springframework.stereotype.Component;
 public class SpringSecurityAuditorAware implements AuditorAware<String> {
 
     @Override
-    public String getCurrentAuditor() {
-        return SecurityUtils.getCurrentUserLogin().orElse(Constants.SYSTEM_ACCOUNT);
+    public Optional<String> getCurrentAuditor() {
+        return Optional.of(SecurityUtils.getCurrentUserLogin().orElse(Constants.SYSTEM_ACCOUNT));
     }
 }
diff --git a/src/main/java/com/budderfly/sites/security/package-info.java b/src/main/java/com/budderfly/sites/security/package-info.java
new file mode 100644
index 0000000..3c30080
--- /dev/null
+++ b/src/main/java/com/budderfly/sites/security/package-info.java
@@ -0,0 +1,4 @@
+/**
+ * Spring Security configuration.
+ */
+package com.budderfly.sites.security;
diff --git a/src/main/java/com/budderfly/sites/service/SiteQueryService.java b/src/main/java/com/budderfly/sites/service/SiteQueryService.java
index 6106312..b0efe31 100644
--- a/src/main/java/com/budderfly/sites/service/SiteQueryService.java
+++ b/src/main/java/com/budderfly/sites/service/SiteQueryService.java
@@ -1,13 +1,14 @@
 package com.budderfly.sites.service;
 
-
 import java.util.List;
 
+import javax.persistence.criteria.JoinType;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
-import org.springframework.data.jpa.domain.Specifications;
+import org.springframework.data.jpa.domain.Specification;
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
 
@@ -18,17 +19,12 @@ import com.budderfly.sites.domain.*; // for static metamodels
 import com.budderfly.sites.repository.SiteRepository;
 import com.budderfly.sites.repository.search.SiteSearchRepository;
 import com.budderfly.sites.service.dto.SiteCriteria;
-
 import com.budderfly.sites.service.dto.SiteDTO;
 import com.budderfly.sites.service.mapper.SiteMapper;
-import com.budderfly.sites.domain.enumeration.SiteStatus;
-import com.budderfly.sites.domain.enumeration.BillingType;
-import com.budderfly.sites.domain.enumeration.PaymentType;
-import com.budderfly.sites.domain.enumeration.SiteType;
 
 /**
  * Service for executing complex queries for Site entities in the database.
- * The main input is a {@link SiteCriteria} which get's converted to {@link Specifications},
+ * The main input is a {@link SiteCriteria} which gets converted to {@link Specification},
  * in a way that all the filters must apply.
  * It returns a {@link List} of {@link SiteDTO} or a {@link Page} of {@link SiteDTO} which fulfills the criteria.
  */
@@ -38,7 +34,6 @@ public class SiteQueryService extends QueryService<Site> {
 
     private final Logger log = LoggerFactory.getLogger(SiteQueryService.class);
 
-
     private final SiteRepository siteRepository;
 
     private final SiteMapper siteMapper;
@@ -59,7 +54,7 @@ public class SiteQueryService extends QueryService<Site> {
     @Transactional(readOnly = true)
     public List<SiteDTO> findByCriteria(SiteCriteria criteria) {
         log.debug("find by criteria : {}", criteria);
-        final Specifications<Site> specification = createSpecification(criteria);
+        final Specification<Site> specification = createSpecification(criteria);
         return siteMapper.toDto(siteRepository.findAll(specification));
     }
 
@@ -72,16 +67,28 @@ public class SiteQueryService extends QueryService<Site> {
     @Transactional(readOnly = true)
     public Page<SiteDTO> findByCriteria(SiteCriteria criteria, Pageable page) {
         log.debug("find by criteria : {}, page: {}", criteria, page);
-        final Specifications<Site> specification = createSpecification(criteria);
-        final Page<Site> result = siteRepository.findAll(specification, page);
-        return result.map(siteMapper::toDto);
+        final Specification<Site> specification = createSpecification(criteria);
+        return siteRepository.findAll(specification, page)
+            .map(siteMapper::toDto);
     }
 
     /**
-     * Function to convert SiteCriteria to a {@link Specifications}
+     * Return the number of matching entities in the database
+     * @param criteria The object which holds all the filters, which the entities should match.
+     * @return the number of matching entities.
      */
-    private Specifications<Site> createSpecification(SiteCriteria criteria) {
-        Specifications<Site> specification = Specifications.where(null);
+    @Transactional(readOnly = true)
+    public long countByCriteria(SiteCriteria criteria) {
+        log.debug("count by criteria : {}", criteria);
+        final Specification<Site> specification = createSpecification(criteria);
+        return siteRepository.count(specification);
+    }
+
+    /**
+     * Function to convert SiteCriteria to a {@link Specification}
+     */
+    private Specification<Site> createSpecification(SiteCriteria criteria) {
+        Specification<Site> specification = Specification.where(null);
         if (criteria != null) {
             if (criteria.getId() != null) {
                 specification = specification.and(buildSpecification(criteria.getId(), Site_.id));
@@ -150,10 +157,10 @@ public class SiteQueryService extends QueryService<Site> {
                 specification = specification.and(buildSpecification(criteria.getRollBilling(), Site_.rollBilling));
             }
             if (criteria.getParentSiteId() != null) {
-                specification = specification.and(buildReferringEntitySpecification(criteria.getParentSiteId(), Site_.parentSite, Site_.id));
+                specification = specification.and(buildSpecification(criteria.getParentSiteId(),
+                    root -> root.join(Site_.parentSite, JoinType.LEFT).get(Site_.id)));
             }
         }
         return specification;
     }
-
 }
diff --git a/src/main/java/com/budderfly/sites/service/SiteService.java b/src/main/java/com/budderfly/sites/service/SiteService.java
index f3b636c..74f0247 100644
--- a/src/main/java/com/budderfly/sites/service/SiteService.java
+++ b/src/main/java/com/budderfly/sites/service/SiteService.java
@@ -1,9 +1,12 @@
 package com.budderfly.sites.service;
 
 import com.budderfly.sites.service.dto.SiteDTO;
+
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
 
+import java.util.Optional;
+
 /**
  * Service Interface for managing Site.
  */
@@ -25,13 +28,14 @@ public interface SiteService {
      */
     Page<SiteDTO> findAll(Pageable pageable);
 
+
     /**
      * Get the "id" site.
      *
      * @param id the id of the entity
      * @return the entity
      */
-    SiteDTO findOne(Long id);
+    Optional<SiteDTO> findOne(Long id);
 
     /**
      * Delete the "id" site.
diff --git a/src/main/java/com/budderfly/sites/service/dto/SiteCriteria.java b/src/main/java/com/budderfly/sites/service/dto/SiteCriteria.java
index 7df8923..3597afb 100644
--- a/src/main/java/com/budderfly/sites/service/dto/SiteCriteria.java
+++ b/src/main/java/com/budderfly/sites/service/dto/SiteCriteria.java
@@ -1,6 +1,7 @@
 package com.budderfly.sites.service.dto;
 
 import java.io.Serializable;
+import java.util.Objects;
 import com.budderfly.sites.domain.enumeration.SiteStatus;
 import com.budderfly.sites.domain.enumeration.BillingType;
 import com.budderfly.sites.domain.enumeration.PaymentType;
@@ -13,11 +14,6 @@ import io.github.jhipster.service.filter.IntegerFilter;
 import io.github.jhipster.service.filter.LongFilter;
 import io.github.jhipster.service.filter.StringFilter;
 
-
-
-
-
-
 /**
  * Criteria class for the Site entity. This class is used in SiteResource to
  * receive all the possible filtering options from the Http GET request parameters.
@@ -32,19 +28,16 @@ public class SiteCriteria implements Serializable {
      */
     public static class SiteStatusFilter extends Filter<SiteStatus> {
     }
-
     /**
      * Class for filtering BillingType
      */
     public static class BillingTypeFilter extends Filter<BillingType> {
     }
-
     /**
      * Class for filtering PaymentType
      */
     public static class PaymentTypeFilter extends Filter<PaymentType> {
     }
-
     /**
      * Class for filtering SiteType
      */
@@ -53,7 +46,6 @@ public class SiteCriteria implements Serializable {
 
     private static final long serialVersionUID = 1L;
 
-
     private LongFilter id;
 
     private StringFilter budderflyId;
@@ -100,9 +92,6 @@ public class SiteCriteria implements Serializable {
 
     private LongFilter parentSiteId;
 
-    public SiteCriteria() {
-    }
-
     public LongFilter getId() {
         return id;
     }
@@ -287,6 +276,71 @@ public class SiteCriteria implements Serializable {
         this.parentSiteId = parentSiteId;
     }
 
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) {
+            return true;
+        }
+        if (o == null || getClass() != o.getClass()) {
+            return false;
+        }
+        final SiteCriteria that = (SiteCriteria) o;
+        return
+            Objects.equals(id, that.id) &&
+            Objects.equals(budderflyId, that.budderflyId) &&
+            Objects.equals(customerName, that.customerName) &&
+            Objects.equals(status, that.status) &&
+            Objects.equals(companyType, that.companyType) &&
+            Objects.equals(storeNumber, that.storeNumber) &&
+            Objects.equals(address, that.address) &&
+            Objects.equals(city, that.city) &&
+            Objects.equals(state, that.state) &&
+            Objects.equals(zip, that.zip) &&
+            Objects.equals(billingType, that.billingType) &&
+            Objects.equals(paymentType, that.paymentType) &&
+            Objects.equals(siteType, that.siteType) &&
+            Objects.equals(ownerName, that.ownerName) &&
+            Objects.equals(ownerEmail, that.ownerEmail) &&
+            Objects.equals(ownerPhone, that.ownerPhone) &&
+            Objects.equals(address1, that.address1) &&
+            Objects.equals(address2, that.address2) &&
+            Objects.equals(latitude, that.latitude) &&
+            Objects.equals(longitude, that.longitude) &&
+            Objects.equals(taxExempt, that.taxExempt) &&
+            Objects.equals(rollBilling, that.rollBilling) &&
+            Objects.equals(parentSiteId, that.parentSiteId);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(
+        id,
+        budderflyId,
+        customerName,
+        status,
+        companyType,
+        storeNumber,
+        address,
+        city,
+        state,
+        zip,
+        billingType,
+        paymentType,
+        siteType,
+        ownerName,
+        ownerEmail,
+        ownerPhone,
+        address1,
+        address2,
+        latitude,
+        longitude,
+        taxExempt,
+        rollBilling,
+        parentSiteId
+        );
+    }
+
     @Override
     public String toString() {
         return "SiteCriteria{" +
diff --git a/src/main/java/com/budderfly/sites/service/dto/SiteDTO.java b/src/main/java/com/budderfly/sites/service/dto/SiteDTO.java
index 33b0a92..c24cfa0 100644
--- a/src/main/java/com/budderfly/sites/service/dto/SiteDTO.java
+++ b/src/main/java/com/budderfly/sites/service/dto/SiteDTO.java
@@ -1,10 +1,7 @@
 package com.budderfly.sites.service.dto;
 
-
 import javax.validation.constraints.*;
 import java.io.Serializable;
-import java.util.HashSet;
-import java.util.Set;
 import java.util.Objects;
 import com.budderfly.sites.domain.enumeration.SiteStatus;
 import com.budderfly.sites.domain.enumeration.BillingType;
@@ -263,7 +260,7 @@ public class SiteDTO implements Serializable {
         }
 
         SiteDTO siteDTO = (SiteDTO) o;
-        if(siteDTO.getId() == null || getId() == null) {
+        if (siteDTO.getId() == null || getId() == null) {
             return false;
         }
         return Objects.equals(getId(), siteDTO.getId());
@@ -299,6 +296,7 @@ public class SiteDTO implements Serializable {
             ", longitude='" + getLongitude() + "'" +
             ", taxExempt='" + isTaxExempt() + "'" +
             ", rollBilling='" + isRollBilling() + "'" +
+            ", parentSite=" + getParentSiteId() +
             "}";
     }
 }
diff --git a/src/main/java/com/budderfly/sites/service/impl/SiteServiceImpl.java b/src/main/java/com/budderfly/sites/service/impl/SiteServiceImpl.java
index 6b93fd6..915e816 100644
--- a/src/main/java/com/budderfly/sites/service/impl/SiteServiceImpl.java
+++ b/src/main/java/com/budderfly/sites/service/impl/SiteServiceImpl.java
@@ -8,11 +8,13 @@ import com.budderfly.sites.service.dto.SiteDTO;
 import com.budderfly.sites.service.mapper.SiteMapper;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
 
+import java.util.Optional;
 
 import static org.elasticsearch.index.query.QueryBuilders.*;
 
@@ -46,6 +48,7 @@ public class SiteServiceImpl implements SiteService {
     @Override
     public SiteDTO save(SiteDTO siteDTO) {
         log.debug("Request to save Site : {}", siteDTO);
+
         Site site = siteMapper.toEntity(siteDTO);
         site = siteRepository.save(site);
         SiteDTO result = siteMapper.toDto(site);
@@ -67,6 +70,7 @@ public class SiteServiceImpl implements SiteService {
             .map(siteMapper::toDto);
     }
 
+
     /**
      * Get one site by id.
      *
@@ -75,10 +79,10 @@ public class SiteServiceImpl implements SiteService {
      */
     @Override
     @Transactional(readOnly = true)
-    public SiteDTO findOne(Long id) {
+    public Optional<SiteDTO> findOne(Long id) {
         log.debug("Request to get Site : {}", id);
-        Site site = siteRepository.findOne(id);
-        return siteMapper.toDto(site);
+        return siteRepository.findById(id)
+            .map(siteMapper::toDto);
     }
 
     /**
@@ -89,8 +93,8 @@ public class SiteServiceImpl implements SiteService {
     @Override
     public void delete(Long id) {
         log.debug("Request to delete Site : {}", id);
-        siteRepository.delete(id);
-        siteSearchRepository.delete(id);
+        siteRepository.deleteById(id);
+        siteSearchRepository.deleteById(id);
     }
 
     /**
@@ -104,7 +108,7 @@ public class SiteServiceImpl implements SiteService {
     @Transactional(readOnly = true)
     public Page<SiteDTO> search(String query, Pageable pageable) {
         log.debug("Request to search for a page of Sites for query {}", query);
-        Page<Site> result = siteSearchRepository.search(queryStringQuery(query), pageable);
-        return result.map(siteMapper::toDto);
+        return siteSearchRepository.search(queryStringQuery(query), pageable)
+            .map(siteMapper::toDto);
     }
 }
diff --git a/src/main/java/com/budderfly/sites/web/rest/ProfileInfoResource.java b/src/main/java/com/budderfly/sites/web/rest/ProfileInfoResource.java
deleted file mode 100644
index 6e017b4..0000000
--- a/src/main/java/com/budderfly/sites/web/rest/ProfileInfoResource.java
+++ /dev/null
@@ -1,69 +0,0 @@
-package com.budderfly.sites.web.rest;
-
-import com.budderfly.sites.config.DefaultProfileUtil;
-
-import io.github.jhipster.config.JHipsterProperties;
-
-import org.springframework.core.env.Environment;
-import org.springframework.web.bind.annotation.*;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-/**
- * Resource to return information about the currently running Spring profiles.
- */
-@RestController
-@RequestMapping("/api")
-public class ProfileInfoResource {
-
-    private final Environment env;
-
-    private final JHipsterProperties jHipsterProperties;
-
-    public ProfileInfoResource(Environment env, JHipsterProperties jHipsterProperties) {
-        this.env = env;
-        this.jHipsterProperties = jHipsterProperties;
-    }
-
-    @GetMapping("/profile-info")
-    public ProfileInfoVM getActiveProfiles() {
-        String[] activeProfiles = DefaultProfileUtil.getActiveProfiles(env);
-        return new ProfileInfoVM(activeProfiles, getRibbonEnv(activeProfiles));
-    }
-
-    private String getRibbonEnv(String[] activeProfiles) {
-        String[] displayOnActiveProfiles = jHipsterProperties.getRibbon().getDisplayOnActiveProfiles();
-        if (displayOnActiveProfiles == null) {
-            return null;
-        }
-        List<String> ribbonProfiles = new ArrayList<>(Arrays.asList(displayOnActiveProfiles));
-        List<String> springBootProfiles = Arrays.asList(activeProfiles);
-        ribbonProfiles.retainAll(springBootProfiles);
-        if (!ribbonProfiles.isEmpty()) {
-            return ribbonProfiles.get(0);
-        }
-        return null;
-    }
-
-    class ProfileInfoVM {
-
-        private String[] activeProfiles;
-
-        private String ribbonEnv;
-
-        ProfileInfoVM(String[] activeProfiles, String ribbonEnv) {
-            this.activeProfiles = activeProfiles;
-            this.ribbonEnv = ribbonEnv;
-        }
-
-        public String[] getActiveProfiles() {
-            return activeProfiles;
-        }
-
-        public String getRibbonEnv() {
-            return ribbonEnv;
-        }
-    }
-}
diff --git a/src/main/java/com/budderfly/sites/web/rest/SiteResource.java b/src/main/java/com/budderfly/sites/web/rest/SiteResource.java
index 91875d4..7036e33 100644
--- a/src/main/java/com/budderfly/sites/web/rest/SiteResource.java
+++ b/src/main/java/com/budderfly/sites/web/rest/SiteResource.java
@@ -37,7 +37,7 @@ public class SiteResource {
 
     private final Logger log = LoggerFactory.getLogger(SiteResource.class);
 
-    private static final String ENTITY_NAME = "site";
+    private static final String ENTITY_NAME = "sitesSite";
 
     private final SiteService siteService;
 
@@ -82,7 +82,7 @@ public class SiteResource {
     public ResponseEntity<SiteDTO> updateSite(@Valid @RequestBody SiteDTO siteDTO) throws URISyntaxException {
         log.debug("REST request to update Site : {}", siteDTO);
         if (siteDTO.getId() == null) {
-            return createSite(siteDTO);
+            throw new BadRequestAlertException("Invalid id", ENTITY_NAME, "idnull");
         }
         SiteDTO result = siteService.save(siteDTO);
         return ResponseEntity.ok()
@@ -103,7 +103,20 @@ public class SiteResource {
         log.debug("REST request to get Sites by criteria: {}", criteria);
         Page<SiteDTO> page = siteQueryService.findByCriteria(criteria, pageable);
         HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(page, "/api/sites");
-        return new ResponseEntity<>(page.getContent(), headers, HttpStatus.OK);
+        return ResponseEntity.ok().headers(headers).body(page.getContent());
+    }
+
+    /**
+    * GET  /sites/count : count all the sites.
+    *
+    * @param criteria the criterias which the requested entities should match
+    * @return the ResponseEntity with status 200 (OK) and the count in body
+    */
+    @GetMapping("/sites/count")
+    @Timed
+    public ResponseEntity<Long> countSites(SiteCriteria criteria) {
+        log.debug("REST request to count Sites by criteria: {}", criteria);
+        return ResponseEntity.ok().body(siteQueryService.countByCriteria(criteria));
     }
 
     /**
@@ -116,8 +129,8 @@ public class SiteResource {
     @Timed
     public ResponseEntity<SiteDTO> getSite(@PathVariable Long id) {
         log.debug("REST request to get Site : {}", id);
-        SiteDTO siteDTO = siteService.findOne(id);
-        return ResponseUtil.wrapOrNotFound(Optional.ofNullable(siteDTO));
+        Optional<SiteDTO> siteDTO = siteService.findOne(id);
+        return ResponseUtil.wrapOrNotFound(siteDTO);
     }
 
     /**
diff --git a/src/main/java/com/budderfly/sites/web/rest/errors/BadRequestAlertException.java b/src/main/java/com/budderfly/sites/web/rest/errors/BadRequestAlertException.java
index 51c99d3..c372619 100644
--- a/src/main/java/com/budderfly/sites/web/rest/errors/BadRequestAlertException.java
+++ b/src/main/java/com/budderfly/sites/web/rest/errors/BadRequestAlertException.java
@@ -9,6 +9,8 @@ import java.util.Map;
 
 public class BadRequestAlertException extends AbstractThrowableProblem {
 
+    private static final long serialVersionUID = 1L;
+
     private final String entityName;
 
     private final String errorKey;
diff --git a/src/main/java/com/budderfly/sites/web/rest/errors/EmailAlreadyUsedException.java b/src/main/java/com/budderfly/sites/web/rest/errors/EmailAlreadyUsedException.java
index a3f794d..fd5877e 100644
--- a/src/main/java/com/budderfly/sites/web/rest/errors/EmailAlreadyUsedException.java
+++ b/src/main/java/com/budderfly/sites/web/rest/errors/EmailAlreadyUsedException.java
@@ -2,7 +2,9 @@ package com.budderfly.sites.web.rest.errors;
 
 public class EmailAlreadyUsedException extends BadRequestAlertException {
 
+    private static final long serialVersionUID = 1L;
+
     public EmailAlreadyUsedException() {
-        super(ErrorConstants.EMAIL_ALREADY_USED_TYPE, "Email address already in use", "userManagement", "emailexists");
+        super(ErrorConstants.EMAIL_ALREADY_USED_TYPE, "Email is already in use!", "userManagement", "emailexists");
     }
 }
diff --git a/src/main/java/com/budderfly/sites/web/rest/errors/EmailNotFoundException.java b/src/main/java/com/budderfly/sites/web/rest/errors/EmailNotFoundException.java
index 1882cc7..ee735e2 100644
--- a/src/main/java/com/budderfly/sites/web/rest/errors/EmailNotFoundException.java
+++ b/src/main/java/com/budderfly/sites/web/rest/errors/EmailNotFoundException.java
@@ -5,6 +5,8 @@ import org.zalando.problem.Status;
 
 public class EmailNotFoundException extends AbstractThrowableProblem {
 
+    private static final long serialVersionUID = 1L;
+
     public EmailNotFoundException() {
         super(ErrorConstants.EMAIL_NOT_FOUND_TYPE, "Email address not registered", Status.BAD_REQUEST);
     }
diff --git a/src/main/java/com/budderfly/sites/web/rest/errors/ErrorConstants.java b/src/main/java/com/budderfly/sites/web/rest/errors/ErrorConstants.java
index ccd6ac7..e182b64 100644
--- a/src/main/java/com/budderfly/sites/web/rest/errors/ErrorConstants.java
+++ b/src/main/java/com/budderfly/sites/web/rest/errors/ErrorConstants.java
@@ -6,10 +6,11 @@ public final class ErrorConstants {
 
     public static final String ERR_CONCURRENCY_FAILURE = "error.concurrencyFailure";
     public static final String ERR_VALIDATION = "error.validation";
-    public static final String PROBLEM_BASE_URL = "http://www.jhipster.tech/problem";
+    public static final String PROBLEM_BASE_URL = "https://www.jhipster.tech/problem";
     public static final URI DEFAULT_TYPE = URI.create(PROBLEM_BASE_URL + "/problem-with-message");
     public static final URI CONSTRAINT_VIOLATION_TYPE = URI.create(PROBLEM_BASE_URL + "/constraint-violation");
     public static final URI PARAMETERIZED_TYPE = URI.create(PROBLEM_BASE_URL + "/parameterized");
+    public static final URI ENTITY_NOT_FOUND_TYPE = URI.create(PROBLEM_BASE_URL + "/entity-not-found");
     public static final URI INVALID_PASSWORD_TYPE = URI.create(PROBLEM_BASE_URL + "/invalid-password");
     public static final URI EMAIL_ALREADY_USED_TYPE = URI.create(PROBLEM_BASE_URL + "/email-already-used");
     public static final URI LOGIN_ALREADY_USED_TYPE = URI.create(PROBLEM_BASE_URL + "/login-already-used");
diff --git a/src/main/java/com/budderfly/sites/web/rest/errors/ExceptionTranslator.java b/src/main/java/com/budderfly/sites/web/rest/errors/ExceptionTranslator.java
index d88e31d..9b00ee3 100644
--- a/src/main/java/com/budderfly/sites/web/rest/errors/ExceptionTranslator.java
+++ b/src/main/java/com/budderfly/sites/web/rest/errors/ExceptionTranslator.java
@@ -14,12 +14,13 @@ import org.zalando.problem.Problem;
 import org.zalando.problem.ProblemBuilder;
 import org.zalando.problem.Status;
 import org.zalando.problem.spring.web.advice.ProblemHandling;
-import org.zalando.problem.spring.web.advice.validation.ConstraintViolationProblem;
+import org.zalando.problem.violations.ConstraintViolationProblem;
 
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 import javax.servlet.http.HttpServletRequest;
 import java.util.List;
+import java.util.NoSuchElementException;
 import java.util.stream.Collectors;
 
 /**
@@ -29,12 +30,17 @@ import java.util.stream.Collectors;
 @ControllerAdvice
 public class ExceptionTranslator implements ProblemHandling {
 
+    private static final String FIELD_ERRORS_KEY = "fieldErrors";
+    private static final String MESSAGE_KEY = "message";
+    private static final String PATH_KEY = "path";
+    private static final String VIOLATIONS_KEY = "violations";
+
     /**
-     * Post-process Problem payload to add the message key for front-end if needed
+     * Post-process the Problem payload to add the message key for the front-end if needed
      */
     @Override
     public ResponseEntity<Problem> process(@Nullable ResponseEntity<Problem> entity, NativeWebRequest request) {
-        if (entity == null || entity.getBody() == null) {
+        if (entity == null) {
             return entity;
         }
         Problem problem = entity.getBody();
@@ -45,24 +51,23 @@ public class ExceptionTranslator implements ProblemHandling {
             .withType(Problem.DEFAULT_TYPE.equals(problem.getType()) ? ErrorConstants.DEFAULT_TYPE : problem.getType())
             .withStatus(problem.getStatus())
             .withTitle(problem.getTitle())
-            .with("path", request.getNativeRequest(HttpServletRequest.class).getRequestURI());
+            .with(PATH_KEY, request.getNativeRequest(HttpServletRequest.class).getRequestURI());
 
         if (problem instanceof ConstraintViolationProblem) {
             builder
-                .with("violations", ((ConstraintViolationProblem) problem).getViolations())
-                .with("message", ErrorConstants.ERR_VALIDATION);
-            return new ResponseEntity<>(builder.build(), entity.getHeaders(), entity.getStatusCode());
+                .with(VIOLATIONS_KEY, ((ConstraintViolationProblem) problem).getViolations())
+                .with(MESSAGE_KEY, ErrorConstants.ERR_VALIDATION);
         } else {
             builder
                 .withCause(((DefaultProblem) problem).getCause())
                 .withDetail(problem.getDetail())
                 .withInstance(problem.getInstance());
             problem.getParameters().forEach(builder::with);
-            if (!problem.getParameters().containsKey("message") && problem.getStatus() != null) {
-                builder.with("message", "error.http." + problem.getStatus().getStatusCode());
+            if (!problem.getParameters().containsKey(MESSAGE_KEY) && problem.getStatus() != null) {
+                builder.with(MESSAGE_KEY, "error.http." + problem.getStatus().getStatusCode());
             }
-            return new ResponseEntity<>(builder.build(), entity.getHeaders(), entity.getStatusCode());
         }
+        return new ResponseEntity<>(builder.build(), entity.getHeaders(), entity.getStatusCode());
     }
 
     @Override
@@ -76,22 +81,31 @@ public class ExceptionTranslator implements ProblemHandling {
             .withType(ErrorConstants.CONSTRAINT_VIOLATION_TYPE)
             .withTitle("Method argument not valid")
             .withStatus(defaultConstraintViolationStatus())
-            .with("message", ErrorConstants.ERR_VALIDATION)
-            .with("fieldErrors", fieldErrors)
+            .with(MESSAGE_KEY, ErrorConstants.ERR_VALIDATION)
+            .with(FIELD_ERRORS_KEY, fieldErrors)
+            .build();
+        return create(ex, problem, request);
+    }
+
+    @ExceptionHandler
+    public ResponseEntity<Problem> handleNoSuchElementException(NoSuchElementException ex, NativeWebRequest request) {
+        Problem problem = Problem.builder()
+            .withStatus(Status.NOT_FOUND)
+            .with(MESSAGE_KEY, ErrorConstants.ENTITY_NOT_FOUND_TYPE)
             .build();
         return create(ex, problem, request);
     }
 
-    @ExceptionHandler(BadRequestAlertException.class)
+    @ExceptionHandler
     public ResponseEntity<Problem> handleBadRequestAlertException(BadRequestAlertException ex, NativeWebRequest request) {
         return create(ex, request, HeaderUtil.createFailureAlert(ex.getEntityName(), ex.getErrorKey(), ex.getMessage()));
     }
 
-    @ExceptionHandler(ConcurrencyFailureException.class)
+    @ExceptionHandler
     public ResponseEntity<Problem> handleConcurrencyFailure(ConcurrencyFailureException ex, NativeWebRequest request) {
         Problem problem = Problem.builder()
             .withStatus(Status.CONFLICT)
-            .with("message", ErrorConstants.ERR_CONCURRENCY_FAILURE)
+            .with(MESSAGE_KEY, ErrorConstants.ERR_CONCURRENCY_FAILURE)
             .build();
         return create(ex, problem, request);
     }
diff --git a/src/main/java/com/budderfly/sites/web/rest/errors/InternalServerErrorException.java b/src/main/java/com/budderfly/sites/web/rest/errors/InternalServerErrorException.java
index 6dc8c13..6252770 100644
--- a/src/main/java/com/budderfly/sites/web/rest/errors/InternalServerErrorException.java
+++ b/src/main/java/com/budderfly/sites/web/rest/errors/InternalServerErrorException.java
@@ -8,6 +8,8 @@ import org.zalando.problem.Status;
  */
 public class InternalServerErrorException extends AbstractThrowableProblem {
 
+    private static final long serialVersionUID = 1L;
+
     public InternalServerErrorException(String message) {
         super(ErrorConstants.DEFAULT_TYPE, message, Status.INTERNAL_SERVER_ERROR);
     }
diff --git a/src/main/java/com/budderfly/sites/web/rest/errors/InvalidPasswordException.java b/src/main/java/com/budderfly/sites/web/rest/errors/InvalidPasswordException.java
index d996cd6..10d562e 100644
--- a/src/main/java/com/budderfly/sites/web/rest/errors/InvalidPasswordException.java
+++ b/src/main/java/com/budderfly/sites/web/rest/errors/InvalidPasswordException.java
@@ -5,6 +5,8 @@ import org.zalando.problem.Status;
 
 public class InvalidPasswordException extends AbstractThrowableProblem {
 
+    private static final long serialVersionUID = 1L;
+
     public InvalidPasswordException() {
         super(ErrorConstants.INVALID_PASSWORD_TYPE, "Incorrect password", Status.BAD_REQUEST);
     }
diff --git a/src/main/java/com/budderfly/sites/web/rest/errors/LoginAlreadyUsedException.java b/src/main/java/com/budderfly/sites/web/rest/errors/LoginAlreadyUsedException.java
index 6eb7399..fb68ae3 100644
--- a/src/main/java/com/budderfly/sites/web/rest/errors/LoginAlreadyUsedException.java
+++ b/src/main/java/com/budderfly/sites/web/rest/errors/LoginAlreadyUsedException.java
@@ -2,7 +2,9 @@ package com.budderfly.sites.web.rest.errors;
 
 public class LoginAlreadyUsedException extends BadRequestAlertException {
 
+    private static final long serialVersionUID = 1L;
+
     public LoginAlreadyUsedException() {
-        super(ErrorConstants.LOGIN_ALREADY_USED_TYPE, "Login already in use", "userManagement", "userexists");
+        super(ErrorConstants.LOGIN_ALREADY_USED_TYPE, "Login name already used!", "userManagement", "userexists");
     }
 }
diff --git a/src/main/java/com/budderfly/sites/web/rest/util/HeaderUtil.java b/src/main/java/com/budderfly/sites/web/rest/util/HeaderUtil.java
index b667db2..f941fe7 100644
--- a/src/main/java/com/budderfly/sites/web/rest/util/HeaderUtil.java
+++ b/src/main/java/com/budderfly/sites/web/rest/util/HeaderUtil.java
@@ -18,8 +18,8 @@ public final class HeaderUtil {
 
     public static HttpHeaders createAlert(String message, String param) {
         HttpHeaders headers = new HttpHeaders();
-        headers.add("X-sitesApp-alert", message);
-        headers.add("X-sitesApp-params", param);
+        headers.add("X-" + APPLICATION_NAME + "-alert", message);
+        headers.add("X-" + APPLICATION_NAME + "-params", param);
         return headers;
     }
 
@@ -38,8 +38,8 @@ public final class HeaderUtil {
     public static HttpHeaders createFailureAlert(String entityName, String errorKey, String defaultMessage) {
         log.error("Entity processing failed, {}", defaultMessage);
         HttpHeaders headers = new HttpHeaders();
-        headers.add("X-sitesApp-error", "error." + errorKey);
-        headers.add("X-sitesApp-params", entityName);
+        headers.add("X-" + APPLICATION_NAME + "-error", "error." + errorKey);
+        headers.add("X-" + APPLICATION_NAME + "-params", entityName);
         return headers;
     }
 }
diff --git a/src/main/java/com/budderfly/sites/web/rest/util/PaginationUtil.java b/src/main/java/com/budderfly/sites/web/rest/util/PaginationUtil.java
index 790212c..54ab5ee 100644
--- a/src/main/java/com/budderfly/sites/web/rest/util/PaginationUtil.java
+++ b/src/main/java/com/budderfly/sites/web/rest/util/PaginationUtil.java
@@ -19,7 +19,7 @@ public final class PaginationUtil {
     private PaginationUtil() {
     }
 
-    public static HttpHeaders generatePaginationHttpHeaders(Page page, String baseUrl) {
+    public static <T> HttpHeaders generatePaginationHttpHeaders(Page<T> page, String baseUrl) {
 
         HttpHeaders headers = new HttpHeaders();
         headers.add("X-Total-Count", Long.toString(page.getTotalElements()));
@@ -46,7 +46,7 @@ public final class PaginationUtil {
         return UriComponentsBuilder.fromUriString(baseUrl).queryParam("page", page).queryParam("size", size).toUriString();
     }
 
-    public static HttpHeaders generateSearchPaginationHttpHeaders(String query, Page page, String baseUrl) {
+    public static <T> HttpHeaders generateSearchPaginationHttpHeaders(String query, Page<T> page, String baseUrl) {
         String escapedQuery;
         try {
             escapedQuery = URLEncoder.encode(query, "UTF-8");
diff --git a/src/main/jib/entrypoint.sh b/src/main/jib/entrypoint.sh
new file mode 100644
index 0000000..9d0d751
--- /dev/null
+++ b/src/main/jib/entrypoint.sh
@@ -0,0 +1,4 @@
+#!/bin/sh
+
+echo "The application will start in ${JHIPSTER_SLEEP}s..." && sleep ${JHIPSTER_SLEEP}
+exec java ${JAVA_OPTS} -Djava.security.egd=file:/dev/./urandom -cp /app/resources/:/app/classes/:/app/libs/* "com.budderfly.sites.SitesApp"  "$@"
diff --git a/src/main/resources/banner.txt b/src/main/resources/banner.txt
index db090f7..e0bc55a 100644
--- a/src/main/resources/banner.txt
+++ b/src/main/resources/banner.txt
@@ -7,4 +7,4 @@
   ${AnsiColor.GREEN} ╚═════╝ ${AnsiColor.RED} ╚═╝   ╚═╝ ╚═══════╝ ╚═╝       ╚═════╝     ╚═╝    ╚═══════╝ ╚═╝   ╚═╝
 
 ${AnsiColor.BRIGHT_BLUE}:: JHipster 🤓  :: Running Spring Boot ${spring-boot.version} ::
-:: http://www.jhipster.tech ::${AnsiColor.DEFAULT}
+:: https://www.jhipster.tech ::${AnsiColor.DEFAULT}
diff --git a/src/main/resources/config/application-dev.yml b/src/main/resources/config/application-dev.yml
index b271c3d..04ded55 100644
--- a/src/main/resources/config/application-dev.yml
+++ b/src/main/resources/config/application-dev.yml
@@ -3,8 +3,8 @@
 #
 # This configuration overrides the application.yml file.
 #
-# More information on profiles: http://www.jhipster.tech/profiles/
-# More information on configuration properties: http://www.jhipster.tech/common-application-properties/
+# More information on profiles: https://www.jhipster.tech/profiles/
+# More information on configuration properties: https://www.jhipster.tech/common-application-properties/
 # ===================================================================
 
 # ===================================================================
@@ -16,8 +16,8 @@
 logging:
     level:
         ROOT: DEBUG
-        com.budderfly.sites: DEBUG
         io.github.jhipster: DEBUG
+        com.budderfly.sites: DEBUG
 
 eureka:
     instance:
@@ -29,20 +29,25 @@ eureka:
 spring:
     profiles:
         active: dev
-        include: swagger
+        include:
+            - swagger
+            # Uncomment to activate TLS for the dev profile
+            #- tls
     devtools:
         restart:
             enabled: true
         livereload:
-            enabled: false # we use gulp + BrowserSync for livereload
+            enabled: false # we use Webpack dev server + BrowserSync for livereload
     jackson:
-        serialization.indent_output: true
+        serialization:
+            indent-output: true
     datasource:
         type: com.zaxxer.hikari.HikariDataSource
-        url: jdbc:mysql://localhost:3306/sites?useUnicode=true&characterEncoding=utf8&useSSL=false
+        url: jdbc:mysql://localhost:3306/sites?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC
         username: root
         password:
         hikari:
+            auto-commit: false
             data-source-properties:
                 cachePrepStmts: true
                 prepStmtCacheSize: 250
@@ -54,6 +59,7 @@ spring:
         show-sql: true
         properties:
             hibernate.id.new_generator_mappings: true
+            hibernate.connection.provider_disables_autocommit: true
             hibernate.cache.use_second_level_cache: true
             hibernate.cache.use_query_cache: false
             hibernate.generate_statistics: true
@@ -63,21 +69,23 @@ spring:
             hibernate.cache.hazelcast.use_lite_member: true
     data:
         elasticsearch:
-            cluster-name:
-            cluster-nodes:
             properties:
                 path:
-                    logs: target/elasticsearch/log
-                    data: target/elasticsearch/data
+                    home: target/elasticsearch
+    liquibase:
+        contexts: dev
     mail:
         host: localhost
         port: 25
         username:
         password:
     messages:
-        cache-seconds: 1
+        cache-duration: PT1S # 1 second, see the ISO 8601 standard
     thymeleaf:
         cache: false
+    sleuth:
+        sampler:
+            probability: 1 # report 100% of traces
     zipkin: # Use the "zipkin" Maven profile to have the Spring Cloud Zipkin dependencies
         base-url: http://localhost:9411
         enabled: false
@@ -85,38 +93,18 @@ spring:
             discovery:
                 enabled: true
 
-liquibase:
-    contexts: dev
-
-# ===================================================================
-# To enable SSL, generate a certificate using:
-# keytool -genkey -alias sites -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore keystore.p12 -validity 3650
-#
-# You can also use Let's Encrypt:
-# https://maximilian-boehm.com/hp2121/Create-a-Java-Keystore-JKS-from-Let-s-Encrypt-Certificates.htm
-#
-# Then, modify the server.ssl properties so your "server" configuration looks like:
-#
-# server:
-#    port: 8443
-#    ssl:
-#        key-store: keystore.p12
-#        key-store-password: <your-password>
-#        key-store-type: PKCS12
-#        key-alias: sites
-# ===================================================================
 server:
     port: 8082
 
 # ===================================================================
 # JHipster specific properties
 #
-# Full reference is available at: http://www.jhipster.tech/common-application-properties/
+# Full reference is available at: https://www.jhipster.tech/common-application-properties/
 # ===================================================================
 
 jhipster:
     http:
-        version: V_1_1 # To use HTTP/2 you will need SSL support (see above the "server.ssl" configuration)
+        version: V_1_1 # To use HTTP/2 you will need to activate TLS (see application-tls.yml)
     cache: # Cache configuration
         hazelcast: # Hazelcast distributed cache
             time-to-live-seconds: 3600
@@ -144,15 +132,10 @@ jhipster:
         from: sites@localhost
         base-url: http://127.0.0.1:8082
     metrics: # DropWizard Metrics configuration, used by MetricsConfiguration
-        jmx.enabled: true
-        graphite: # Use the "graphite" Maven profile to have the Graphite dependencies
-            enabled: false
-            host: localhost
-            port: 2003
-            prefix: sites
-        prometheus: # Use the "prometheus" Maven profile to have the Prometheus dependencies
-            enabled: false
-            endpoint: /prometheusMetrics
+        jmx:
+            enabled: true
+        prometheus:
+            enabled: false #expose metrics via prometheus
         logs: # Reports Dropwizard metrics in the logs
             enabled: false
             report-frequency: 60 # in seconds
@@ -162,10 +145,6 @@ jhipster:
             host: localhost
             port: 5000
             queue-size: 512
-        spectator-metrics: # Reports Spectator Circuit Breaker metrics in the logs
-            enabled: false
-            # edit spring.metrics.export.delay-millis to set report frequency
-
 oauth2:
     signature-verification:
         public-key-endpoint-uri: http://authenticate/oauth/token_key
@@ -184,7 +163,7 @@ oauth2:
 # to have type-safe configuration, like in the JHipsterProperties above
 #
 # More documentation is available at:
-# http://www.jhipster.tech/common-application-properties/
+# https://www.jhipster.tech/common-application-properties/
 # ===================================================================
 
-application:
+# application:
diff --git a/src/main/resources/config/application-prod.yml b/src/main/resources/config/application-prod.yml
index 637dd31..f266be5 100644
--- a/src/main/resources/config/application-prod.yml
+++ b/src/main/resources/config/application-prod.yml
@@ -3,8 +3,8 @@
 #
 # This configuration overrides the application.yml file.
 #
-# More information on profiles: http://www.jhipster.tech/profiles/
-# More information on configuration properties: http://www.jhipster.tech/common-application-properties/
+# More information on profiles: https://www.jhipster.tech/profiles/
+# More information on configuration properties: https://www.jhipster.tech/common-application-properties/
 # ===================================================================
 
 # ===================================================================
@@ -34,10 +34,11 @@ spring:
             enabled: false
     datasource:
         type: com.zaxxer.hikari.HikariDataSource
-        url: jdbc:mysql://localhost:3306/sites?useUnicode=true&characterEncoding=utf8&useSSL=false
+        url: jdbc:mysql://localhost:3306/sites?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC
         username: root
         password:
         hikari:
+            auto-commit: false
             data-source-properties:
                 cachePrepStmts: true
                 prepStmtCacheSize: 250
@@ -49,6 +50,7 @@ spring:
         show-sql: false
         properties:
             hibernate.id.new_generator_mappings: true
+            hibernate.connection.provider_disables_autocommit: true
             hibernate.cache.use_second_level_cache: true
             hibernate.cache.use_query_cache: false
             hibernate.generate_statistics: false
@@ -57,9 +59,10 @@ spring:
             hibernate.cache.use_minimal_puts: true
             hibernate.cache.hazelcast.use_lite_member: true
     data:
-        elasticsearch:
-            cluster-name:
-            cluster-nodes: localhost:9300
+        jest:
+            uri: http://localhost:9200
+    liquibase:
+        contexts: prod
     mail:
         host: localhost
         port: 25
@@ -67,6 +70,9 @@ spring:
         password:
     thymeleaf:
         cache: true
+    sleuth:
+        sampler:
+            probability: 1 # report 100% of traces
     zipkin: # Use the "zipkin" Maven profile to have the Spring Cloud Zipkin dependencies
         base-url: http://localhost:9411
         enabled: false
@@ -74,11 +80,8 @@ spring:
             discovery:
                 enabled: true
 
-liquibase:
-    contexts: prod
-
 # ===================================================================
-# To enable SSL, generate a certificate using:
+# To enable TLS in production, generate a certificate using:
 # keytool -genkey -alias sites -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore keystore.p12 -validity 3650
 #
 # You can also use Let's Encrypt:
@@ -89,8 +92,8 @@ liquibase:
 # server:
 #    port: 443
 #    ssl:
-#        key-store: keystore.p12
-#        key-store-password: <your-password>
+#        key-store: classpath:config/tls/keystore.p12
+#        key-store-password: password
 #        key-store-type: PKCS12
 #        key-alias: sites
 #        # The ciphers suite enforce the security by deactivating some old and deprecated SSL cipher, this list was tested against SSL Labs (https://www.ssllabs.com/ssltest/)
@@ -106,7 +109,7 @@ server:
 # ===================================================================
 # JHipster specific properties
 #
-# Full reference is available at: http://www.jhipster.tech/common-application-properties/
+# Full reference is available at: https://www.jhipster.tech/common-application-properties/
 # ===================================================================
 
 jhipster:
@@ -132,15 +135,10 @@ jhipster:
         from: sites@localhost
         base-url: http://my-server-url-to-change # Modify according to your server's URL
     metrics: # DropWizard Metrics configuration, used by MetricsConfiguration
-        jmx.enabled: true
-        graphite:
-            enabled: false
-            host: localhost
-            port: 2003
-            prefix: sites
+        jmx:
+            enabled: true
         prometheus:
-            enabled: false
-            endpoint: /prometheusMetrics
+            enabled: false #expose metrics via prometheus
         logs: # Reports Dropwizard metrics in the logs
             enabled: false
             report-frequency: 60 # in seconds
@@ -150,10 +148,6 @@ jhipster:
             host: localhost
             port: 5000
             queue-size: 512
-        spectator-metrics: # Reports Spectator Circuit Breaker metrics in the logs
-            enabled: false
-            # edit spring.metrics.export.delay-millis to set report frequency
-
 oauth2:
     signature-verification:
         public-key-endpoint-uri: http://authenticate/oauth/token_key
@@ -172,7 +166,7 @@ oauth2:
 # to have type-safe configuration, like in the JHipsterProperties above
 #
 # More documentation is available at:
-# http://www.jhipster.tech/common-application-properties/
+# https://www.jhipster.tech/common-application-properties/
 # ===================================================================
 
-application:
+# application:
diff --git a/src/main/resources/config/application-tls.yml b/src/main/resources/config/application-tls.yml
new file mode 100644
index 0000000..c4e0565
--- /dev/null
+++ b/src/main/resources/config/application-tls.yml
@@ -0,0 +1,20 @@
+# ===================================================================
+# Activate this profile to enable TLS and HTTP/2.
+#
+# JHipster has generated a self-signed certificate, which will be used to encrypt traffic.
+# As your browser will not understand this certificate, you will need to import it.
+#
+# Another (easiest) solution with Chrome is to enable the "allow-insecure-localhost" flag
+# at chrome://flags/#allow-insecure-localhost
+# ===================================================================
+server:
+    ssl:
+        key-store: classpath:config/tls/keystore.p12
+        key-store-password: password
+        key-store-type: PKCS12
+        key-alias: selfsigned
+        ciphers: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384, TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384, TLS_DHE_RSA_WITH_AES_128_GCM_SHA256, TLS_DHE_RSA_WITH_AES_256_GCM_SHA384, TLS_DHE_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_RSA_WITH_AES_256_CBC_SHA, TLS_DHE_RSA_WITH_AES_128_CBC_SHA256, TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
+        enabled-protocols: TLSv1.2
+jhipster:
+    http:
+        version: V_2_0
diff --git a/src/main/resources/config/application.yml b/src/main/resources/config/application.yml
index 28e58d7..8579f47 100644
--- a/src/main/resources/config/application.yml
+++ b/src/main/resources/config/application.yml
@@ -4,8 +4,8 @@
 # This configuration will be overridden by the Spring profile you use,
 # for example application-dev.yml if you use the "dev" profile.
 #
-# More information on profiles: http://www.jhipster.tech/profiles/
-# More information on configuration properties: http://www.jhipster.tech/common-application-properties/
+# More information on profiles: https://www.jhipster.tech/profiles/
+# More information on configuration properties: https://www.jhipster.tech/common-application-properties/
 # ===================================================================
 
 # ===================================================================
@@ -28,48 +28,66 @@ eureka:
         instanceId: sites:${spring.application.instance-id:${random.value}}
         lease-renewal-interval-in-seconds: 5
         lease-expiration-duration-in-seconds: 10
-        status-page-url-path: ${management.context-path}/info
-        health-check-url-path: ${management.context-path}/health
+        status-page-url-path: ${management.endpoints.web.base-path}/info
+        health-check-url-path: ${management.endpoints.web.base-path}/health
         metadata-map:
             zone: primary # This is needed for the load balancer
             profile: ${spring.profiles.active}
-            version: ${info.project.version}
+            version: ${info.project.version:}
+            git-version: ${git.commit.id.describe:}
+            git-commit: ${git.commit.id.abbrev:}
+            git-branch: ${git.branch:}
 ribbon:
     eureka:
         enabled: true
-# See https://github.com/Netflix/Hystrix/wiki/Configuration
-#hystrix:
-#    command:
-#        default:
-#            execution:
-#                isolation:
-#                    thread:
-#                        timeoutInMilliseconds: 10000
-# See https://github.com/spring-cloud/spring-cloud-netflix/issues/1330
 feign:
     hystrix:
         enabled: true
+#    client:
+#        config:
+#            default:
+#                connectTimeout: 5000
+#                readTimeout: 5000
 
+# See https://github.com/Netflix/Hystrix/wiki/Configuration
 hystrix:
-    share-security-context: true
+    command:
+        default:
+            execution:
+                isolation:
+                    strategy: SEMAPHORE
+# See https://github.com/spring-cloud/spring-cloud-netflix/issues/1330
+#                    thread:
+#                        timeoutInMilliseconds: 10000
+    shareSecurityContext: true
 
 management:
-    security:
-        roles: ADMIN
-    context-path: /management
+    endpoints:
+        web:
+            base-path: /management
+            exposure:
+                include: ["configprops", "env", "health", "info", "threaddump", "logfile" ]
+    endpoint:
+        health:
+            show-details: when-authorized
     info:
         git:
             mode: full
     health:
         mail:
             enabled: false # When using the MailService, configure an SMTP server and set this to true
+    metrics:
+        enabled: false # http://micrometer.io/ is disabled by default, as we use http://metrics.dropwizard.io/ instead
+
 spring:
+    autoconfigure:
+        exclude: org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration
     application:
         name: sites
-    jackson:
-        serialization.write_dates_as_timestamps: false
     jpa:
         open-in-view: false
+        properties:
+            hibernate.jdbc.time_zone: UTC
         hibernate:
             ddl-auto: none
             naming:
@@ -81,27 +99,27 @@ spring:
         favicon:
             enabled: false
     thymeleaf:
-        mode: XHTML
+        mode: HTML
 security:
-    basic:
-        enabled: false
     oauth2:
         resource:
             filter-order: 3
 
 server:
-    session:
-        cookie:
-            http-only: true
+    servlet:
+        session:
+            cookie:
+                http-only: true
 
+# Properties to be exposed on the /info management endpoint
 info:
-    project:
-        version: #project.version#
+    # Comma separated list of profiles that will trigger the ribbon to show
+    display-ribbon-on-profiles: "dev"
 
 # ===================================================================
 # JHipster specific properties
 #
-# Full reference is available at: http://www.jhipster.tech/common-application-properties/
+# Full reference is available at: https://www.jhipster.tech/common-application-properties/
 # ===================================================================
 
 jhipster:
@@ -130,8 +148,6 @@ jhipster:
         contact-email:
         license:
         license-url:
-    ribbon:
-        display-on-active-profiles: dev
 
 # ===================================================================
 # Application specific properties
@@ -139,7 +155,7 @@ jhipster:
 # to have type-safe configuration, like in the JHipsterProperties above
 #
 # More documentation is available at:
-# http://www.jhipster.tech/common-application-properties/
+# https://www.jhipster.tech/common-application-properties/
 # ===================================================================
 
-application:
+# application:
diff --git a/src/main/resources/config/bootstrap.yml b/src/main/resources/config/bootstrap.yml
index b9484da..2c3a050 100644
--- a/src/main/resources/config/bootstrap.yml
+++ b/src/main/resources/config/bootstrap.yml
@@ -1,6 +1,6 @@
 # ===================================================================
 # Spring Cloud Config bootstrap configuration for the "dev" profile
-# In prod profile, properties will be overwriten by the ones defined in bootstrap-prod.yml
+# In prod profile, properties will be overwritten by the ones defined in bootstrap-prod.yml
 # ===================================================================
 
 jhipster:
diff --git a/src/main/resources/config/liquibase/changelog/00000000000000_initial_schema.xml b/src/main/resources/config/liquibase/changelog/00000000000000_initial_schema.xml
index d759216..b9f2b36 100644
--- a/src/main/resources/config/liquibase/changelog/00000000000000_initial_schema.xml
+++ b/src/main/resources/config/liquibase/changelog/00000000000000_initial_schema.xml
@@ -6,8 +6,6 @@
     xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd
                         http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd">
 
-    <property name="now" value="now()" dbms="h2"/>
-    <property name="now" value="now()" dbms="mysql"/>
     <property name="autoIncrement" value="true"/>
 
     <!--
@@ -56,4 +54,19 @@
                                  referencedColumnNames="event_id"
                                  referencedTableName="jhi_persistent_audit_event"/>
     </changeSet>
+
+    <changeSet author="jhipster" id="00000000000002" context="test">
+        <createTable tableName="jhi_date_time_wrapper">
+            <column autoIncrement="${autoIncrement}" name="id" type="BIGINT">
+                <constraints primaryKey="true" primaryKeyName="jhi_date_time_wrapperPK"/>
+            </column>
+            <column name="instant" type="timestamp"/>
+            <column name="local_date_time" type="timestamp"/>
+            <column name="offset_date_time" type="timestamp"/>
+            <column name="zoned_date_time" type="timestamp"/>
+            <column name="local_time" type="time"/>
+            <column name="offset_time" type="time"/>
+            <column name="local_date" type="date"/>
+        </createTable>
+    </changeSet>
 </databaseChangeLog>
diff --git a/src/main/resources/config/liquibase/changelog/20181018181721_added_entity_Site.xml b/src/main/resources/config/liquibase/changelog/20181018181721_added_entity_Site.xml
index 8585939..cd5368c 100644
--- a/src/main/resources/config/liquibase/changelog/20181018181721_added_entity_Site.xml
+++ b/src/main/resources/config/liquibase/changelog/20181018181721_added_entity_Site.xml
@@ -98,11 +98,11 @@
                 <constraints nullable="true" />
             </column>
 
-            <column name="tax_exempt" type="bit">
+            <column name="tax_exempt" type="boolean">
                 <constraints nullable="true" />
             </column>
 
-            <column name="roll_billing" type="bit">
+            <column name="roll_billing" type="boolean">
                 <constraints nullable="true" />
             </column>
 
diff --git a/src/main/resources/i18n/messages.properties b/src/main/resources/i18n/messages.properties
index bab40f1..6d072f9 100644
--- a/src/main/resources/i18n/messages.properties
+++ b/src/main/resources/i18n/messages.properties
@@ -19,4 +19,3 @@ email.reset.title=sites password reset
 email.reset.greeting=Dear {0}
 email.reset.text1=For your sites account a password reset was requested, please click on the URL below to reset it:
 email.reset.text2=Regards,
-
diff --git a/src/main/resources/i18n/messages_en.properties b/src/main/resources/i18n/messages_en.properties
index bab40f1..6d072f9 100644
--- a/src/main/resources/i18n/messages_en.properties
+++ b/src/main/resources/i18n/messages_en.properties
@@ -19,4 +19,3 @@ email.reset.title=sites password reset
 email.reset.greeting=Dear {0}
 email.reset.text1=For your sites account a password reset was requested, please click on the URL below to reset it:
 email.reset.text2=Regards,
-
diff --git a/src/main/resources/logback-spring.xml b/src/main/resources/logback-spring.xml
index a7fa8c1..42e36b9 100644
--- a/src/main/resources/logback-spring.xml
+++ b/src/main/resources/logback-spring.xml
@@ -1,4 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE configuration>
 
 <configuration scan="true">
     <include resource="org/springframework/boot/logging/logback/base.xml"/>
@@ -20,10 +21,15 @@
         <queueSize>512</queueSize>
         <appender-ref ref="FILE"/>
     </appender>
+
+    <root level="${logging.level.root}">
+        <appender-ref ref="ASYNC"/>
+    </root>
 -->
 
     <logger name="javax.activation" level="WARN"/>
     <logger name="javax.mail" level="WARN"/>
+    <logger name="javax.management.remote" level="WARN"/>
     <logger name="javax.xml.bind" level="WARN"/>
     <logger name="ch.qos.logback" level="WARN"/>
     <logger name="com.codahale.metrics" level="WARN"/>
@@ -33,6 +39,7 @@
     <logger name="com.ryantenney" level="WARN"/>
     <logger name="com.sun" level="WARN"/>
     <logger name="com.zaxxer" level="WARN"/>
+    <logger name="io.searchbox" level="WARN"/>
     <logger name="io.undertow" level="WARN"/>
     <logger name="io.undertow.websockets.jsr" level="ERROR"/>
     <logger name="org.apache" level="WARN"/>
diff --git a/src/main/resources/static/index.html b/src/main/resources/static/index.html
index 68f6955..46c2644 100644
--- a/src/main/resources/static/index.html
+++ b/src/main/resources/static/index.html
@@ -74,12 +74,12 @@
 <div class="container">
     <h1>Welcome, Java Hipster!</h1>
 
-    <p>This application is a microservice, which has been generated using <a href="http://www.jhipster.tech/">JHipster</a>.</p>
+    <p>This application is a microservice, which has been generated using <a href="https://www.jhipster.tech/">JHipster</a>.</p>
 
     <ul>
         <li>It does not have a front-end. The front-end should be generated on a JHipster gateway</li>
         <li>It is serving REST APIs, under the '/api' URLs.</li>
-        <li>Swagger documentation endpoint for those APIs is at <a href="/v2/api-docs">/v2/api-docs</a>, but if you want access to the full Swagger UI, you should use a JHipster gateway, which will serve as an API developer portal</li>
+        <li>Swagger documentation endpoint for those APIs is at <a href="./v2/api-docs">/v2/api-docs</a>, but if you want access to the full Swagger UI, you should use a JHipster gateway, which will serve as an API developer portal</li>
     </ul>
 
     <h2>
@@ -87,7 +87,7 @@
     </h2>
 
     <ul>
-        <li><a href="http://www.jhipster.tech/" target="_blank">JHipster homepage</a></li>
+        <li><a href="https://www.jhipster.tech/" target="_blank">JHipster homepage</a></li>
         <li><a href="http://stackoverflow.com/tags/jhipster/info" target="_blank">JHipster on Stack Overflow</a></li>
         <li><a href="https://github.com/jhipster/generator-jhipster/issues?state=open" target="_blank">JHipster bug tracker</a></li>
         <li><a href="https://gitter.im/jhipster/generator-jhipster" target="_blank">JHipster public chat room</a></li>
diff --git a/src/main/resources/swagger/api.yml b/src/main/resources/swagger/api.yml
index a1a6ba7..47305f2 100644
--- a/src/main/resources/swagger/api.yml
+++ b/src/main/resources/swagger/api.yml
@@ -1,6 +1,7 @@
-# API-first development with swagger
-# This file will be used at compile time to generate Spring-MVC endpoint stubs using swagger-codegen
-swagger: "2.0"
+# API-first development with OpenAPI
+# This file will be used at compile time to generate Spring-MVC endpoint stubs using openapi-generator
+openapi: "3.0.1"
 info:
+  title: "sites"
   version: 0.0.1
 paths: {}
\ No newline at end of file
diff --git a/src/test/gatling/conf/gatling.conf b/src/test/gatling/conf/gatling.conf
index e509853..6916e8b 100644
--- a/src/test/gatling/conf/gatling.conf
+++ b/src/test/gatling/conf/gatling.conf
@@ -5,127 +5,128 @@
 # This file contains all the settings configurable for Gatling with their default values
 
 gatling {
-    core {
-        #outputDirectoryBaseName = "" # The prefix for each simulation result folder (then suffixed by the report generation timestamp)
-        #runDescription = ""          # The description for this simulation run, displayed in each report
-        #encoding = "utf-8"           # Encoding to use throughout Gatling for file and string manipulation
-        #simulationClass = ""         # The FQCN of the simulation to run (when used in conjunction with noReports, the simulation for which assertions will be validated)
-        #mute = false                 # When set to true, don't ask for simulation name nor run description (currently only used by Gatling SBT plugin)
-        #elFileBodiesCacheMaxCapacity = 200        # Cache size for request body EL templates, set to 0 to disable
-        #rawFileBodiesCacheMaxCapacity = 200       # Cache size for request body Raw templates, set to 0 to disable
-        #rawFileBodiesInMemoryMaxSize = 1000       # Below this limit, raw file bodies will be cached in memory
+  core {
+    #outputDirectoryBaseName = "" # The prefix for each simulation result folder (then suffixed by the report generation timestamp)
+    #runDescription = ""          # The description for this simulation run, displayed in each report
+    #encoding = "utf-8"           # Encoding to use throughout Gatling for file and string manipulation
+    #simulationClass = ""         # The FQCN of the simulation to run (when used in conjunction with noReports, the simulation for which assertions will be validated)
+    #mute = false                 # When set to true, don't ask for simulation name nor run description (currently only used by Gatling SBT plugin)
+    #elFileBodiesCacheMaxCapacity = 200        # Cache size for request body EL templates, set to 0 to disable
+    #rawFileBodiesCacheMaxCapacity = 200       # Cache size for request body Raw templates, set to 0 to disable
+    #rawFileBodiesInMemoryMaxSize = 1000       # Below this limit, raw file bodies will be cached in memory
 
-        extract {
-            regex {
-                #cacheMaxCapacity = 200 # Cache size for the compiled regexes, set to 0 to disable caching
-            }
-            xpath {
-                #cacheMaxCapacity = 200 # Cache size for the compiled XPath queries,  set to 0 to disable caching
-            }
-            jsonPath {
-                #cacheMaxCapacity = 200 # Cache size for the compiled jsonPath queries, set to 0 to disable caching
-                #preferJackson = false  # When set to true, prefer Jackson over Boon for JSON-related operations
-            }
-            css {
-                #cacheMaxCapacity = 200 # Cache size for the compiled CSS selectors queries,  set to 0 to disable caching
-            }
-        }
-        directory {
-            #data = user-files/data               # Folder where user's data (e.g. files used by Feeders) is located
-            #bodies = user-files/bodies           # Folder where bodies are located
-            #simulations = user-files/simulations # Folder where the bundle's simulations are located
-            #reportsOnly = ""                     # If set, name of report folder to look for in order to generate its report
-            #binaries = ""                        # If set, name of the folder where compiles classes are located: Defaults to GATLING_HOME/target.
-            #results = results                    # Name of the folder where all reports folder are located
-        }
+    extract {
+      regex {
+        #cacheMaxCapacity = 200 # Cache size for the compiled regexes, set to 0 to disable caching
+      }
+      xpath {
+        #cacheMaxCapacity = 200 # Cache size for the compiled XPath queries,  set to 0 to disable caching
+      }
+      jsonPath {
+        #cacheMaxCapacity = 200 # Cache size for the compiled jsonPath queries, set to 0 to disable caching
+        #preferJackson = false  # When set to true, prefer Jackson over Boon for JSON-related operations
+      }
+      css {
+        #cacheMaxCapacity = 200 # Cache size for the compiled CSS selectors queries,  set to 0 to disable caching
+      }
     }
-    charting {
-        #noReports = false       # When set to true, don't generate HTML reports
-        #maxPlotPerSeries = 1000 # Number of points per graph in Gatling reports
-        #useGroupDurationMetric = false  # Switch group timings from cumulated response time to group duration.
-        indicators {
-            #lowerBound = 800      # Lower bound for the requests' response time to track in the reports and the console summary
-            #higherBound = 1200    # Higher bound for the requests' response time to track in the reports and the console summary
-            #percentile1 = 50      # Value for the 1st percentile to track in the reports, the console summary and Graphite
-            #percentile2 = 75      # Value for the 2nd percentile to track in the reports, the console summary and Graphite
-            #percentile3 = 95      # Value for the 3rd percentile to track in the reports, the console summary and Graphite
-            #percentile4 = 99      # Value for the 4th percentile to track in the reports, the console summary and Graphite
-        }
+
+    directory {
+      #data = user-files/data               # Folder where user's data (e.g. files used by Feeders) is located
+      #bodies = user-files/bodies           # Folder where bodies are located
+      #simulations = user-files/simulations # Folder where the bundle's simulations are located
+      #reportsOnly = ""                     # If set, name of report folder to look for in order to generate its report
+      #binaries = ""                        # If set, name of the folder where compiles classes are located: Defaults to GATLING_HOME/target.
+      #results = results                    # Name of the folder where all reports folder are located
+    }
+  }
+  charting {
+    #noReports = false       # When set to true, don't generate HTML reports
+    #maxPlotPerSeries = 1000 # Number of points per graph in Gatling reports
+    #useGroupDurationMetric = false  # Switch group timings from cumulated response time to group duration.
+    indicators {
+      #lowerBound = 800      # Lower bound for the requests' response time to track in the reports and the console summary
+      #higherBound = 1200    # Higher bound for the requests' response time to track in the reports and the console summary
+      #percentile1 = 50      # Value for the 1st percentile to track in the reports, the console summary and Graphite
+      #percentile2 = 75      # Value for the 2nd percentile to track in the reports, the console summary and Graphite
+      #percentile3 = 95      # Value for the 3rd percentile to track in the reports, the console summary and Graphite
+      #percentile4 = 99      # Value for the 4th percentile to track in the reports, the console summary and Graphite
+    }
+  }
+  http {
+    #fetchedCssCacheMaxCapacity = 200          # Cache size for CSS parsed content, set to 0 to disable
+    #fetchedHtmlCacheMaxCapacity = 200         # Cache size for HTML parsed content, set to 0 to disable
+    #perUserCacheMaxCapacity = 200             # Per virtual user cache size, set to 0 to disable
+    #warmUpUrl = "http://gatling.io"           # The URL to use to warm-up the HTTP stack (blank means disabled)
+    #enableGA = true                           # Very light Google Analytics, please support
+    ssl {
+      keyStore {
+        #type = ""      # Type of SSLContext's KeyManagers store
+        #file = ""      # Location of SSLContext's KeyManagers store
+        #password = ""  # Password for SSLContext's KeyManagers store
+        #algorithm = "" # Algorithm used SSLContext's KeyManagers store
+      }
+      trustStore {
+        #type = ""      # Type of SSLContext's TrustManagers store
+        #file = ""      # Location of SSLContext's TrustManagers store
+        #password = ""  # Password for SSLContext's TrustManagers store
+        #algorithm = "" # Algorithm used by SSLContext's TrustManagers store
+      }
+    }
+    ahc {
+      #keepAlive = true                                # Allow pooling HTTP connections (keep-alive header automatically added)
+      #connectTimeout = 10000                          # Timeout when establishing a connection
+      #handshakeTimeout = 10000                        # Timeout when performing TLS hashshake
+      #pooledConnectionIdleTimeout = 60000             # Timeout when a connection stays unused in the pool
+      #readTimeout = 60000                             # Timeout when a used connection stays idle
+      #maxRetry = 2                                    # Number of times that a request should be tried again
+      #requestTimeout = 60000                          # Timeout of the requests
+      #acceptAnyCertificate = true                     # When set to true, doesn't validate SSL certificates
+      #httpClientCodecMaxInitialLineLength = 4096      # Maximum length of the initial line of the response (e.g. "HTTP/1.0 200 OK")
+      #httpClientCodecMaxHeaderSize = 8192             # Maximum size, in bytes, of each request's headers
+      #httpClientCodecMaxChunkSize = 8192              # Maximum length of the content or each chunk
+      #webSocketMaxFrameSize = 10240000                # Maximum frame payload size
+      #sslEnabledProtocols = [TLSv1.2, TLSv1.1, TLSv1] # Array of enabled protocols for HTTPS, if empty use the JDK defaults
+      #sslEnabledCipherSuites = []                     # Array of enabled cipher suites for HTTPS, if empty use the AHC defaults
+      #sslSessionCacheSize = 0                         # SSLSession cache size, set to 0 to use JDK's default
+      #sslSessionTimeout = 0                           # SSLSession timeout in seconds, set to 0 to use JDK's default (24h)
+      #useOpenSsl = false                              # if OpenSSL should be used instead of JSSE (requires tcnative jar)
+      #useNativeTransport = false                      # if native transport should be used instead of Java NIO (requires netty-transport-native-epoll, currently Linux only)
+      #tcpNoDelay = true
+      #soReuseAddress = false
+      #soLinger = -1
+      #soSndBuf = -1
+      #soRcvBuf = -1
+      #allocator = "pooled"                            # switch to unpooled for unpooled ByteBufAllocator
+      #maxThreadLocalCharBufferSize = 200000           # Netty's default is 16k
+    }
+    dns {
+      #queryTimeout = 5000                             # Timeout of each DNS query in millis
+      #maxQueriesPerResolve = 6                        # Maximum allowed number of DNS queries for a given name resolution
+    }
+  }
+  jms {
+    #acknowledgedMessagesBufferSize = 5000             # size of the buffer used to tracked acknowledged messages and protect against duplicate receives
+  }
+  data {
+    #writers = [console, file]      # The list of DataWriters to which Gatling write simulation data (currently supported : console, file, graphite, jdbc)
+    console {
+      #light = false                # When set to true, displays a light version without detailed request stats
     }
-    http {
-        #fetchedCssCacheMaxCapacity = 200          # Cache size for CSS parsed content, set to 0 to disable
-        #fetchedHtmlCacheMaxCapacity = 200         # Cache size for HTML parsed content, set to 0 to disable
-        #perUserCacheMaxCapacity = 200             # Per virtual user cache size, set to 0 to disable
-        #warmUpUrl = "http://gatling.io"           # The URL to use to warm-up the HTTP stack (blank means disabled)
-        #enableGA = true                           # Very light Google Analytics, please support
-        ssl {
-            keyStore {
-                #type = ""      # Type of SSLContext's KeyManagers store
-                #file = ""      # Location of SSLContext's KeyManagers store
-                #password = ""  # Password for SSLContext's KeyManagers store
-                #algorithm = "" # Algorithm used SSLContext's KeyManagers store
-            }
-            trustStore {
-                #type = ""      # Type of SSLContext's TrustManagers store
-                #file = ""      # Location of SSLContext's TrustManagers store
-                #password = ""  # Password for SSLContext's TrustManagers store
-                #algorithm = "" # Algorithm used by SSLContext's TrustManagers store
-            }
-        }
-        ahc {
-            #keepAlive = true                                # Allow pooling HTTP connections (keep-alive header automatically added)
-            #connectTimeout = 10000                          # Timeout when establishing a connection
-            #handshakeTimeout = 10000                        # Timeout when performing TLS hashshake
-            #pooledConnectionIdleTimeout = 60000             # Timeout when a connection stays unused in the pool
-            #readTimeout = 60000                             # Timeout when a used connection stays idle
-            #maxRetry = 2                                    # Number of times that a request should be tried again
-            #requestTimeout = 60000                          # Timeout of the requests
-            #acceptAnyCertificate = true                     # When set to true, doesn't validate SSL certificates
-            #httpClientCodecMaxInitialLineLength = 4096      # Maximum length of the initial line of the response (e.g. "HTTP/1.0 200 OK")
-            #httpClientCodecMaxHeaderSize = 8192             # Maximum size, in bytes, of each request's headers
-            #httpClientCodecMaxChunkSize = 8192              # Maximum length of the content or each chunk
-            #webSocketMaxFrameSize = 10240000                # Maximum frame payload size
-            #sslEnabledProtocols = [TLSv1.2, TLSv1.1, TLSv1] # Array of enabled protocols for HTTPS, if empty use the JDK defaults
-            #sslEnabledCipherSuites = []                     # Array of enabled cipher suites for HTTPS, if empty use the AHC defaults
-            #sslSessionCacheSize = 0                         # SSLSession cache size, set to 0 to use JDK's default
-            #sslSessionTimeout = 0                           # SSLSession timeout in seconds, set to 0 to use JDK's default (24h)
-            #useOpenSsl = false                              # if OpenSSL should be used instead of JSSE (requires tcnative jar)
-            #useNativeTransport = false                      # if native transport should be used instead of Java NIO (requires netty-transport-native-epoll, currently Linux only)
-            #tcpNoDelay = true
-            #soReuseAddress = false
-            #soLinger = -1
-            #soSndBuf = -1
-            #soRcvBuf = -1
-            #allocator = "pooled"                            # switch to unpooled for unpooled ByteBufAllocator
-            #maxThreadLocalCharBufferSize = 200000           # Netty's default is 16k
-        }
-        dns {
-            #queryTimeout = 5000                             # Timeout of each DNS query in millis
-            #maxQueriesPerResolve = 6                        # Maximum allowed number of DNS queries for a given name resolution
-        }
+    file {
+      #bufferSize = 8192            # FileDataWriter's internal data buffer size, in bytes
     }
-    jms {
-       #acknowledgedMessagesBufferSize = 5000             # size of the buffer used to tracked acknowledged messages and protect against duplicate receives
+    leak {
+      #noActivityTimeout = 30  # Period, in seconds, for which Gatling may have no activity before considering a leak may be happening
     }
-    data {
-        #writers = [console, file]      # The list of DataWriters to which Gatling write simulation data (currently supported : console, file, graphite, jdbc)
-        console {
-           #light = false                # When set to true, displays a light version without detailed request stats
-        }
-        file {
-            #bufferSize = 8192            # FileDataWriter's internal data buffer size, in bytes
-        }
-        leak {
-            #noActivityTimeout = 30  # Period, in seconds, for which Gatling may have no activity before considering a leak may be happening
-        }
-        graphite {
-            #light = false              # only send the all* stats
-            #host = "localhost"         # The host where the Carbon server is located
-            #port = 2003                # The port to which the Carbon server listens to (2003 is default for plaintext, 2004 is default for pickle)
-            #protocol = "tcp"           # The protocol used to send data to Carbon (currently supported : "tcp", "udp")
-            #rootPathPrefix = "gatling" # The common prefix of all metrics sent to Graphite
-            #bufferSize = 8192          # GraphiteDataWriter's internal data buffer size, in bytes
-            #writeInterval = 1          # GraphiteDataWriter's write interval, in seconds
-        }
+    graphite {
+      #light = false              # only send the all* stats
+      #host = "localhost"         # The host where the Carbon server is located
+      #port = 2003                # The port to which the Carbon server listens to (2003 is default for plaintext, 2004 is default for pickle)
+      #protocol = "tcp"           # The protocol used to send data to Carbon (currently supported : "tcp", "udp")
+      #rootPathPrefix = "gatling" # The common prefix of all metrics sent to Graphite
+      #bufferSize = 8192          # GraphiteDataWriter's internal data buffer size, in bytes
+      #writeInterval = 1          # GraphiteDataWriter's write interval, in seconds
     }
+  }
 }
diff --git a/src/test/gatling/conf/logback.xml b/src/test/gatling/conf/logback.xml
index 7b037e6..189bcda 100644
--- a/src/test/gatling/conf/logback.xml
+++ b/src/test/gatling/conf/logback.xml
@@ -1,4 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE configuration>
+
 <configuration>
 
     <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
diff --git a/src/test/gatling/user-files/simulations/SiteGatlingTest.scala b/src/test/gatling/user-files/simulations/SiteGatlingTest.scala
index 0179d19..c554281 100644
--- a/src/test/gatling/user-files/simulations/SiteGatlingTest.scala
+++ b/src/test/gatling/user-files/simulations/SiteGatlingTest.scala
@@ -30,12 +30,13 @@ class SiteGatlingTest extends Simulation {
         .acceptLanguageHeader("fr,fr-fr;q=0.8,en-us;q=0.5,en;q=0.3")
         .connectionHeader("keep-alive")
         .userAgentHeader("Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:33.0) Gecko/20100101 Firefox/33.0")
+        .silentResources // Silence all resources like css or css so they don't clutter the results
 
     val headers_http = Map(
         "Accept" -> """application/json"""
     )
 
-    val authorization_header = "Basic " + Base64.getEncoder.encodeToString("sitesapp:my-secret-token-to-change-in-production".getBytes(StandardCharsets.UTF_8))
+    val authorization_header = "Basic " + Base64.getEncoder.encodeToString("sitesapp:bXktc2VjcmV0LXRva2VuLXRvLWNoYW5nZS1pbi1wcm9kdWN0aW9uLWFuZC10by1rZWVwLWluLWEtc2VjdXJlLXBsYWNl".getBytes(StandardCharsets.UTF_8))
 
     val headers_http_authentication = Map(
         "Content-Type" -> """application/x-www-form-urlencoded""",
@@ -52,7 +53,8 @@ class SiteGatlingTest extends Simulation {
         .exec(http("First unauthenticated request")
         .get("/api/account")
         .headers(headers_http)
-        .check(status.is(401))).exitHereIfFailed
+        .check(status.is(401))
+        ).exitHereIfFailed
         .pause(10)
         .exec(http("Authentication")
         .post("/oauth/token")
@@ -61,11 +63,11 @@ class SiteGatlingTest extends Simulation {
         .formParam("password", "admin")
         .formParam("grant_type", "password")
         .formParam("scope", "read write")
-        .formParam("client_secret", "my-secret-token-to-change-in-production")
+        .formParam("client_secret", "bXktc2VjcmV0LXRva2VuLXRvLWNoYW5nZS1pbi1wcm9kdWN0aW9uLWFuZC10by1rZWVwLWluLWEtc2VjdXJlLXBsYWNl")
         .formParam("client_id", "sitesapp")
         .formParam("submit", "Login")
         .check(jsonPath("$.access_token").saveAs("access_token"))).exitHereIfFailed
-        .pause(1)
+        .pause(2)
         .exec(http("Authenticated request")
         .get("/api/account")
         .headers(headers_http_authenticated)
@@ -80,7 +82,30 @@ class SiteGatlingTest extends Simulation {
             .exec(http("Create new site")
             .post("/sites/api/sites")
             .headers(headers_http_authenticated)
-            .body(StringBody("""{"id":null, "budderflyId":"SAMPLE_TEXT", "customerName":"SAMPLE_TEXT", "status":null, "companyType":"SAMPLE_TEXT", "storeNumber":"0", "address":"SAMPLE_TEXT", "city":"SAMPLE_TEXT", "state":"SAMPLE_TEXT", "zip":"SAMPLE_TEXT", "billingType":null, "paymentType":null, "siteType":null, "ownerName":"SAMPLE_TEXT", "ownerEmail":"SAMPLE_TEXT", "ownerPhone":"SAMPLE_TEXT", "address1":"SAMPLE_TEXT", "address2":"SAMPLE_TEXT", "latitude":"SAMPLE_TEXT", "longitude":"SAMPLE_TEXT", "taxExempt":null, "rollBilling":null}""")).asJSON
+            .body(StringBody("""{
+                "id":null
+                , "budderflyId":"SAMPLE_TEXT"
+                , "customerName":"SAMPLE_TEXT"
+                , "status":"ACTIVE"
+                , "companyType":"SAMPLE_TEXT"
+                , "storeNumber":"0"
+                , "address":"SAMPLE_TEXT"
+                , "city":"SAMPLE_TEXT"
+                , "state":"SAMPLE_TEXT"
+                , "zip":"SAMPLE_TEXT"
+                , "billingType":"AMU-Forward"
+                , "paymentType":"ETF"
+                , "siteType":"Physical"
+                , "ownerName":"SAMPLE_TEXT"
+                , "ownerEmail":"SAMPLE_TEXT"
+                , "ownerPhone":"SAMPLE_TEXT"
+                , "address1":"SAMPLE_TEXT"
+                , "address2":"SAMPLE_TEXT"
+                , "latitude":"SAMPLE_TEXT"
+                , "longitude":"SAMPLE_TEXT"
+                , "taxExempt":null
+                , "rollBilling":null
+                }""")).asJSON
             .check(status.is(201))
             .check(headerRegex("Location", "(.*)").saveAs("new_site_url"))).exitHereIfFailed
             .pause(10)
diff --git a/src/test/java/com/budderfly/sites/config/WebConfigurerTest.java b/src/test/java/com/budderfly/sites/config/WebConfigurerTest.java
index eb42abc..5729ac4 100644
--- a/src/test/java/com/budderfly/sites/config/WebConfigurerTest.java
+++ b/src/test/java/com/budderfly/sites/config/WebConfigurerTest.java
@@ -8,10 +8,10 @@ import io.github.jhipster.config.JHipsterProperties;
 import io.undertow.Undertow;
 import io.undertow.Undertow.Builder;
 import io.undertow.UndertowOptions;
-import org.apache.commons.io.FilenameUtils;
+
 import org.junit.Before;
 import org.junit.Test;
-import org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
 import org.springframework.http.HttpHeaders;
 import org.springframework.mock.env.MockEnvironment;
 import org.springframework.mock.web.MockServletContext;
@@ -24,8 +24,8 @@ import javax.servlet.*;
 import java.util.*;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.*;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.options;
@@ -52,15 +52,15 @@ public class WebConfigurerTest {
     @Before
     public void setup() {
         servletContext = spy(new MockServletContext());
-        doReturn(new MockFilterRegistration())
+        doReturn(mock(FilterRegistration.Dynamic.class))
             .when(servletContext).addFilter(anyString(), any(Filter.class));
-        doReturn(new MockServletRegistration())
+        doReturn(mock(ServletRegistration.Dynamic.class))
             .when(servletContext).addServlet(anyString(), any(Servlet.class));
 
         env = new MockEnvironment();
         props = new JHipsterProperties();
 
-        webConfigurer = new WebConfigurer(env, props, null);
+        webConfigurer = new WebConfigurer(env, props);
         metricRegistry = new MetricRegistry();
         webConfigurer.setMetricRegistry(metricRegistry);
     }
@@ -90,7 +90,7 @@ public class WebConfigurerTest {
     @Test
     public void testCustomizeServletContainer() {
         env.setActiveProfiles(JHipsterConstants.SPRING_PROFILE_PRODUCTION);
-        UndertowEmbeddedServletContainerFactory container = new UndertowEmbeddedServletContainerFactory();
+        UndertowServletWebServerFactory container = new UndertowServletWebServerFactory();
         webConfigurer.customize(container);
         assertThat(container.getMimeMappings().get("abs")).isEqualTo("audio/x-mpeg");
         assertThat(container.getMimeMappings().get("html")).isEqualTo("text/html;charset=utf-8");
@@ -105,7 +105,7 @@ public class WebConfigurerTest {
     @Test
     public void testUndertowHttp2Enabled() {
         props.getHttp().setVersion(JHipsterProperties.Http.Version.V_2_0);
-        UndertowEmbeddedServletContainerFactory container = new UndertowEmbeddedServletContainerFactory();
+        UndertowServletWebServerFactory container = new UndertowServletWebServerFactory();
         webConfigurer.customize(container);
         Builder builder = Undertow.builder();
         container.getBuilderCustomizers().forEach(c -> c.customize(builder));
@@ -191,135 +191,4 @@ public class WebConfigurerTest {
             .andExpect(status().isOk())
             .andExpect(header().doesNotExist(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN));
     }
-
-    static class MockFilterRegistration implements FilterRegistration, FilterRegistration.Dynamic {
-
-        @Override
-        public void addMappingForServletNames(EnumSet<DispatcherType> dispatcherTypes, boolean isMatchAfter, String... servletNames) {
-
-        }
-
-        @Override
-        public Collection<String> getServletNameMappings() {
-            return null;
-        }
-
-        @Override
-        public void addMappingForUrlPatterns(EnumSet<DispatcherType> dispatcherTypes, boolean isMatchAfter, String... urlPatterns) {
-
-        }
-
-        @Override
-        public Collection<String> getUrlPatternMappings() {
-            return null;
-        }
-
-        @Override
-        public void setAsyncSupported(boolean isAsyncSupported) {
-
-        }
-
-        @Override
-        public String getName() {
-            return null;
-        }
-
-        @Override
-        public String getClassName() {
-            return null;
-        }
-
-        @Override
-        public boolean setInitParameter(String name, String value) {
-            return false;
-        }
-
-        @Override
-        public String getInitParameter(String name) {
-            return null;
-        }
-
-        @Override
-        public Set<String> setInitParameters(Map<String, String> initParameters) {
-            return null;
-        }
-
-        @Override
-        public Map<String, String> getInitParameters() {
-            return null;
-        }
-    }
-
-    static class MockServletRegistration implements ServletRegistration, ServletRegistration.Dynamic {
-
-        @Override
-        public void setLoadOnStartup(int loadOnStartup) {
-
-        }
-
-        @Override
-        public Set<String> setServletSecurity(ServletSecurityElement constraint) {
-            return null;
-        }
-
-        @Override
-        public void setMultipartConfig(MultipartConfigElement multipartConfig) {
-
-        }
-
-        @Override
-        public void setRunAsRole(String roleName) {
-
-        }
-
-        @Override
-        public void setAsyncSupported(boolean isAsyncSupported) {
-
-        }
-
-        @Override
-        public Set<String> addMapping(String... urlPatterns) {
-            return null;
-        }
-
-        @Override
-        public Collection<String> getMappings() {
-            return null;
-        }
-
-        @Override
-        public String getRunAsRole() {
-            return null;
-        }
-
-        @Override
-        public String getName() {
-            return null;
-        }
-
-        @Override
-        public String getClassName() {
-            return null;
-        }
-
-        @Override
-        public boolean setInitParameter(String name, String value) {
-            return false;
-        }
-
-        @Override
-        public String getInitParameter(String name) {
-            return null;
-        }
-
-        @Override
-        public Set<String> setInitParameters(Map<String, String> initParameters) {
-            return null;
-        }
-
-        @Override
-        public Map<String, String> getInitParameters() {
-            return null;
-        }
-    }
 }
diff --git a/src/test/java/com/budderfly/sites/config/elasticsearch/IndexReinitializer.java b/src/test/java/com/budderfly/sites/config/elasticsearch/IndexReinitializer.java
deleted file mode 100644
index 4e0af1c..0000000
--- a/src/test/java/com/budderfly/sites/config/elasticsearch/IndexReinitializer.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package com.budderfly.sites.config.elasticsearch;
-
-import static java.lang.System.currentTimeMillis;
-
-import javax.annotation.PostConstruct;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.data.elasticsearch.core.ElasticsearchTemplate;
-import org.springframework.stereotype.Component;
-
-@Component
-public class IndexReinitializer {
-
-    private Logger logger = LoggerFactory.getLogger(getClass());
-
-    @Autowired
-    private ElasticsearchTemplate elasticsearchTemplate;
-
-    @PostConstruct
-    public void resetIndex() {
-        long t = currentTimeMillis();
-        elasticsearchTemplate.deleteIndex("_all");
-        t = currentTimeMillis() - t;
-        logger.debug("Elasticsearch indexes reset in {} ms", t);
-    }
-}
diff --git a/src/test/java/com/budderfly/sites/config/timezone/HibernateTimeZoneTest.java b/src/test/java/com/budderfly/sites/config/timezone/HibernateTimeZoneTest.java
new file mode 100644
index 0000000..ffd320c
--- /dev/null
+++ b/src/test/java/com/budderfly/sites/config/timezone/HibernateTimeZoneTest.java
@@ -0,0 +1,176 @@
+package com.budderfly.sites.config.timezone;
+
+import com.budderfly.sites.SitesApp;
+import com.budderfly.sites.repository.timezone.DateTimeWrapper;
+import com.budderfly.sites.repository.timezone.DateTimeWrapperRepository;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.jdbc.core.JdbcTemplate;
+import org.springframework.jdbc.support.rowset.SqlRowSet;
+import org.springframework.test.context.junit4.SpringRunner;
+import org.springframework.transaction.annotation.Transactional;
+
+import java.time.*;
+import java.time.format.DateTimeFormatter;
+
+import static java.lang.String.format;
+import static org.assertj.core.api.Assertions.assertThat;
+
+/**
+ * Unit tests for the UTC Hibernate configuration.
+ */
+@RunWith(SpringRunner.class)
+@SpringBootTest(classes = SitesApp.class)
+public class HibernateTimeZoneTest {
+
+    @Autowired
+    private DateTimeWrapperRepository dateTimeWrapperRepository;
+    @Autowired
+    private JdbcTemplate jdbcTemplate;
+
+    private DateTimeWrapper dateTimeWrapper;
+    private DateTimeFormatter dateTimeFormatter;
+    private DateTimeFormatter timeFormatter;
+    private DateTimeFormatter dateFormatter;
+
+    @Before
+    public void setup() {
+        dateTimeWrapper = new DateTimeWrapper();
+        dateTimeWrapper.setInstant(Instant.parse("2014-11-12T05:50:00.0Z"));
+        dateTimeWrapper.setLocalDateTime(LocalDateTime.parse("2014-11-12T07:50:00.0"));
+        dateTimeWrapper.setOffsetDateTime(OffsetDateTime.parse("2011-12-14T08:30:00.0Z"));
+        dateTimeWrapper.setZonedDateTime(ZonedDateTime.parse("2011-12-14T08:30:00.0Z"));
+        dateTimeWrapper.setLocalTime(LocalTime.parse("14:30:00"));
+        dateTimeWrapper.setOffsetTime(OffsetTime.parse("14:30:00+02:00"));
+        dateTimeWrapper.setLocalDate(LocalDate.parse("2016-09-10"));
+
+        dateTimeFormatter = DateTimeFormatter
+            .ofPattern("yyyy-MM-dd HH:mm:ss.S")
+            .withZone(ZoneId.of("UTC"));
+
+        timeFormatter = DateTimeFormatter
+            .ofPattern("HH:mm:ss")
+            .withZone(ZoneId.of("UTC"));
+
+        dateFormatter = DateTimeFormatter
+            .ofPattern("yyyy-MM-dd");
+    }
+
+    @Test
+    @Transactional
+    public void storeInstantWithUtcConfigShouldBeStoredOnGMTTimeZone() {
+        dateTimeWrapperRepository.saveAndFlush(dateTimeWrapper);
+
+        String request = generateSqlRequest("instant", dateTimeWrapper.getId());
+        SqlRowSet resultSet = jdbcTemplate.queryForRowSet(request);
+        String expectedValue = dateTimeFormatter.format(dateTimeWrapper.getInstant());
+
+        assertThatDateStoredValueIsEqualToInsertDateValueOnGMTTimeZone(resultSet, expectedValue);
+    }
+
+    @Test
+    @Transactional
+    public void storeLocalDateTimeWithUtcConfigShouldBeStoredOnGMTTimeZone() {
+        dateTimeWrapperRepository.saveAndFlush(dateTimeWrapper);
+
+        String request = generateSqlRequest("local_date_time", dateTimeWrapper.getId());
+        SqlRowSet resultSet = jdbcTemplate.queryForRowSet(request);
+        String expectedValue = dateTimeWrapper
+            .getLocalDateTime()
+            .atZone(ZoneId.systemDefault())
+            .format(dateTimeFormatter);
+
+        assertThatDateStoredValueIsEqualToInsertDateValueOnGMTTimeZone(resultSet, expectedValue);
+    }
+
+    @Test
+    @Transactional
+    public void storeOffsetDateTimeWithUtcConfigShouldBeStoredOnGMTTimeZone() {
+        dateTimeWrapperRepository.saveAndFlush(dateTimeWrapper);
+
+        String request = generateSqlRequest("offset_date_time", dateTimeWrapper.getId());
+        SqlRowSet resultSet = jdbcTemplate.queryForRowSet(request);
+        String expectedValue = dateTimeWrapper
+            .getOffsetDateTime()
+            .format(dateTimeFormatter);
+
+        assertThatDateStoredValueIsEqualToInsertDateValueOnGMTTimeZone(resultSet, expectedValue);
+    }
+
+    @Test
+    @Transactional
+    public void storeZoneDateTimeWithUtcConfigShouldBeStoredOnGMTTimeZone() {
+        dateTimeWrapperRepository.saveAndFlush(dateTimeWrapper);
+
+        String request = generateSqlRequest("zoned_date_time", dateTimeWrapper.getId());
+        SqlRowSet resultSet = jdbcTemplate.queryForRowSet(request);
+        String expectedValue = dateTimeWrapper
+            .getZonedDateTime()
+            .format(dateTimeFormatter);
+
+        assertThatDateStoredValueIsEqualToInsertDateValueOnGMTTimeZone(resultSet, expectedValue);
+    }
+
+    @Test
+    @Transactional
+    public void storeLocalTimeWithUtcConfigShouldBeStoredOnGMTTimeZoneAccordingToHis1stJan1970Value() {
+        dateTimeWrapperRepository.saveAndFlush(dateTimeWrapper);
+
+        String request = generateSqlRequest("local_time", dateTimeWrapper.getId());
+        SqlRowSet resultSet = jdbcTemplate.queryForRowSet(request);
+        String expectedValue = dateTimeWrapper
+            .getLocalTime()
+            .atDate(LocalDate.of(1970, Month.JANUARY, 1))
+            .atZone(ZoneId.systemDefault())
+            .format(timeFormatter);
+
+        assertThatDateStoredValueIsEqualToInsertDateValueOnGMTTimeZone(resultSet, expectedValue);
+    }
+
+    @Test
+    @Transactional
+    public void storeOffsetTimeWithUtcConfigShouldBeStoredOnGMTTimeZoneAccordingToHis1stJan1970Value() {
+        dateTimeWrapperRepository.saveAndFlush(dateTimeWrapper);
+
+        String request = generateSqlRequest("offset_time", dateTimeWrapper.getId());
+        SqlRowSet resultSet = jdbcTemplate.queryForRowSet(request);
+        String expectedValue = dateTimeWrapper
+            .getOffsetTime()
+            .toLocalTime()
+            .atDate(LocalDate.of(1970, Month.JANUARY, 1))
+            .atZone(ZoneId.systemDefault())
+            .format(timeFormatter);
+
+        assertThatDateStoredValueIsEqualToInsertDateValueOnGMTTimeZone(resultSet, expectedValue);
+    }
+
+    @Test
+    @Transactional
+    public void storeLocalDateWithUtcConfigShouldBeStoredWithoutTransformation() {
+        dateTimeWrapperRepository.saveAndFlush(dateTimeWrapper);
+
+        String request = generateSqlRequest("local_date", dateTimeWrapper.getId());
+        SqlRowSet resultSet = jdbcTemplate.queryForRowSet(request);
+        String expectedValue = dateTimeWrapper
+            .getLocalDate()
+            .format(dateFormatter);
+
+        assertThatDateStoredValueIsEqualToInsertDateValueOnGMTTimeZone(resultSet, expectedValue);
+    }
+
+    private String generateSqlRequest(String fieldName, long id) {
+        return format("SELECT %s FROM jhi_date_time_wrapper where id=%d", fieldName, id);
+    }
+
+    private void assertThatDateStoredValueIsEqualToInsertDateValueOnGMTTimeZone(SqlRowSet sqlRowSet, String expectedValue) {
+        while (sqlRowSet.next()) {
+            String dbValue = sqlRowSet.getString(1);
+
+            assertThat(dbValue).isNotNull();
+            assertThat(dbValue).isEqualTo(expectedValue);
+        }
+    }
+}
diff --git a/src/test/java/com/budderfly/sites/repository/search/SiteSearchRepositoryMockConfiguration.java b/src/test/java/com/budderfly/sites/repository/search/SiteSearchRepositoryMockConfiguration.java
new file mode 100644
index 0000000..080e857
--- /dev/null
+++ b/src/test/java/com/budderfly/sites/repository/search/SiteSearchRepositoryMockConfiguration.java
@@ -0,0 +1,16 @@
+package com.budderfly.sites.repository.search;
+
+import org.springframework.boot.test.mock.mockito.MockBean;
+import org.springframework.context.annotation.Configuration;
+
+/**
+ * Configure a Mock version of SiteSearchRepository to test the
+ * application without starting Elasticsearch.
+ */
+@Configuration
+public class SiteSearchRepositoryMockConfiguration {
+
+    @MockBean
+    private SiteSearchRepository mockSiteSearchRepository;
+
+}
diff --git a/src/test/java/com/budderfly/sites/repository/timezone/DateTimeWrapper.java b/src/test/java/com/budderfly/sites/repository/timezone/DateTimeWrapper.java
new file mode 100644
index 0000000..bae3cde
--- /dev/null
+++ b/src/test/java/com/budderfly/sites/repository/timezone/DateTimeWrapper.java
@@ -0,0 +1,131 @@
+package com.budderfly.sites.repository.timezone;
+
+import javax.persistence.*;
+import java.io.Serializable;
+import java.time.*;
+import java.util.Objects;
+
+@Entity
+@Table(name = "jhi_date_time_wrapper")
+public class DateTimeWrapper implements Serializable {
+
+    private static final long serialVersionUID = 1L;
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+
+    @Column(name = "instant")
+    private Instant instant;
+
+    @Column(name = "local_date_time")
+    private LocalDateTime localDateTime;
+
+    @Column(name = "offset_date_time")
+    private OffsetDateTime offsetDateTime;
+
+    @Column(name = "zoned_date_time")
+    private ZonedDateTime zonedDateTime;
+
+    @Column(name = "local_time")
+    private LocalTime localTime;
+
+    @Column(name = "offset_time")
+    private OffsetTime offsetTime;
+
+    @Column(name = "local_date")
+    private LocalDate localDate;
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public Instant getInstant() {
+        return instant;
+    }
+
+    public void setInstant(Instant instant) {
+        this.instant = instant;
+    }
+
+    public LocalDateTime getLocalDateTime() {
+        return localDateTime;
+    }
+
+    public void setLocalDateTime(LocalDateTime localDateTime) {
+        this.localDateTime = localDateTime;
+    }
+
+    public OffsetDateTime getOffsetDateTime() {
+        return offsetDateTime;
+    }
+
+    public void setOffsetDateTime(OffsetDateTime offsetDateTime) {
+        this.offsetDateTime = offsetDateTime;
+    }
+
+    public ZonedDateTime getZonedDateTime() {
+        return zonedDateTime;
+    }
+
+    public void setZonedDateTime(ZonedDateTime zonedDateTime) {
+        this.zonedDateTime = zonedDateTime;
+    }
+
+    public LocalTime getLocalTime() {
+        return localTime;
+    }
+
+    public void setLocalTime(LocalTime localTime) {
+        this.localTime = localTime;
+    }
+
+    public OffsetTime getOffsetTime() {
+        return offsetTime;
+    }
+
+    public void setOffsetTime(OffsetTime offsetTime) {
+        this.offsetTime = offsetTime;
+    }
+
+    public LocalDate getLocalDate() {
+        return localDate;
+    }
+
+    public void setLocalDate(LocalDate localDate) {
+        this.localDate = localDate;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) {
+            return true;
+        }
+        if (o == null || getClass() != o.getClass()) {
+            return false;
+        }
+
+        DateTimeWrapper dateTimeWrapper = (DateTimeWrapper) o;
+        return !(dateTimeWrapper.getId() == null || getId() == null) && Objects.equals(getId(), dateTimeWrapper.getId());
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hashCode(getId());
+    }
+
+    @Override
+    public String toString() {
+        return "TimeZoneTest{" +
+            "id=" + id +
+            ", instant=" + instant +
+            ", localDateTime=" + localDateTime +
+            ", offsetDateTime=" + offsetDateTime +
+            ", zonedDateTime=" + zonedDateTime +
+            '}';
+    }
+}
diff --git a/src/test/java/com/budderfly/sites/repository/timezone/DateTimeWrapperRepository.java b/src/test/java/com/budderfly/sites/repository/timezone/DateTimeWrapperRepository.java
new file mode 100644
index 0000000..f9d8ee3
--- /dev/null
+++ b/src/test/java/com/budderfly/sites/repository/timezone/DateTimeWrapperRepository.java
@@ -0,0 +1,12 @@
+package com.budderfly.sites.repository.timezone;
+
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+/**
+ * Spring Data JPA repository for the DateTimeWrapper entity.
+ */
+@Repository
+public interface DateTimeWrapperRepository extends JpaRepository<DateTimeWrapper, Long> {
+
+}
diff --git a/src/test/java/com/budderfly/sites/security/SecurityUtilsUnitTest.java b/src/test/java/com/budderfly/sites/security/SecurityUtilsUnitTest.java
new file mode 100644
index 0000000..e0e957a
--- /dev/null
+++ b/src/test/java/com/budderfly/sites/security/SecurityUtilsUnitTest.java
@@ -0,0 +1,64 @@
+package com.budderfly.sites.security;
+
+import org.junit.Test;
+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
+import org.springframework.security.core.GrantedAuthority;
+import org.springframework.security.core.authority.SimpleGrantedAuthority;
+import org.springframework.security.core.context.SecurityContext;
+import org.springframework.security.core.context.SecurityContextHolder;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Optional;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+/**
+ * Test class for the SecurityUtils utility class.
+ *
+ * @see SecurityUtils
+ */
+public class SecurityUtilsUnitTest {
+
+    @Test
+    public void testgetCurrentUserLogin() {
+        SecurityContext securityContext = SecurityContextHolder.createEmptyContext();
+        securityContext.setAuthentication(new UsernamePasswordAuthenticationToken("admin", "admin"));
+        SecurityContextHolder.setContext(securityContext);
+        Optional<String> login = SecurityUtils.getCurrentUserLogin();
+        assertThat(login).contains("admin");
+    }
+
+    @Test
+    public void testIsAuthenticated() {
+        SecurityContext securityContext = SecurityContextHolder.createEmptyContext();
+        securityContext.setAuthentication(new UsernamePasswordAuthenticationToken("admin", "admin"));
+        SecurityContextHolder.setContext(securityContext);
+        boolean isAuthenticated = SecurityUtils.isAuthenticated();
+        assertThat(isAuthenticated).isTrue();
+    }
+
+    @Test
+    public void testAnonymousIsNotAuthenticated() {
+        SecurityContext securityContext = SecurityContextHolder.createEmptyContext();
+        Collection<GrantedAuthority> authorities = new ArrayList<>();
+        authorities.add(new SimpleGrantedAuthority(AuthoritiesConstants.ANONYMOUS));
+        securityContext.setAuthentication(new UsernamePasswordAuthenticationToken("anonymous", "anonymous", authorities));
+        SecurityContextHolder.setContext(securityContext);
+        boolean isAuthenticated = SecurityUtils.isAuthenticated();
+        assertThat(isAuthenticated).isFalse();
+    }
+
+    @Test
+    public void testIsCurrentUserInRole() {
+        SecurityContext securityContext = SecurityContextHolder.createEmptyContext();
+        Collection<GrantedAuthority> authorities = new ArrayList<>();
+        authorities.add(new SimpleGrantedAuthority(AuthoritiesConstants.USER));
+        securityContext.setAuthentication(new UsernamePasswordAuthenticationToken("user", "user", authorities));
+        SecurityContextHolder.setContext(securityContext);
+
+        assertThat(SecurityUtils.isCurrentUserInRole(AuthoritiesConstants.USER)).isTrue();
+        assertThat(SecurityUtils.isCurrentUserInRole(AuthoritiesConstants.ADMIN)).isFalse();
+    }
+
+}
diff --git a/src/test/java/com/budderfly/sites/web/rest/LogsResourceIntTest.java b/src/test/java/com/budderfly/sites/web/rest/LogsResourceIntTest.java
index 2bc4c67..c2055b3 100644
--- a/src/test/java/com/budderfly/sites/web/rest/LogsResourceIntTest.java
+++ b/src/test/java/com/budderfly/sites/web/rest/LogsResourceIntTest.java
@@ -8,7 +8,6 @@ import ch.qos.logback.classic.LoggerContext;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.mockito.MockitoAnnotations;
 import org.slf4j.LoggerFactory;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.http.MediaType;
@@ -28,15 +27,13 @@ import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.
  * @see LogsResource
  */
 @RunWith(SpringRunner.class)
-@SpringBootTest(classes = {SitesApp.class, SecurityBeanOverrideConfiguration.class})
+@SpringBootTest(classes = {SecurityBeanOverrideConfiguration.class, SitesApp.class})
 public class LogsResourceIntTest {
 
     private MockMvc restLogsMockMvc;
 
     @Before
     public void setup() {
-        MockitoAnnotations.initMocks(this);
-
         LogsResource logsResource = new LogsResource();
         this.restLogsMockMvc = MockMvcBuilders
             .standaloneSetup(logsResource)
@@ -44,14 +41,14 @@ public class LogsResourceIntTest {
     }
 
     @Test
-    public void getAllLogs()throws Exception {
+    public void getAllLogs() throws Exception {
         restLogsMockMvc.perform(get("/management/logs"))
             .andExpect(status().isOk())
             .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE));
     }
 
     @Test
-    public void changeLogs()throws Exception {
+    public void changeLogs() throws Exception {
         LoggerVM logger = new LoggerVM();
         logger.setLevel("INFO");
         logger.setName("ROOT");
diff --git a/src/test/java/com/budderfly/sites/web/rest/ProfileInfoResourceIntTest.java b/src/test/java/com/budderfly/sites/web/rest/ProfileInfoResourceIntTest.java
deleted file mode 100644
index 0a13a73..0000000
--- a/src/test/java/com/budderfly/sites/web/rest/ProfileInfoResourceIntTest.java
+++ /dev/null
@@ -1,86 +0,0 @@
-package com.budderfly.sites.web.rest;
-
-import io.github.jhipster.config.JHipsterProperties;
-import com.budderfly.sites.SitesApp;
-import com.budderfly.sites.config.SecurityBeanOverrideConfiguration;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.core.env.Environment;
-import org.springframework.http.MediaType;
-import org.springframework.test.context.junit4.SpringRunner;
-import org.springframework.test.web.servlet.MockMvc;
-import org.springframework.test.web.servlet.setup.MockMvcBuilders;
-
-import static org.mockito.Mockito.when;
-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
-
-/**
- * Test class for the ProfileInfoResource REST controller.
- *
- * @see ProfileInfoResource
- **/
-@RunWith(SpringRunner.class)
-@SpringBootTest(classes = {SitesApp.class, SecurityBeanOverrideConfiguration.class})
-public class ProfileInfoResourceIntTest {
-
-    @Mock
-    private Environment environment;
-
-    @Mock
-    private JHipsterProperties jHipsterProperties;
-
-    private MockMvc restProfileMockMvc;
-
-    @Before
-    public void setup() {
-        MockitoAnnotations.initMocks(this);
-        String mockProfile[] = { "test" };
-        JHipsterProperties.Ribbon ribbon = new JHipsterProperties.Ribbon();
-        ribbon.setDisplayOnActiveProfiles(mockProfile);
-        when(jHipsterProperties.getRibbon()).thenReturn(ribbon);
-
-        String activeProfiles[] = {"test"};
-        when(environment.getDefaultProfiles()).thenReturn(activeProfiles);
-        when(environment.getActiveProfiles()).thenReturn(activeProfiles);
-
-        ProfileInfoResource profileInfoResource = new ProfileInfoResource(environment, jHipsterProperties);
-        this.restProfileMockMvc = MockMvcBuilders
-            .standaloneSetup(profileInfoResource)
-            .build();
-    }
-
-    @Test
-    public void getProfileInfoWithRibbon() throws Exception {
-        restProfileMockMvc.perform(get("/api/profile-info"))
-            .andExpect(status().isOk())
-            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE));
-    }
-
-    @Test
-    public void getProfileInfoWithoutRibbon() throws Exception {
-        JHipsterProperties.Ribbon ribbon = new JHipsterProperties.Ribbon();
-        ribbon.setDisplayOnActiveProfiles(null);
-        when(jHipsterProperties.getRibbon()).thenReturn(ribbon);
-
-        restProfileMockMvc.perform(get("/api/profile-info"))
-            .andExpect(status().isOk())
-            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE));
-    }
-
-    @Test
-    public void getProfileInfoWithoutActiveProfiles() throws Exception {
-        String emptyProfile[] = {};
-        when(environment.getDefaultProfiles()).thenReturn(emptyProfile);
-        when(environment.getActiveProfiles()).thenReturn(emptyProfile);
-
-        restProfileMockMvc.perform(get("/api/profile-info"))
-            .andExpect(status().isOk())
-            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE));
-    }
-}
diff --git a/src/test/java/com/budderfly/sites/web/rest/SiteResourceIntTest.java b/src/test/java/com/budderfly/sites/web/rest/SiteResourceIntTest.java
index a7e95b9..1e1229d 100644
--- a/src/test/java/com/budderfly/sites/web/rest/SiteResourceIntTest.java
+++ b/src/test/java/com/budderfly/sites/web/rest/SiteResourceIntTest.java
@@ -7,8 +7,8 @@ import com.budderfly.sites.config.SecurityBeanOverrideConfiguration;
 import com.budderfly.sites.domain.Site;
 import com.budderfly.sites.domain.Site;
 import com.budderfly.sites.repository.SiteRepository;
-import com.budderfly.sites.service.SiteService;
 import com.budderfly.sites.repository.search.SiteSearchRepository;
+import com.budderfly.sites.service.SiteService;
 import com.budderfly.sites.service.dto.SiteDTO;
 import com.budderfly.sites.service.mapper.SiteMapper;
 import com.budderfly.sites.web.rest.errors.ExceptionTranslator;
@@ -21,6 +21,8 @@ import org.junit.runner.RunWith;
 import org.mockito.MockitoAnnotations;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.data.domain.PageImpl;
+import org.springframework.data.domain.PageRequest;
 import org.springframework.data.web.PageableHandlerMethodArgumentResolver;
 import org.springframework.http.MediaType;
 import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
@@ -28,13 +30,18 @@ import org.springframework.test.context.junit4.SpringRunner;
 import org.springframework.test.web.servlet.MockMvc;
 import org.springframework.test.web.servlet.setup.MockMvcBuilders;
 import org.springframework.transaction.annotation.Transactional;
+import org.springframework.validation.Validator;
 
 import javax.persistence.EntityManager;
+import java.util.Collections;
 import java.util.List;
 
+
 import static com.budderfly.sites.web.rest.TestUtil.createFormattingConversionService;
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.elasticsearch.index.query.QueryBuilders.queryStringQuery;
 import static org.hamcrest.Matchers.hasItem;
+import static org.mockito.Mockito.*;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
 
@@ -48,7 +55,7 @@ import com.budderfly.sites.domain.enumeration.SiteType;
  * @see SiteResource
  */
 @RunWith(SpringRunner.class)
-@SpringBootTest(classes = {SitesApp.class, SecurityBeanOverrideConfiguration.class})
+@SpringBootTest(classes = {SecurityBeanOverrideConfiguration.class, SitesApp.class})
 public class SiteResourceIntTest {
 
     private static final String DEFAULT_BUDDERFLY_ID = "AAAAAAAAAA";
@@ -123,8 +130,13 @@ public class SiteResourceIntTest {
     @Autowired
     private SiteService siteService;
 
+    /**
+     * This repository is mocked in the com.budderfly.sites.repository.search test package.
+     *
+     * @see com.budderfly.sites.repository.search.SiteSearchRepositoryMockConfiguration
+     */
     @Autowired
-    private SiteSearchRepository siteSearchRepository;
+    private SiteSearchRepository mockSiteSearchRepository;
 
     @Autowired
     private SiteQueryService siteQueryService;
@@ -141,6 +153,9 @@ public class SiteResourceIntTest {
     @Autowired
     private EntityManager em;
 
+    @Autowired
+    private Validator validator;
+
     private MockMvc restSiteMockMvc;
 
     private Site site;
@@ -153,7 +168,8 @@ public class SiteResourceIntTest {
             .setCustomArgumentResolvers(pageableArgumentResolver)
             .setControllerAdvice(exceptionTranslator)
             .setConversionService(createFormattingConversionService())
-            .setMessageConverters(jacksonMessageConverter).build();
+            .setMessageConverters(jacksonMessageConverter)
+            .setValidator(validator).build();
     }
 
     /**
@@ -190,7 +206,6 @@ public class SiteResourceIntTest {
 
     @Before
     public void initTest() {
-        siteSearchRepository.deleteAll();
         site = createEntity(em);
     }
 
@@ -233,8 +248,7 @@ public class SiteResourceIntTest {
         assertThat(testSite.isRollBilling()).isEqualTo(DEFAULT_ROLL_BILLING);
 
         // Validate the Site in Elasticsearch
-        Site siteEs = siteSearchRepository.findOne(testSite.getId());
-        assertThat(siteEs).isEqualToIgnoringGivenFields(testSite);
+        verify(mockSiteSearchRepository, times(1)).save(testSite);
     }
 
     @Test
@@ -255,6 +269,9 @@ public class SiteResourceIntTest {
         // Validate the Site in the database
         List<Site> siteList = siteRepository.findAll();
         assertThat(siteList).hasSize(databaseSizeBeforeCreate);
+
+        // Validate the Site in Elasticsearch
+        verify(mockSiteSearchRepository, times(0)).save(site);
     }
 
     @Test
@@ -423,7 +440,7 @@ public class SiteResourceIntTest {
             .andExpect(jsonPath("$.[*].taxExempt").value(hasItem(DEFAULT_TAX_EXEMPT.booleanValue())))
             .andExpect(jsonPath("$.[*].rollBilling").value(hasItem(DEFAULT_ROLL_BILLING.booleanValue())));
     }
-
+    
     @Test
     @Transactional
     public void getSite() throws Exception {
@@ -1351,6 +1368,12 @@ public class SiteResourceIntTest {
             .andExpect(jsonPath("$.[*].longitude").value(hasItem(DEFAULT_LONGITUDE.toString())))
             .andExpect(jsonPath("$.[*].taxExempt").value(hasItem(DEFAULT_TAX_EXEMPT.booleanValue())))
             .andExpect(jsonPath("$.[*].rollBilling").value(hasItem(DEFAULT_ROLL_BILLING.booleanValue())));
+
+        // Check, that the count call also returns 1
+        restSiteMockMvc.perform(get("/api/sites/count?sort=id,desc&" + filter))
+            .andExpect(status().isOk())
+            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
+            .andExpect(content().string("1"));
     }
 
     /**
@@ -1362,6 +1385,12 @@ public class SiteResourceIntTest {
             .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
             .andExpect(jsonPath("$").isArray())
             .andExpect(jsonPath("$").isEmpty());
+
+        // Check, that the count call also returns 0
+        restSiteMockMvc.perform(get("/api/sites/count?sort=id,desc&" + filter))
+            .andExpect(status().isOk())
+            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
+            .andExpect(content().string("0"));
     }
 
 
@@ -1378,11 +1407,11 @@ public class SiteResourceIntTest {
     public void updateSite() throws Exception {
         // Initialize the database
         siteRepository.saveAndFlush(site);
-        siteSearchRepository.save(site);
+
         int databaseSizeBeforeUpdate = siteRepository.findAll().size();
 
         // Update the site
-        Site updatedSite = siteRepository.findOne(site.getId());
+        Site updatedSite = siteRepository.findById(site.getId()).get();
         // Disconnect from session so that the updates on updatedSite are not directly saved in db
         em.detach(updatedSite);
         updatedSite
@@ -1441,8 +1470,7 @@ public class SiteResourceIntTest {
         assertThat(testSite.isRollBilling()).isEqualTo(UPDATED_ROLL_BILLING);
 
         // Validate the Site in Elasticsearch
-        Site siteEs = siteSearchRepository.findOne(testSite.getId());
-        assertThat(siteEs).isEqualToIgnoringGivenFields(testSite);
+        verify(mockSiteSearchRepository, times(1)).save(testSite);
     }
 
     @Test
@@ -1453,15 +1481,18 @@ public class SiteResourceIntTest {
         // Create the Site
         SiteDTO siteDTO = siteMapper.toDto(site);
 
-        // If the entity doesn't have an ID, it will be created instead of just being updated
+        // If the entity doesn't have an ID, it will throw BadRequestAlertException
         restSiteMockMvc.perform(put("/api/sites")
             .contentType(TestUtil.APPLICATION_JSON_UTF8)
             .content(TestUtil.convertObjectToJsonBytes(siteDTO)))
-            .andExpect(status().isCreated());
+            .andExpect(status().isBadRequest());
 
         // Validate the Site in the database
         List<Site> siteList = siteRepository.findAll();
-        assertThat(siteList).hasSize(databaseSizeBeforeUpdate + 1);
+        assertThat(siteList).hasSize(databaseSizeBeforeUpdate);
+
+        // Validate the Site in Elasticsearch
+        verify(mockSiteSearchRepository, times(0)).save(site);
     }
 
     @Test
@@ -1469,7 +1500,7 @@ public class SiteResourceIntTest {
     public void deleteSite() throws Exception {
         // Initialize the database
         siteRepository.saveAndFlush(site);
-        siteSearchRepository.save(site);
+
         int databaseSizeBeforeDelete = siteRepository.findAll().size();
 
         // Get the site
@@ -1477,13 +1508,12 @@ public class SiteResourceIntTest {
             .accept(TestUtil.APPLICATION_JSON_UTF8))
             .andExpect(status().isOk());
 
-        // Validate Elasticsearch is empty
-        boolean siteExistsInEs = siteSearchRepository.exists(site.getId());
-        assertThat(siteExistsInEs).isFalse();
-
         // Validate the database is empty
         List<Site> siteList = siteRepository.findAll();
         assertThat(siteList).hasSize(databaseSizeBeforeDelete - 1);
+
+        // Validate the Site in Elasticsearch
+        verify(mockSiteSearchRepository, times(1)).deleteById(site.getId());
     }
 
     @Test
@@ -1491,32 +1521,32 @@ public class SiteResourceIntTest {
     public void searchSite() throws Exception {
         // Initialize the database
         siteRepository.saveAndFlush(site);
-        siteSearchRepository.save(site);
-
+        when(mockSiteSearchRepository.search(queryStringQuery("id:" + site.getId()), PageRequest.of(0, 20)))
+            .thenReturn(new PageImpl<>(Collections.singletonList(site), PageRequest.of(0, 1), 1));
         // Search the site
         restSiteMockMvc.perform(get("/api/_search/sites?query=id:" + site.getId()))
             .andExpect(status().isOk())
             .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
             .andExpect(jsonPath("$.[*].id").value(hasItem(site.getId().intValue())))
-            .andExpect(jsonPath("$.[*].budderflyId").value(hasItem(DEFAULT_BUDDERFLY_ID.toString())))
-            .andExpect(jsonPath("$.[*].customerName").value(hasItem(DEFAULT_CUSTOMER_NAME.toString())))
+            .andExpect(jsonPath("$.[*].budderflyId").value(hasItem(DEFAULT_BUDDERFLY_ID)))
+            .andExpect(jsonPath("$.[*].customerName").value(hasItem(DEFAULT_CUSTOMER_NAME)))
             .andExpect(jsonPath("$.[*].status").value(hasItem(DEFAULT_STATUS.toString())))
-            .andExpect(jsonPath("$.[*].companyType").value(hasItem(DEFAULT_COMPANY_TYPE.toString())))
+            .andExpect(jsonPath("$.[*].companyType").value(hasItem(DEFAULT_COMPANY_TYPE)))
             .andExpect(jsonPath("$.[*].storeNumber").value(hasItem(DEFAULT_STORE_NUMBER)))
-            .andExpect(jsonPath("$.[*].address").value(hasItem(DEFAULT_ADDRESS.toString())))
-            .andExpect(jsonPath("$.[*].city").value(hasItem(DEFAULT_CITY.toString())))
-            .andExpect(jsonPath("$.[*].state").value(hasItem(DEFAULT_STATE.toString())))
-            .andExpect(jsonPath("$.[*].zip").value(hasItem(DEFAULT_ZIP.toString())))
+            .andExpect(jsonPath("$.[*].address").value(hasItem(DEFAULT_ADDRESS)))
+            .andExpect(jsonPath("$.[*].city").value(hasItem(DEFAULT_CITY)))
+            .andExpect(jsonPath("$.[*].state").value(hasItem(DEFAULT_STATE)))
+            .andExpect(jsonPath("$.[*].zip").value(hasItem(DEFAULT_ZIP)))
             .andExpect(jsonPath("$.[*].billingType").value(hasItem(DEFAULT_BILLING_TYPE.toString())))
             .andExpect(jsonPath("$.[*].paymentType").value(hasItem(DEFAULT_PAYMENT_TYPE.toString())))
             .andExpect(jsonPath("$.[*].siteType").value(hasItem(DEFAULT_SITE_TYPE.toString())))
-            .andExpect(jsonPath("$.[*].ownerName").value(hasItem(DEFAULT_OWNER_NAME.toString())))
-            .andExpect(jsonPath("$.[*].ownerEmail").value(hasItem(DEFAULT_OWNER_EMAIL.toString())))
-            .andExpect(jsonPath("$.[*].ownerPhone").value(hasItem(DEFAULT_OWNER_PHONE.toString())))
-            .andExpect(jsonPath("$.[*].address1").value(hasItem(DEFAULT_ADDRESS_1.toString())))
-            .andExpect(jsonPath("$.[*].address2").value(hasItem(DEFAULT_ADDRESS_2.toString())))
-            .andExpect(jsonPath("$.[*].latitude").value(hasItem(DEFAULT_LATITUDE.toString())))
-            .andExpect(jsonPath("$.[*].longitude").value(hasItem(DEFAULT_LONGITUDE.toString())))
+            .andExpect(jsonPath("$.[*].ownerName").value(hasItem(DEFAULT_OWNER_NAME)))
+            .andExpect(jsonPath("$.[*].ownerEmail").value(hasItem(DEFAULT_OWNER_EMAIL)))
+            .andExpect(jsonPath("$.[*].ownerPhone").value(hasItem(DEFAULT_OWNER_PHONE)))
+            .andExpect(jsonPath("$.[*].address1").value(hasItem(DEFAULT_ADDRESS_1)))
+            .andExpect(jsonPath("$.[*].address2").value(hasItem(DEFAULT_ADDRESS_2)))
+            .andExpect(jsonPath("$.[*].latitude").value(hasItem(DEFAULT_LATITUDE)))
+            .andExpect(jsonPath("$.[*].longitude").value(hasItem(DEFAULT_LONGITUDE)))
             .andExpect(jsonPath("$.[*].taxExempt").value(hasItem(DEFAULT_TAX_EXEMPT.booleanValue())))
             .andExpect(jsonPath("$.[*].rollBilling").value(hasItem(DEFAULT_ROLL_BILLING.booleanValue())));
     }
diff --git a/src/test/java/com/budderfly/sites/web/rest/TestUtil.java b/src/test/java/com/budderfly/sites/web/rest/TestUtil.java
index 883aee0..4aac236 100644
--- a/src/test/java/com/budderfly/sites/web/rest/TestUtil.java
+++ b/src/test/java/com/budderfly/sites/web/rest/TestUtil.java
@@ -20,13 +20,23 @@ import static org.assertj.core.api.Assertions.assertThat;
 /**
  * Utility class for testing REST controllers.
  */
-public class TestUtil {
+public final class TestUtil {
+
+    private static final ObjectMapper mapper = createObjectMapper();
 
     /** MediaType for JSON UTF8 */
     public static final MediaType APPLICATION_JSON_UTF8 = new MediaType(
             MediaType.APPLICATION_JSON.getType(),
             MediaType.APPLICATION_JSON.getSubtype(), StandardCharsets.UTF_8);
 
+
+    private static ObjectMapper createObjectMapper() {
+        ObjectMapper mapper = new ObjectMapper();
+        mapper.setSerializationInclusion(JsonInclude.Include.NON_EMPTY);
+        mapper.registerModule(new JavaTimeModule());
+        return mapper;
+    }
+
     /**
      * Convert an object to JSON byte array.
      *
@@ -37,12 +47,6 @@ public class TestUtil {
      */
     public static byte[] convertObjectToJsonBytes(Object object)
             throws IOException {
-        ObjectMapper mapper = new ObjectMapper();
-        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
-
-        JavaTimeModule module = new JavaTimeModule();
-        mapper.registerModule(module);
-
         return mapper.writeValueAsBytes(object);
     }
 
@@ -105,9 +109,8 @@ public class TestUtil {
     /**
      * Verifies the equals/hashcode contract on the domain object.
      */
-    @SuppressWarnings("unchecked")
-    public static void equalsVerifier(Class clazz) throws Exception {
-        Object domainObject1 = clazz.getConstructor().newInstance();
+    public static <T> void equalsVerifier(Class<T> clazz) throws Exception {
+        T domainObject1 = clazz.getConstructor().newInstance();
         assertThat(domainObject1.toString()).isNotNull();
         assertThat(domainObject1).isEqualTo(domainObject1);
         assertThat(domainObject1.hashCode()).isEqualTo(domainObject1.hashCode());
@@ -116,7 +119,7 @@ public class TestUtil {
         assertThat(domainObject1).isNotEqualTo(testOtherObject);
         assertThat(domainObject1).isNotEqualTo(null);
         // Test with an instance of the same class
-        Object domainObject2 = clazz.getConstructor().newInstance();
+        T domainObject2 = clazz.getConstructor().newInstance();
         assertThat(domainObject1).isNotEqualTo(domainObject2);
         // HashCodes are equals because the objects are not persisted yet
         assertThat(domainObject1.hashCode()).isEqualTo(domainObject2.hashCode());
@@ -133,4 +136,6 @@ public class TestUtil {
         registrar.registerFormatters(dfcs);
         return dfcs;
     }
+
+    private TestUtil() {}
 }
diff --git a/src/test/java/com/budderfly/sites/web/rest/errors/ExceptionTranslatorIntTest.java b/src/test/java/com/budderfly/sites/web/rest/errors/ExceptionTranslatorIntTest.java
index 2b332d9..032f351 100644
--- a/src/test/java/com/budderfly/sites/web/rest/errors/ExceptionTranslatorIntTest.java
+++ b/src/test/java/com/budderfly/sites/web/rest/errors/ExceptionTranslatorIntTest.java
@@ -12,7 +12,6 @@ import org.springframework.http.converter.json.MappingJackson2HttpMessageConvert
 import org.springframework.test.context.junit4.SpringRunner;
 import org.springframework.test.web.servlet.MockMvc;
 import org.springframework.test.web.servlet.setup.MockMvcBuilders;
-import org.zalando.problem.spring.web.advice.MediaTypes;
 
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
@@ -26,7 +25,7 @@ import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.
  * @see ExceptionTranslator
  */
 @RunWith(SpringRunner.class)
-@SpringBootTest(classes = {SitesApp.class, SecurityBeanOverrideConfiguration.class})
+@SpringBootTest(classes = {SecurityBeanOverrideConfiguration.class, SitesApp.class})
 public class ExceptionTranslatorIntTest {
 
     @Autowired
@@ -52,7 +51,7 @@ public class ExceptionTranslatorIntTest {
     public void testConcurrencyFailure() throws Exception {
         mockMvc.perform(get("/test/concurrency-failure"))
             .andExpect(status().isConflict())
-            .andExpect(content().contentType(MediaTypes.PROBLEM))
+            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON))
             .andExpect(jsonPath("$.message").value(ErrorConstants.ERR_CONCURRENCY_FAILURE));
     }
 
@@ -60,7 +59,7 @@ public class ExceptionTranslatorIntTest {
     public void testMethodArgumentNotValid() throws Exception {
          mockMvc.perform(post("/test/method-argument").content("{}").contentType(MediaType.APPLICATION_JSON))
              .andExpect(status().isBadRequest())
-             .andExpect(content().contentType(MediaTypes.PROBLEM))
+             .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON))
              .andExpect(jsonPath("$.message").value(ErrorConstants.ERR_VALIDATION))
              .andExpect(jsonPath("$.fieldErrors.[0].objectName").value("testDTO"))
              .andExpect(jsonPath("$.fieldErrors.[0].field").value("test"))
@@ -71,7 +70,7 @@ public class ExceptionTranslatorIntTest {
     public void testParameterizedError() throws Exception {
         mockMvc.perform(get("/test/parameterized-error"))
             .andExpect(status().isBadRequest())
-            .andExpect(content().contentType(MediaTypes.PROBLEM))
+            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON))
             .andExpect(jsonPath("$.message").value("test parameterized error"))
             .andExpect(jsonPath("$.params.param0").value("param0_value"))
             .andExpect(jsonPath("$.params.param1").value("param1_value"));
@@ -81,7 +80,7 @@ public class ExceptionTranslatorIntTest {
     public void testParameterizedError2() throws Exception {
         mockMvc.perform(get("/test/parameterized-error2"))
             .andExpect(status().isBadRequest())
-            .andExpect(content().contentType(MediaTypes.PROBLEM))
+            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON))
             .andExpect(jsonPath("$.message").value("test parameterized error"))
             .andExpect(jsonPath("$.params.foo").value("foo_value"))
             .andExpect(jsonPath("$.params.bar").value("bar_value"));
@@ -91,7 +90,7 @@ public class ExceptionTranslatorIntTest {
     public void testMissingServletRequestPartException() throws Exception {
         mockMvc.perform(get("/test/missing-servlet-request-part"))
             .andExpect(status().isBadRequest())
-            .andExpect(content().contentType(MediaTypes.PROBLEM))
+            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON))
             .andExpect(jsonPath("$.message").value("error.http.400"));
     }
 
@@ -99,7 +98,7 @@ public class ExceptionTranslatorIntTest {
     public void testMissingServletRequestParameterException() throws Exception {
         mockMvc.perform(get("/test/missing-servlet-request-parameter"))
             .andExpect(status().isBadRequest())
-            .andExpect(content().contentType(MediaTypes.PROBLEM))
+            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON))
             .andExpect(jsonPath("$.message").value("error.http.400"));
     }
 
@@ -107,7 +106,7 @@ public class ExceptionTranslatorIntTest {
     public void testAccessDenied() throws Exception {
         mockMvc.perform(get("/test/access-denied"))
             .andExpect(status().isForbidden())
-            .andExpect(content().contentType(MediaTypes.PROBLEM))
+            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON))
             .andExpect(jsonPath("$.message").value("error.http.403"))
             .andExpect(jsonPath("$.detail").value("test access denied!"));
     }
@@ -116,7 +115,7 @@ public class ExceptionTranslatorIntTest {
     public void testUnauthorized() throws Exception {
         mockMvc.perform(get("/test/unauthorized"))
             .andExpect(status().isUnauthorized())
-            .andExpect(content().contentType(MediaTypes.PROBLEM))
+            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON))
             .andExpect(jsonPath("$.message").value("error.http.401"))
             .andExpect(jsonPath("$.path").value("/test/unauthorized"))
             .andExpect(jsonPath("$.detail").value("test authentication failed!"));
@@ -126,7 +125,7 @@ public class ExceptionTranslatorIntTest {
     public void testMethodNotSupported() throws Exception {
         mockMvc.perform(post("/test/access-denied"))
             .andExpect(status().isMethodNotAllowed())
-            .andExpect(content().contentType(MediaTypes.PROBLEM))
+            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON))
             .andExpect(jsonPath("$.message").value("error.http.405"))
             .andExpect(jsonPath("$.detail").value("Request method 'POST' not supported"));
     }
@@ -135,7 +134,7 @@ public class ExceptionTranslatorIntTest {
     public void testExceptionWithResponseStatus() throws Exception {
         mockMvc.perform(get("/test/response-status"))
             .andExpect(status().isBadRequest())
-            .andExpect(content().contentType(MediaTypes.PROBLEM))
+            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON))
             .andExpect(jsonPath("$.message").value("error.http.400"))
             .andExpect(jsonPath("$.title").value("test response status"));
     }
@@ -144,7 +143,7 @@ public class ExceptionTranslatorIntTest {
     public void testInternalServerError() throws Exception {
         mockMvc.perform(get("/test/internal-server-error"))
             .andExpect(status().isInternalServerError())
-            .andExpect(content().contentType(MediaTypes.PROBLEM))
+            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON))
             .andExpect(jsonPath("$.message").value("error.http.500"))
             .andExpect(jsonPath("$.title").value("Internal Server Error"));
     }
diff --git a/src/test/java/com/budderfly/sites/web/rest/errors/ExceptionTranslatorTestController.java b/src/test/java/com/budderfly/sites/web/rest/errors/ExceptionTranslatorTestController.java
index d2e9b62..b3e9585 100644
--- a/src/test/java/com/budderfly/sites/web/rest/errors/ExceptionTranslatorTestController.java
+++ b/src/test/java/com/budderfly/sites/web/rest/errors/ExceptionTranslatorTestController.java
@@ -4,9 +4,7 @@ import org.springframework.dao.ConcurrencyFailureException;
 import org.springframework.http.HttpStatus;
 import org.springframework.security.access.AccessDeniedException;
 import org.springframework.security.authentication.BadCredentialsException;
-import org.springframework.web.bind.MissingServletRequestParameterException;
 import org.springframework.web.bind.annotation.*;
-import org.springframework.web.multipart.support.MissingServletRequestPartException;
 
 import javax.validation.Valid;
 import javax.validation.constraints.NotNull;
@@ -39,13 +37,11 @@ public class ExceptionTranslatorTestController {
     }
 
     @GetMapping("/test/missing-servlet-request-part")
-    public void missingServletRequestPartException() throws Exception {
-        throw new MissingServletRequestPartException("missing Servlet request part");
+    public void missingServletRequestPartException(@RequestPart String part) {
     }
 
     @GetMapping("/test/missing-servlet-request-parameter")
-    public void missingServletRequestParameterException() throws Exception {
-        throw new MissingServletRequestParameterException("missing Servlet request parameter", "parameter type");
+    public void missingServletRequestParameterException(@RequestParam String param) {
     }
 
     @GetMapping("/test/access-denied")
diff --git a/src/test/java/com/budderfly/sites/web/rest/util/PaginationUtilUnitTest.java b/src/test/java/com/budderfly/sites/web/rest/util/PaginationUtilUnitTest.java
index ee52354..af1eadf 100644
--- a/src/test/java/com/budderfly/sites/web/rest/util/PaginationUtilUnitTest.java
+++ b/src/test/java/com/budderfly/sites/web/rest/util/PaginationUtilUnitTest.java
@@ -24,7 +24,7 @@ public class PaginationUtilUnitTest {
     public void generatePaginationHttpHeadersTest() {
         String baseUrl = "/api/_search/example";
         List<String> content = new ArrayList<>();
-        Page<String> page = new PageImpl<>(content, new PageRequest(6, 50), 400L);
+        Page<String> page = new PageImpl<>(content, PageRequest.of(6, 50), 400L);
         HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(page, baseUrl);
         List<String> strHeaders = headers.get(HttpHeaders.LINK);
         assertNotNull(strHeaders);
@@ -67,7 +67,7 @@ public class PaginationUtilUnitTest {
         List<String> content = new ArrayList<>();
 
         // Page 0
-        Page<String> page = new PageImpl<>(content, new PageRequest(0, 50),400L);
+        Page<String> page = new PageImpl<>(content, PageRequest.of(0, 50), 400L);
         String query = "Test1, test2";
         HttpHeaders headers = PaginationUtil.generateSearchPaginationHttpHeaders(query, page, baseUrl);
         List<String> strHeaders = headers.get(HttpHeaders.LINK);
@@ -84,7 +84,7 @@ public class PaginationUtilUnitTest {
         assertTrue(Long.valueOf(xTotalCountHeaders.get(0)).equals(400L));
 
         // Page 1
-        page = new PageImpl<>(content,new PageRequest(1, 50),400L);
+        page = new PageImpl<>(content, PageRequest.of(1, 50), 400L);
         query = "Test1, test2";
         headers = PaginationUtil.generateSearchPaginationHttpHeaders(query, page, baseUrl);
         strHeaders = headers.get(HttpHeaders.LINK);
@@ -102,7 +102,7 @@ public class PaginationUtilUnitTest {
         assertTrue(Long.valueOf(xTotalCountHeaders.get(0)).equals(400L));
 
         // Page 6
-        page = new PageImpl<>(content,new PageRequest(6, 50), 400L);
+        page = new PageImpl<>(content, PageRequest.of(6, 50), 400L);
         headers = PaginationUtil.generateSearchPaginationHttpHeaders(query, page, baseUrl);
         strHeaders = headers.get(HttpHeaders.LINK);
         assertNotNull(strHeaders);
@@ -119,7 +119,7 @@ public class PaginationUtilUnitTest {
         assertTrue(Long.valueOf(xTotalCountHeaders.get(0)).equals(400L));
 
         // Page 7
-        page = new PageImpl<>(content,new PageRequest(7, 50),400L);
+        page = new PageImpl<>(content, PageRequest.of(7, 50), 400L);
         headers = PaginationUtil.generateSearchPaginationHttpHeaders(query, page, baseUrl);
         strHeaders = headers.get(HttpHeaders.LINK);
         assertNotNull(strHeaders);
diff --git a/src/test/resources/config/application.yml b/src/test/resources/config/application.yml
index 5284bb1..91dcaa1 100644
--- a/src/test/resources/config/application.yml
+++ b/src/test/resources/config/application.yml
@@ -3,8 +3,8 @@
 #
 # This configuration is used for unit/integration tests.
 #
-# More information on profiles: http://www.jhipster.tech/profiles/
-# More information on configuration properties: http://www.jhipster.tech/common-application-properties/
+# More information on profiles: https://www.jhipster.tech/profiles/
+# More information on configuration properties: https://www.jhipster.tech/common-application-properties/
 # ===================================================================
 
 # ===================================================================
@@ -15,7 +15,7 @@
 
 eureka:
     client:
-        enabled: true
+        enabled: false
     instance:
         appname: sites
         instanceId: sites:${spring.application.instance-id:${random.value}}
@@ -23,16 +23,16 @@ eureka:
 spring:
     application:
         name: sites
-    jackson:
-        serialization.write_dates_as_timestamps: false
     cache:
         type: simple
     datasource:
         type: com.zaxxer.hikari.HikariDataSource
-        url: jdbc:h2:mem:sites;DB_CLOSE_DELAY=-1
+        url: jdbc:h2:mem:sites;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
         name:
         username:
         password:
+        hikari:
+            auto-commit: false
     jpa:
         database-platform: io.github.jhipster.domain.util.FixedH2Dialect
         database: H2
@@ -45,18 +45,19 @@ spring:
                 implicit-strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
         properties:
             hibernate.id.new_generator_mappings: true
+            hibernate.connection.provider_disables_autocommit: true
             hibernate.cache.use_second_level_cache: false
             hibernate.cache.use_query_cache: false
             hibernate.generate_statistics: true
             hibernate.hbm2ddl.auto: validate
+            hibernate.jdbc.time_zone: UTC
     data:
         elasticsearch:
-            cluster-name:
-            cluster-nodes:
             properties:
                 path:
-                    logs: target/elasticsearch/log
-                    data: target/elasticsearch/data
+                    home: target/elasticsearch
+    liquibase:
+        contexts: test
     mail:
         host: localhost
     messages:
@@ -65,23 +66,17 @@ spring:
         favicon:
             enabled: false
     thymeleaf:
-        mode: XHTML
+        mode: HTML
 
-liquibase:
-    contexts: test
 
 server:
     port: 10344
     address: localhost
 
-info:
-    project:
-        version: #project.version#
-
 # ===================================================================
 # JHipster specific properties
 #
-# Full reference is available at: http://www.jhipster.tech/common-application-properties/
+# Full reference is available at: https://www.jhipster.tech/common-application-properties/
 # ===================================================================
 
 jhipster:
@@ -99,7 +94,8 @@ jhipster:
     security:
         authentication:
             jwt:
-                secret: 938432a605bbb5fbd21022ae5087c7f6afa71d0e
+                # This token must be encoded using Base64 (you can type `echo 'secret-key'|base64` on your command line)
+                base64-secret: 938432a605bbb5fbd21022ae5087c7f6afa71d0e
                 # Token is valid 24 hours
                 token-validity-in-seconds: 86400
         client-authorization:
@@ -119,7 +115,7 @@ jhipster:
 # to have type-safe configuration, like in the JHipsterProperties above
 #
 # More documentation is available at:
-# http://www.jhipster.tech/common-application-properties/
+# https://www.jhipster.tech/common-application-properties/
 # ===================================================================
 
-application:
+# application:
diff --git a/src/test/resources/logback.xml b/src/test/resources/logback.xml
index da0c3f4..5a3313d 100644
--- a/src/test/resources/logback.xml
+++ b/src/test/resources/logback.xml
@@ -1,4 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE configuration>
 
 <configuration scan="true">
     <include resource="org/springframework/boot/logging/logback/base.xml"/>
@@ -17,6 +18,7 @@
     <logger name="com.ryantenney" level="WARN"/>
     <logger name="com.sun" level="WARN"/>
     <logger name="com.zaxxer" level="WARN"/>
+    <logger name="io.searchbox" level="WARN"/>
     <logger name="io.undertow" level="WARN"/>
     <logger name="io.undertow.websockets.jsr" level="ERROR"/>
     <logger name="org.apache" level="WARN"/>
-- 
2.7.4

